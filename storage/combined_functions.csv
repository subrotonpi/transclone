file_path,code,start,end,fid,uid
systems/config/NamedListConfig.java,"
NamedListConfig (Preferences preferences, String preferenceName) {
    this.preferenceName = preferenceName;
    this.preferences = preferences;
    load ();
}
",28,33,0,0-28-33
systems/config/NamedListConfig.java,"
public void load () {
    if (preferences == null) {
        return;
    }
    String [] namedListPrefs = preferences.get (preferenceName, """").split (""###"");
    for (int i = 0; i < namedListPrefs.length; i += 2) {
        if (namedListPrefs [i].length () > 0) {
            namedList.put (namedListPrefs [i], serializeValue (namedListPrefs [i + 1]));
        }
    }
}
",38,53,0,0-38-53
systems/config/NamedListConfig.java,"
Object serializeValue (String value) {
    return value;
}
",55,58,0,0-55-58
systems/config/NamedListConfig.java,"
public void store () {
    StringBuffer sb = new StringBuffer (32);
    for (Map.Entry < String, Object > e : namedList.entrySet ()) {
        sb.append (e.getKey ()).append (""###"").append (e.getValue ()).append (""###"");
    }
    if (sb.length () > 3) {
        sb.delete (sb.length () - 3, sb.length ());
    }
    preferences.put (preferenceName, sb.toString ());
}
",63,75,0,0-63-75
systems/config/NamedListConfig.java,"
public void add (String key, Object value) {
    namedList.put (key, value);
}
",81,84,0,0-81-84
systems/config/NamedListConfig.java,"
public String get (String key) {
    Object value = namedList.get (key);
    return value != null ? value.toString () : null;
}
",90,94,0,0-90-94
systems/config/NamedListConfig.java,"
public String remove (String key) {
    return namedList.remove (key).toString ();
}
",100,103,0,0-100-103
systems/config/NamedListConfig.java,"
public Iterator < String > iterator () {
    return namedList.keySet ().iterator ();
}
",108,111,0,0-108-111
systems/config/NamedListConfig.java,"
public int size () {
    return namedList.size ();
}
",113,116,0,0-113-116
systems/config/NamedListConfig.java,"
public void update (String [] keys) {
    Map < String, Object > newList = new LinkedHashMap < String, Object > ();
    for (int i = 0; i < keys.length; i ++) {
        newList.put (keys [i], namedList.get (keys [i]));
    }
    namedList = newList;
}
",124,133,0,0-124-133
systems/config/ConfigDetector.java,"
public ConfigDetector (ScannerConfig config) {
    this.config = config;
}
",37,40,1,1-37-40
systems/config/ConfigDetector.java,"
public void setCallback (DetectorCallback callback) {
    this.callback = callback;
}
",42,45,1,1-42-45
systems/config/ConfigDetector.java,"
public void detectMaxThreads (InetSocketAddress socketAddress) {
    logger = LoggerFactory.getLogger ();
    expectedConnects = new AtomicInteger ();
    actualConnects = new AtomicInteger ();
    List < Thread > threads = new LinkedList < Thread > ();
    for (int i = 0; i < config.maxThreads; i ++) {
        Thread t = new SocketThread (socketAddress);
        threads.add (t);
        t.start ();
    }
    join (threads);
}
",47,65,1,1-47-65
systems/config/ConfigDetector.java,"
private void join (List < Thread > threads) {
    try {
        for (Thread t : threads) {
            t.join ();
        }
        threads.clear ();
    } catch (InterruptedException e) {
    }
}
",67,80,1,1-67-80
systems/config/ConfigDetector.java,"
public int getInitialConnectCount () {
    return config.maxThreads * CONNECTS_PER_THREAD;
}
",82,85,1,1-82-85
systems/config/ConfigDetector.java,"
public int getInitialSuccessCount () {
    return (int) (getInitialConnectCount () * SUCCESS_PROBABILITY);
}
",87,90,1,1-87-90
systems/config/ConfigDetector.java,"
public int getExpectedSuccessfulConnectCount () {
    return expectedConnects.intValue ();
}
",92,95,1,1-92-95
systems/config/ConfigDetector.java,"
public int getActualSuccessfulConnectCount () {
    return actualConnects.intValue ();
}
",97,100,1,1-97-100
systems/config/ConfigDetector.java,"
public SocketThread (InetSocketAddress socketAddress) {
    this.socketAddress = socketAddress;
}
",112,115,1,1-112-115
systems/config/ConfigDetector.java,"
public void run () {
    for (int i = 0; i < CONNECTS_PER_THREAD; i ++) {
        if (callback != null) callback.onDetectorTry ();
        Socket s = new Socket ();
        try {
            s.setSoTimeout (config.portTimeout);
            s.setTcpNoDelay (true);
            s.setSoLinger (true, 0);
            if (Math.random () > (1.0 - SUCCESS_PROBABILITY)) {
                expectedConnects.incrementAndGet ();
                s.connect (socketAddress, config.portTimeout);
            }
            else {
                s.connect (new InetSocketAddress (InetAddress.getByAddress (new byte [] {(byte) 192, (byte) 168, (byte) (Math.random () * 255), (byte) (Math.random () * 255)}), 61493 + (int) (Math.random () * 200)), config.portTimeout);
            }
            actualConnects.incrementAndGet ();
            if (callback != null) {
                callback.onDetectorSuccess ();
            }
            sleep (10000);
        } catch (SocketTimeoutException e) {
        } catch (Exception e) {
            logger.log (Level.FINE, ""Failure: "" + e);
        } finally {
            try {
                s.close ();
            } catch (IOException e) {
            }
        }
    }
}
",117,165,1,1-117-165
systems/config/CommandLineProcessor.java,"
CommandLineProcessor (FeederRegistry < FeederCreator > feederCreators, ExporterRegistry exporters) {
    this.feederRegistry = feederCreators;
    this.exporters = exporters;
}
",44,48,2,2-44-48
systems/config/CommandLineProcessor.java,"
public CommandLineProcessor (FeederRegistry < FeederCreator > feederCreators, ExporterRegistry exporters, StateMachine stateMachine, ScanningResultList scanningResults) {
    this (feederCreators, exporters);
    this.stateMachine = stateMachine;
    this.scanningResults = scanningResults;
    if (stateMachine != null) stateMachine.addTransitionListener (this);
}
",50,57,2,2-50-57
systems/config/CommandLineProcessor.java,"
public boolean shouldAutoQuit () {
    return autoQuit;
}
",59,62,2,2-59-62
systems/config/CommandLineProcessor.java,"
public boolean shouldAutoStart () {
    return autoStart;
}
",64,67,2,2-64-67
systems/config/CommandLineProcessor.java,"
public void parse (String...args) {
    for (int i = 0; i < args.length; i ++) {
        String arg = args [i];
        if (arg.startsWith (""-f:"")) {
            if (feederCreator != null) throw new IllegalArgumentException (""Only one feeder is allowed"");
            feederCreator = findFeederCreator (""feeder."" + arg.substring (3));
            feederArgs = new String [feederCreator.serializePartsLabels ().length];
            for (int j = 0; j < feederArgs.length; j ++) {
                feederArgs [j] = args [++ i];
                if (feederArgs [j].startsWith (""-"")) throw new IllegalArgumentException (feederCreator.getFeederName () + "" requires "" + feederArgs.length + "" arguments"");
            }
        }
        else if (arg.equals (""-o"")) {
            if (outputFilename != null) throw new IllegalArgumentException (""Only one exporter is allowed"");
            outputFilename = args [++ i];
            if (outputFilename.startsWith (""-"")) throw new IllegalArgumentException (""Output filename missing"");
            exporter = findExporter (outputFilename);
            autoStart = true;
        }
        else if (arg.startsWith (""-"")) {
            for (char option : arg.substring (1).toCharArray ()) {
                switch (option) {
                    case 's' :
                        autoStart = true;
                        break;
                    case 'q' :
                        autoQuit = true;
                        break;
                    case 'a' :
                        appendToFile = true;
                        break;
                    default :
                        throw new IllegalArgumentException (""Unknown option: "" + option);
                }
            }
        }
        else throw new IllegalArgumentException (""Unknown argument: "" + arg);
    }
    if (feederCreator == null) throw new IllegalArgumentException (""Feeder missing"");
    feederCreator.unserialize (feederArgs);
}
",69,125,2,2-69-125
systems/config/CommandLineProcessor.java,"
public String toString () {
    StringBuilder usage = new StringBuilder ();
    usage.append (""Pass the following arguments:\n"");
    usage.append (""[options] <feeder> <exporter>\n\n"");
    usage.append (""Where <feeder> is one of:\n"");
    for (FeederCreator creator : feederRegistry) {
        usage.append (""-f:"").append (shortId (creator.getFeederId ()));
        for (String partLabel : creator.serializePartsLabels ()) {
            usage.append ("" <"").append (Labels.getLabel (partLabel)).append ("">"");
        }
        usage.append ('\n');
    }
    usage.append (""\n<exporter> is one of:\n"");
    for (Exporter exporter : exporters) {
        usage.append (""-o filename."").append (shortId (exporter.getFilenameExtension ())).append (""\t\t"").append (Labels.getLabel (exporter.getId ())).append ('\n');
    }
    usage.append (""\nAnd possible [options] are (grouping allowed):\n"");
    usage.append (""-s\tstart scanning automatically\n"");
    usage.append (""-q\tquit after exporting the results\n"");
    usage.append (""-a\tappend to the file, do not overwrite\n"");
    return usage.toString ();
}
",128,154,2,2-128-154
systems/config/CommandLineProcessor.java,"
private String shortId (String longId) {
    return longId.substring (longId.lastIndexOf ('.') + 1);
}
",156,159,2,2-156-159
systems/config/CommandLineProcessor.java,"
private FeederCreator findFeederCreator (String feederId) {
    for (FeederCreator creator : feederRegistry) {
        if (feederId.equals (creator.getFeederId ())) {
            return creator;
        }
    }
    throw new IllegalArgumentException (""Feeder unknown: "" + shortId (feederId));
}
",161,171,2,2-161-171
systems/config/CommandLineProcessor.java,"
private Exporter findExporter (String outputFilename) {
    return exporters.createExporter (outputFilename);
}
",173,176,2,2-173-176
systems/config/CommandLineProcessor.java,"
public void transitionTo (ScanningState state, Transition transition) {
    if (transition == Transition.INIT) {
        if (feederCreator != null) feederRegistry.select (feederCreator.getFeederId ());
        if (autoStart) stateMachine.transitionToNext ();
    }
    else if (transition == Transition.COMPLETE && state == ScanningState.IDLE && exporter != null) {
        ExportProcessor processor = new ExportProcessor (exporter, new File (outputFilename), appendToFile);
        processor.process (scanningResults, null);
        if (autoQuit) {
            System.err.println (""Saved results to "" + outputFilename);
            System.exit (0);
        }
    }
}
",178,201,2,2-178-201
systems/config/ScannerConfig.java,"
ScannerConfig (Preferences preferences) {
    this.preferences = preferences;
    maxThreads = preferences.getInt (""maxThreads"", Platform.CRIPPLED_WINDOWS ? 10 : 100);
    threadDelay = preferences.getInt (""threadDelay"", 20);
    scanDeadHosts = preferences.getBoolean (""scanDeadHosts"", false);
    selectedPinger = preferences.get (""selectedPinger"", Platform.WINDOWS && ! Platform.ARCH_64 ? ""pinger.windows"" : ""pinger.icmp"");
    pingTimeout = preferences.getInt (""pingTimeout"", 2000);
    pingCount = preferences.getInt (""pingCount"", 3);
    skipBroadcastAddresses = preferences.getBoolean (""skipBroadcastAddresses"", true);
    portTimeout = preferences.getInt (""portTimeout"", 2000);
    adaptPortTimeout = preferences.getBoolean (""adaptPortTimeout"", ! Platform.CRIPPLED_WINDOWS);
    minPortTimeout = preferences.getInt (""minPortTimeout"", 100);
    portString = preferences.get (""portString"", """");
    useRequestedPorts = preferences.getBoolean (""useRequestedPorts"", true);
    notAvailableText = preferences.get (""notAvailableText"", Labels.getLabel (""fetcher.value.notAvailable""));
    notScannedText = preferences.get (""notScannedText"", Labels.getLabel (""fetcher.value.notScanned""));
}
",40,58,3,3-40-58
systems/config/ScannerConfig.java,"
public void store () {
    preferences.putInt (""maxThreads"", maxThreads);
    preferences.putInt (""threadDelay"", threadDelay);
    preferences.putBoolean (""scanDeadHosts"", scanDeadHosts);
    preferences.put (""selectedPinger"", selectedPinger);
    preferences.putInt (""pingTimeout"", pingTimeout);
    preferences.putInt (""pingCount"", pingCount);
    preferences.putBoolean (""skipBroadcastAddresses"", skipBroadcastAddresses);
    preferences.putInt (""portTimeout"", portTimeout);
    preferences.putBoolean (""adaptPortTimeout"", adaptPortTimeout);
    preferences.putInt (""minPortTimeout"", minPortTimeout);
    preferences.put (""portString"", portString);
    preferences.putBoolean (""useRequestedPorts"", useRequestedPorts);
    preferences.put (""notAvailableText"", notAvailableText);
    preferences.put (""notScannedText"", notScannedText);
}
",63,79,3,3-63-79
systems/config/FavoritesConfig.java,"
public FavoritesConfig (Preferences preferences) {
    super (preferences, ""favorites"");
}
",20,23,4,4-20-23
systems/config/FavoritesConfig.java,"
public void add (String key, FeederCreator feederCreator) {
    StringBuilder serializedFeeder = new StringBuilder (feederCreator.getFeederId ());
    serializedFeeder.append ('\t');
    for (String part : feederCreator.serialize ()) {
        serializedFeeder.append (part).append ("":::"");
    }
    super.add (key, serializedFeeder.toString ());
}
",25,34,4,4-25-34
systems/config/FavoritesConfig.java,"
public String getFeederId (String key) {
    String value = get (key);
    int indexOf = value.indexOf ('\t');
    return value.substring (0, indexOf);
}
",36,41,4,4-36-41
systems/config/FavoritesConfig.java,"
public String [] getSerializedParts (String key) {
    String value = get (key);
    int indexOf = value.indexOf ('\t');
    return value.substring (indexOf + 1).split ("":::"");
}
",43,48,4,4-43-48
systems/config/ComponentRegistry.java,"
public ComponentRegistry () {
    MutablePicoContainer container = new DefaultPicoContainer ();
    this.container = container;
    ComponentParameter anyComponentParameter = new ComponentParameter ();
    Config globalConfig = Config.getConfig ();
    container.registerComponentInstance (globalConfig.getPreferences ());
    container.registerComponentInstance (globalConfig.forScanner ());
    container.registerComponentInstance (globalConfig.forGUI ());
    container.registerComponentInstance (globalConfig.forOpeners ());
    container.registerComponentInstance (globalConfig.forFavorites ());
    container.registerComponentInstance (Labels.getInstance ());
    container.registerComponentImplementation (CommentsConfig.class);
    container.registerComponentImplementation (ConfigDetector.class);
    container.registerComponentImplementation (ExporterRegistry.class);
    container.registerComponentImplementation (TXTExporter.class);
    container.registerComponentImplementation (CSVExporter.class);
    container.registerComponentImplementation (XMLExporter.class);
    container.registerComponentImplementation (IPListExporter.class);
    container.registerComponentImplementation (FetcherRegistry.class, FetcherRegistryImpl.class);
    container.registerComponentImplementation (IPFetcher.class);
    container.registerComponentImplementation (PingFetcher.class);
    container.registerComponentImplementation (PingTTLFetcher.class);
    container.registerComponentImplementation (HostnameFetcher.class);
    container.registerComponentImplementation (PortsFetcher.class);
    container.registerComponentImplementation (FilteredPortsFetcher.class);
    container.registerComponentImplementation (WebDetectFetcher.class);
    container.registerComponentImplementation (HTTPSenderFetcher.class);
    container.registerComponentImplementation (CommentFetcher.class);
    container.registerComponentImplementation (NetBIOSInfoFetcher.class);
    container.registerComponentImplementation (PingerRegistry.class, PingerRegistryImpl.class);
    container.registerComponentImplementation (ScanningResultList.class);
    container.registerComponentImplementation (Scanner.class);
    container.registerComponentImplementation (SWTAwareStateMachine.class);
    container.registerComponentImplementation (ScannerDispatcherThreadFactory.class);
    container.registerComponentImplementation (CommandLineProcessor.class);
    container.registerComponentInstance (Display.getDefault ());
    container.registerComponentImplementation (""mainShell"", Shell.class);
    container.registerComponentImplementation (""mainMenu"", Menu.class, new Parameter [] {new ComponentParameter (""mainShell""), new ConstantParameter (new Integer (SWT.BAR))});
    container.registerComponentImplementation (""commandsMenu"", CommandsMenu.class);
    container.registerComponentImplementation (""feederArea"", Composite.class, new Parameter [] {new ComponentParameter (""mainShell""), new ConstantParameter (new Integer (SWT.NONE))});
    container.registerComponentImplementation (""controlsArea"", Composite.class, new Parameter [] {new ComponentParameter (""mainShell""), new ConstantParameter (new Integer (SWT.NONE))});
    container.registerComponentImplementation (""startStopButton"", Button.class, new Parameter [] {new ComponentParameter (""controlsArea""), new ConstantParameter (new Integer (SWT.NONE))});
    container.registerComponentImplementation (""feederSelectionCombo"", FeederSelectionCombo.class, new Parameter [] {new ComponentParameter (""controlsArea"")});
    container.registerComponentImplementation (FeederGUIRegistry.class);
    Parameter [] feederGUIParameters = new Parameter [] {new ComponentParameter (""feederArea"")};
    container.registerComponentImplementation (RangeFeederGUI.class, RangeFeederGUI.class, feederGUIParameters);
    container.registerComponentImplementation (RandomFeederGUI.class, RandomFeederGUI.class, feederGUIParameters);
    container.registerComponentImplementation (FileFeederGUI.class, FileFeederGUI.class, feederGUIParameters);
    container.registerComponentImplementation (OpenerLauncher.class);
    container.registerComponentImplementation (MainWindow.class, MainWindow.class, new Parameter [] {new ComponentParameter (""mainShell""), anyComponentParameter, new ComponentParameter (""feederArea""), new ComponentParameter (""controlsArea""), new ComponentParameter (""feederSelectionCombo""), new ComponentParameter (""startStopButton""), anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter});
    container.registerComponentImplementation (ResultTable.class, ResultTable.class, new Parameter [] {new ComponentParameter (""mainShell""), anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter});
    container.registerComponentImplementation (StatusBar.class, StatusBar.class, new Parameter [] {new ComponentParameter (""mainShell""), anyComponentParameter, anyComponentParameter});
    container.registerComponentImplementation (MainMenu.class, MainMenu.class, new Parameter [] {new ComponentParameter (""mainShell""), new ComponentParameter (""mainMenu""), new ComponentParameter (""commandsMenu""), anyComponentParameter, new ConstantParameter (container)});
    container.registerComponentImplementation (MainMenu.ColumnsMenu.class, MainMenu.ColumnsMenu.class, new Parameter [] {new ComponentParameter (""mainShell""), anyComponentParameter, anyComponentParameter, anyComponentParameter});
    container.registerComponentImplementation (AboutDialog.class);
    container.registerComponentImplementation (PreferencesDialog.class);
    container.registerComponentImplementation (ConfigDetectorDialog.class);
    container.registerComponentImplementation (SelectFetchersDialog.class);
    container.registerComponentImplementation (DetailsWindow.class);
    container.registerComponentImplementation (StatisticsDialog.class);
    container.registerComponentImplementation (StartStopScanningAction.class);
    container.registerComponentImplementation (ColumnsActions.SortBy.class);
    container.registerComponentImplementation (ColumnsActions.FetcherPreferences.class);
    container.registerComponentImplementation (ColumnsActions.AboutFetcher.class);
    container.registerComponentImplementation (ColumnsActions.ColumnClick.class);
    container.registerComponentImplementation (ColumnsActions.ColumnResize.class);
    container.registerComponentImplementation (CommandsMenuActions.Details.class);
    container.registerComponentImplementation (ToolsActions.Preferences.class);
    container.registerComponentImplementation (ToolsActions.ChooseFetchers.class);
    container.registerComponentImplementation (ToolsActions.TableSelection.class);
    container.registerComponentImplementation (HelpMenuActions.CheckVersion.class);
    if (Platform.MAC_OS) {
        try {
            container.registerComponentImplementation (Class.forName (""net.azib.ipscan.platform.mac.MacApplicationMenu""));
        } catch (Exception e) {
            Logger.getLogger (getClass ().getName ()).warning (""Cannot initialize MacApplicationMenu: "" + e);
        }
    }
    new PluginLoader ().addTo (container);
}
",82,223,5,5-82-223
systems/config/ComponentRegistry.java,"
private void start () {
    if (! containerStarted) {
        containerStarted = true;
        container.start ();
    }
}
",225,232,5,5-225-232
systems/config/ComponentRegistry.java,"
public MainWindow getMainWindow () {
    start ();
    return (MainWindow) container.getComponentInstance (MainWindow.class);
}
",234,240,5,5-234-240
systems/config/ComponentRegistry.java,"
public CommandLineProcessor getCommandLineProcessor () {
    start ();
    return (CommandLineProcessor) container.getComponentInstance (CommandLineProcessor.class);
}
",242,246,5,5-242-246
systems/config/CommentsConfig.java,"
public CommentsConfig (Preferences preferences) {
    this.preferences = preferences.node (""comments"");
}
",21,25,6,6-21-25
systems/config/CommentsConfig.java,"
public String getComment (InetAddress address) {
    return preferences.get (address.getHostAddress (), null);
}
",27,30,6,6-27-30
systems/config/CommentsConfig.java,"
public void setComment (InetAddress address, String comment) {
    if (comment == null || comment.length () == 0) preferences.remove (address.getHostAddress ());
    else preferences.put (address.getHostAddress (), comment);
}
",32,38,6,6-32-38
systems/config/OpenersConfig.java,"
public OpenersConfig (Preferences preferences) {
    super (preferences, ""openers"");
    if (size () == 0) {
        Labels labels = Labels.getInstance ();
        if (Platform.WINDOWS) add (labels.get (""opener.netbios""), new Opener (""\\\\${fetcher.ip}"", false, null));
        add (labels.get (""opener.web""), new Opener (""http://${fetcher.hostname}/"", false, null));
        add (labels.get (""opener.ftp""), new Opener (""ftp://${fetcher.hostname}/"", false, null));
        add (labels.get (""opener.telnet""), new Opener (""telnet ${fetcher.ip}"", true, null));
        add (labels.get (""opener.ping""), new Opener (""ping ${fetcher.ip}"", true, null));
        add (labels.get (""opener.traceroute""), new Opener ((Platform.WINDOWS ? ""tracert"" : Platform.LINUX ? ""tracepath"" : ""traceroute"") + "" ${fetcher.ip}"", true, null));
        if (! Platform.WINDOWS) add (labels.get (""opener.ssh""), new Opener (""ssh ${fetcher.ip}"", true, null));
        if (! Platform.WINDOWS) add (labels.get (""opener.whois""), new Opener (""whois ${fetcher.ip}"", true, null));
        add (labels.get (""opener.geolocate""), new Opener (""http://www.angryip.org/iplocate.php?ip=${fetcher.ip}"", false, null));
        add (labels.get (""opener.email""), new Opener (""mailto:somebody@example.com?subject=${fetcher.ip} (${fetcher.hostname})"", true, null));
    }
}
",22,41,7,7-22-41
systems/config/OpenersConfig.java,"
Object serializeValue (String value) {
    return new Opener (value);
}
",43,46,7,7-43-46
systems/config/OpenersConfig.java,"
public void add (String name, Object value) {
    if (value instanceof Opener) super.add (name, value);
    else throw new IllegalArgumentException ();
}
",48,55,7,7-48-55
systems/config/OpenersConfig.java,"
public Opener getOpener (String name) {
    return (Opener) namedList.get (name);
}
",57,60,7,7-57-60
systems/config/OpenersConfig.java,"
Opener (String serialized) {
    try {
        String [] parts = serialized.split (""@@@"");
        execString = parts [0];
        inTerminal = parts [1].charAt (0) == '1';
        workingDir = parts.length >= 3 && parts [2].length () > 0 ? new File (parts [2]) : null;
    } catch (ArrayIndexOutOfBoundsException e) {
        LOG.fine (""Broken opener config read: "" + serialized);
    }
}
",68,82,7,7-68-82
systems/config/OpenersConfig.java,"
public Opener (String execString, boolean inTerminal, File workingDir) {
    this.execString = execString;
    this.inTerminal = inTerminal;
    this.workingDir = workingDir;
}
",84,89,7,7-84-89
systems/config/OpenersConfig.java,"
public String toString () {
    return execString + ""@@@"" + (inTerminal ? '1' : '0') + ""@@@"" + (workingDir != null ? workingDir.toString () : """");
}
",91,94,7,7-91-94
systems/config/LoggerFactory.java,"
public static Logger getLogger () {
    Throwable t = new Throwable ();
    StackTraceElement directCaller = t.getStackTrace () [1];
    return Logger.getLogger (directCaller.getClassName ());
}
",21,26,8,8-21-26
systems/config/GUIConfig.java,"
GUIConfig (Preferences preferences) {
    this.preferences = preferences;
    load ();
}
",43,47,9,9-43-47
systems/config/GUIConfig.java,"
private void load () {
    isFirstRun = preferences.getBoolean (""firstRun"", true);
    activeFeeder = preferences.getInt (""activeFeeder"", 0);
    displayMethod = DisplayMethod.valueOf (preferences.get (""displayMethod"", DisplayMethod.ALL.toString ()));
    showScanStats = preferences.getBoolean (""showScanStats"", true);
    askScanConfirmation = preferences.getBoolean (""askScanConfirmation"", true);
    isMainWindowMaximized = preferences.getBoolean (""windowMaximized"", false);
    Rectangle screen = Display.getDefault ().getBounds ();
    mainWindowBounds = new Rectangle (preferences.getInt (""windowLeft"", screen.x + screen.width / 2 - 600 / 2), preferences.getInt (""windowTop"", screen.y + screen.height / 2 - 360 / 2), preferences.getInt (""windowWidth"", 600), preferences.getInt (""windowHeight"", 360));
    detailsWindowSize = new Point (preferences.getInt (""detailsWidth"", 300), preferences.getInt (""detailsHeight"", 200));
}
",49,68,9,9-49-68
systems/config/GUIConfig.java,"
public void store () {
    preferences.putBoolean (""firstRun"", isFirstRun);
    preferences.putInt (""activeFeeder"", activeFeeder);
    preferences.put (""displayMethod"", displayMethod.toString ());
    preferences.putBoolean (""showScanStats"", showScanStats);
    preferences.putBoolean (""askScanConfirmation"", askScanConfirmation);
    preferences.putBoolean (""windowMaximized"", isMainWindowMaximized);
    if (! isMainWindowMaximized) {
        preferences.putInt (""windowLeft"", mainWindowBounds.x);
        preferences.putInt (""windowTop"", mainWindowBounds.y);
        preferences.putInt (""windowWidth"", mainWindowBounds.width);
        preferences.putInt (""windowHeight"", mainWindowBounds.height);
    }
    preferences.putInt (""detailsWidth"", detailsWindowSize.x);
    preferences.putInt (""detailsHeight"", detailsWindowSize.y);
}
",70,89,9,9-70-89
systems/config/GUIConfig.java,"
public Rectangle getMainWindowBounds () {
    return mainWindowBounds;
}
",91,94,9,9-91-94
systems/config/GUIConfig.java,"
public void setMainWindowBounds (Rectangle bounds, boolean isMaximized) {
    if (! isMaximized) {
        mainWindowBounds = bounds;
    }
    isMainWindowMaximized = isMaximized;
}
",100,107,9,9-100-107
systems/config/GUIConfig.java,"
public int getColumnWidth (Fetcher fetcher) {
    int width = preferences.getInt (""columnWidth."" + fetcher.getId (), 0);
    if (width == 0) {
        if (fetcher instanceof IPFetcher || fetcher instanceof HostnameFetcher) width = 140;
        else if (fetcher instanceof PingFetcher) width = 60;
        else width = 90;
    }
    return width;
}
",113,127,9,9-113-127
systems/config/GUIConfig.java,"
public void setColumnWidth (Fetcher fetcher, int width) {
    preferences.putInt (""columnWidth."" + fetcher.getId (), width);
}
",134,137,9,9-134-137
systems/config/Config.java,"
private Config () {
    preferences = Preferences.userRoot ().node (""ipscan"");
    scannerConfig = new ScannerConfig (preferences);
    guiConfig = new GUIConfig (preferences);
    favoritesConfig = new FavoritesConfig (preferences);
    openersConfig = new OpenersConfig (preferences);
}
",31,38,10,10-31-38
systems/config/Config.java,"
public static Config getConfig () {
    if (globalConfig == null) {
        globalConfig = new Config ();
    }
    return globalConfig;
}
",43,50,10,10-43-50
systems/config/Config.java,"
public void store () {
    scannerConfig.store ();
    guiConfig.store ();
    favoritesConfig.store ();
    openersConfig.store ();
}
",52,58,10,10-52-58
systems/config/Config.java,"
public Preferences getPreferences () {
    return preferences;
}
",60,63,10,10-60-63
systems/config/Config.java,"
public ScannerConfig forScanner () {
    return scannerConfig;
}
",68,71,10,10-68-71
systems/config/Config.java,"
NamedListConfig forFavorites () {
    return favoritesConfig;
}
",76,79,10,10-76-79
systems/config/Config.java,"
OpenersConfig forOpeners () {
    return openersConfig;
}
",84,87,10,10-84-87
systems/config/Config.java,"
public GUIConfig forGUI () {
    return guiConfig;
}
",92,95,10,10-92-95
systems/config/Version.java,"
public static String getVersion () {
    if (version == null) {
        loadVersionFromJar ();
    }
    return version;
}
",44,51,11,11-44-51
systems/config/Version.java,"
public static String getBuildDate () {
    if (buildDate == null) {
        loadVersionFromJar ();
    }
    return buildDate;
}
",56,63,11,11-56-63
systems/config/Version.java,"
private static void loadVersionFromJar () {
    String path = Version.class.getClassLoader ().getResource (Version.class.getName ().replace ('.', '/') + "".class"").toString ();
    if (path.startsWith (""jar:file:"")) {
        path = path.substring (4, path.indexOf ('!'));
        try {
            JarFile jarFile = new JarFile (new URI (path).getPath ());
            Attributes attrs = jarFile.getManifest ().getMainAttributes ();
            version = attrs.getValue (""Version"");
            buildDate = attrs.getValue (""Build-Date"");
            return;
        } catch (Exception e) {
            LoggerFactory.getLogger ().log (Level.WARNING, ""Cannot obtain version"", e);
        }
    }
    version = ""current"";
    buildDate = ""today"";
}
",65,86,11,11-65-86
systems/config/Version.java,"
public static String getFullName () {
    return NAME + "" "" + getVersion ();
}
",88,91,11,11-88-91
systems/config/Labels.java,"
private Labels () {
}
",41,44,12,12-41-44
systems/config/Labels.java,"
public static final Labels getInstance () {
    return instance;
}
",46,49,12,12-46-49
systems/config/Labels.java,"
public static void initialize (Locale locale) {
    if (instance != null && locale.equals (instance.locale)) {
        return;
    }
    instance = new Labels ();
    instance.locale = locale;
    InputStream labelsStream = null;
    try {
        labelsStream = Labels.class.getClassLoader ().getResourceAsStream (""messages.properties"");
        if (labelsStream == null) {
            throw new MissingResourceException (""Labels not found!"", Labels.class.getName (), ""messages"");
        }
        instance.labelsFallback = new PropertyResourceBundle (labelsStream);
        labelsStream.close ();
    } catch (IOException e) {
        throw new MissingResourceException (e.toString (), Labels.class.getName (), ""messages"");
    }
    try {
        labelsStream = Labels.class.getClassLoader ().getResourceAsStream (""messages_"" + locale.getLanguage () + "".properties"");
        instance.labels = new PropertyResourceBundle (labelsStream);
        labelsStream.close ();
    } catch (Exception e) {
        instance.labels = instance.labelsFallback;
    }
}
",56,95,12,12-56-95
systems/config/Labels.java,"
public InputStream getImageAsStream (String key) {
    String imagePath = get (key);
    return getClass ().getClassLoader ().getResourceAsStream (imagePath);
}
",101,105,12,12-101-105
systems/config/Labels.java,"
public String get (String key) {
    try {
        return labels.getString (key);
    } catch (MissingResourceException e) {
        String text = labelsFallback.getString (key);
        LOG.warning (""Used fallback label for "" + key);
        return text;
    }
}
",111,123,12,12-111-123
systems/config/Labels.java,"
public static String getLabel (String key) {
    return getInstance ().get (key);
}
",128,131,12,12-128-131
systems/config/rbm.py,"static void abc ( ) {
  {
  }
  ;
}
",1,3,13,13-1-3
systems/config/rbm.py,"public static double test ( double a , double b ) {
  {
    return a - b ;
  }
  return a ;
}
",4,6,13,13-4-6
systems/config/rbm.py,"public static double random ( double a ) {
  {
    return a * a ;
  }
  return a ;
}
",7,8,13,13-7-8
