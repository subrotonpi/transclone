file_path,code,start,end
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/Tweedledum.java,"
public Tweedledum () {
}
",31,31
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/Tweedledum.java,"
public Tweedledum (Tweedledee tweedledee) {
    setBrother (tweedledee);
}
",32,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/Tweedledum.java,"
public Tweedledee getBrother () {
    return tweedledee;
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/Tweedledum.java,"
public void setBrother (Tweedledee tweedledee) {
    this.tweedledee = tweedledee;
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/Tweedledum.java,"
public String getName () {
    return ""Tweedledum"";
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/SuperheroBean.java,"
public SuperheroBean () {
    super ();
}
",27,30
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/SuperheroBean.java,"
public SuperheroBean (String moniker, SidekickBean sidekick) {
    super ();
    this.moniker = moniker;
    this.sidekick = sidekick;
}
",32,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/SuperheroBean.java,"
public SuperheroBean (SidekickBean sidekick) {
    super ();
    this.sidekick = sidekick;
}
",39,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/SuperheroBean.java,"
public String getMoniker () {
    return moniker;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/SuperheroBean.java,"
public void setMoniker (String moniker) {
    this.moniker = moniker;
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/SuperheroBean.java,"
public SidekickBean getSidekick () {
    return sidekick;
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/SuperheroBean.java,"
public void setSidekick (SidekickBean sidekick) {
    this.sidekick = sidekick;
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestMixedCollection.java,"
public TestMixedCollection (String name) {
    super (name);
}
",30,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestMixedCollection.java,"
public void testWithDefaults () throws Exception {
    toXml (true);
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestMixedCollection.java,"
public void testWithoutDefaults () throws Exception {
    toXml (false);
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestMixedCollection.java,"
protected void toXml (boolean addAdders) throws Exception {
    StringReader configReader = new StringReader (""<?xml version='1.0' ?>"" + ""<betwixt-config primitiveTypes='attribute'>"" + ""    <class name='org.apache.commons.betwixt.io.TestMixedCollection$ParentBean'>"" + ""        <element name='parentBean'>"" + ""            <element name='childBeans'>"" + ""                <element property='childBeans'/>"" + ""            </element>"" + ""            <addDefaults add-properties='true' guess-names='false' add-adders='"" + addAdders + ""'/>"" + ""        </element>"" + ""    </class>"" + ""    <class name='org.apache.commons.betwixt.io.TestMixedCollection$ChildBean1'>"" + ""        <element name='childBean1'>"" + ""            <addDefaults/>"" + ""        </element>"" + ""    </class>"" + ""    <class name='org.apache.commons.betwixt.io.TestMixedCollection$ChildBean2'>"" + ""        <element name='childBean2'>"" + ""            <addDefaults/>"" + ""        </element>"" + ""    </class>"" + ""</betwixt-config>"");
    ParentBean pb = new ParentBean ();
    pb.setStuff (""stuff"");
    ChildBean1 cb1 = new ChildBean1 ();
    pb.getChildBeans ().add (cb1);
    ChildBean2 cb2 = new ChildBean2 ();
    pb.getChildBeans ().add (cb2);
    StringWriter writer = new StringWriter ();
    BeanWriter beanWriter = new BeanWriter (writer);
    beanWriter.enablePrettyPrint ();
    beanWriter.getXMLIntrospector ().register (new InputSource (configReader));
    beanWriter.writeXmlDeclaration (""<?xml version=\""1.0\""?>"");
    beanWriter.write (pb);
    String expected = ""<?xml version='1.0'?>"" + ""<parentBean stuff='stuff' id='1'>"" + ""     <childBeans>"" + ""            <childBean1/>"" + ""            <childBean2/>"" + ""     </childBeans>"" + ""</parentBean>"";
    xmlAssertIsomorphic (parseString (expected), parseString (writer));
}
",45,94
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestMixedCollection.java,"
public List getChildBeans () {
    return childBeans;
}
",102,105
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestMixedCollection.java,"
public void setChildBeans (List childBeans) {
    this.childBeans = childBeans;
}
",107,110
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestMixedCollection.java,"
public void addChildBean (ChildBean childBean) {
    getChildBeans ().add (childBean);
}
",112,115
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestMixedCollection.java,"
public String getStuff () {
    return stuff;
}
",117,120
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestMixedCollection.java,"
public void setStuff (String stuff) {
    this.stuff = stuff;
}
",122,125
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/NullPersonBean.java,"
public NullPersonBean () {
}
",26,26
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/NullPersonBean.java,"
public NullPersonBean (String forename, String surname) {
    super (forename, surname);
}
",28,31
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestMapUpdater.java,"
public TestMapUpdater (String testName) {
    super (testName);
}
",30,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestMapUpdater.java,"
public void testMapUpdater () throws Exception {
    String config = ""<?xml version='1.0'?>"" + ""<betwixt-config primitiveTypes='attribute'>"" + ""    <class name='org.apache.commons.betwixt.io.TestMapUpdater$ParentBean'>"" + ""        <element name='parentBean'>"" + ""            <element name='pairs'>"" + ""                <element property='pairs' updater='addPair'/>"" + ""            </element>"" + ""            <addDefaults add-properties='true' add-adders='false'/>"" + ""        </element>"" + ""    </class>"" + ""</betwixt-config>"";
    String result = ""<?xml version=\""1.0\""?>\n"" + ""  <parentBean id=\""1\"">\n"" + ""    <pairs>\n"" + ""      <entry id=\""2\"">\n"" + ""        <key>key</key>\n"" + ""        <value>value</value>\n"" + ""      </entry>\n"" + ""    </pairs>\n"" + ""  </parentBean>\n"";
    ParentBean pb = new ParentBean ();
    pb.getPairs ().put (""key"", ""value"");
    StringWriter writer = new StringWriter ();
    BeanWriter beanWriter = new BeanWriter (writer);
    beanWriter.enablePrettyPrint ();
    beanWriter.getXMLIntrospector ().register (new InputSource (new StringReader (config)));
    beanWriter.writeXmlDeclaration (""<?xml version=\""1.0\""?>"");
    beanWriter.write (pb);
    xmlAssertIsomorphic (parseString (result), parseString (writer));
    BeanReader beanReader = new BeanReader ();
    beanReader.registerMultiMapping (new InputSource (new StringReader (config)));
    ParentBean pbRead = (ParentBean) beanReader.parse (new StringReader (writer.toString ()));
    StringWriter writer2 = new StringWriter ();
    BeanWriter beanWriter2 = new BeanWriter (writer2);
    beanWriter2.enablePrettyPrint ();
    beanWriter2.getXMLIntrospector ().register (new InputSource (new StringReader (config)));
    beanWriter2.writeXmlDeclaration (""<?xml version=\""1.0\""?>"");
    beanWriter2.write (pbRead);
    xmlAssertIsomorphic (parseString (result), parseString (writer2));
}
",35,83
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestMapUpdater.java,"
public Map getPairs () {
    return pairs;
}
",89,92
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestMapUpdater.java,"
public void setPairs (Map pairs) {
    this.pairs = pairs;
}
",94,97
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestMapUpdater.java,"
public void addPair (String key, String value) {
    pairs.put (key, value);
}
",99,102
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/PetBean.java,"
public PetBean () {
}
",28,28
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/PetBean.java,"
public PetBean (Animal pet, PersonBean owner) {
    super ();
    this.pet = pet;
    this.owner = owner;
}
",31,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/PetBean.java,"
public PersonBean getOwner () {
    return owner;
}
",38,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/PetBean.java,"
public void setOwner (PersonBean owner) {
    this.owner = owner;
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/PetBean.java,"
public Animal getPet () {
    return pet;
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/PetBean.java,"
public void setPet (Animal pet) {
    this.pet = pet;
}
",54,57
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestBeanCreation.java,"
public TestBeanCreation (String name) {
    super (name);
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestBeanCreation.java,"
public static Test suite () {
    return new TestSuite (TestBeanCreation.class);
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestBeanCreation.java,"
public void testCustomCreatorOne () throws Exception {
    HouseBeans houses = new HouseBeans ();
    HouseBean houseOne = new HouseBean ();
    houseOne.setFacing (CompassPoint.NORTH);
    houseOne.setAddress (new AddressBean (""Black Bull, 46 Briggate"", ""Brighouse"", ""England"", ""HD6 1EF""));
    houseOne.setHouseholder (new PersonBean (""Samual"", ""Smith""));
    houseOne.setTenant (false);
    houses.addHouse (houseOne);
    HouseBean houseTwo = new HouseBean ();
    houseTwo.setFacing (CompassPoint.SOUTH);
    houseTwo.setAddress (new AddressBean (""The Commerical Inn, 1 Gooder Lane"", ""Brighouse"", ""England"", ""HD6 1HT""));
    houseTwo.setHouseholder (new PersonBean (""Timothy"", ""Tayler""));
    houseTwo.setTenant (true);
    houses.addHouse (houseTwo);
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    writer.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (false);
    writer.write (""houses"", houses);
    String xml = ""<?xml version='1.0'?><houses>"" + ""<house tenant='false'>"" + ""<address street='Black Bull, 46 Briggate' city='Brighouse' country='England' code='HD6 1EF'/>"" + ""<householder forename='Samual' surname='Smith'/>"" + ""<facing name='North'/>"" + ""</house>"" + ""<house tenant='true'>"" + ""<address street='The Commerical Inn, 1 Gooder Lane' city='Brighouse'"" + "" country='England' code='HD6 1HT'/>"" + ""<householder forename='Timothy' surname='Tayler'/>"" + ""<facing name='South'/>"" + ""</house>"" + ""</houses>"";
    xmlAssertIsomorphic (parseString (xml), parseString (out.toString ()), true);
    BeanCreationList chain = BeanCreationList.createStandardChain ();
    class EnumCreator implements ChainedBeanCreator {
        public Object create (ElementMapping mapping, ReadContext context, BeanCreationChain chain) {
            if (""facing"".equals (mapping.getName ())) {
                String value = mapping.getAttributes ().getValue (""name"");
                if (""North"".equals (value)) {
                    return CompassPoint.NORTH;
                }
                if (""South"".equals (value)) {
                    return CompassPoint.SOUTH;
                }
                if (""East"".equals (value)) {
                    return CompassPoint.EAST;
                }
                if (""West"".equals (value)) {
                    return CompassPoint.WEST;
                }
            }
            return chain.create (mapping, context);
        }
    }
    chain.insertBeanCreator (1, new EnumCreator ());
    BeanReader reader = new BeanReader ();
    reader.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    reader.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (false);
    reader.registerBeanClass (""houses"", HouseBeans.class);
    reader.getReadConfiguration ().setBeanCreationChain (chain);
    StringReader in = new StringReader (xml);
    HouseBeans newHouses = (HouseBeans) reader.parse (in);
    assertNotNull (""Parsing should return a bean"", newHouses);
    ArrayList houseList = newHouses.houses;
    assertEquals (""Should be two houses read"", 2, houseList.size ());
    HouseBean newOne = (HouseBean) houseList.get (0);
    HouseBean newTwo = (HouseBean) houseList.get (1);
    assertEquals (""First house is equal"", houseOne, newOne);
    assertEquals (""Second house is equal"", houseTwo, newTwo);
}
",49,139
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestBeanCreation.java,"
public Object create (ElementMapping mapping, ReadContext context, BeanCreationChain chain) {
    if (""facing"".equals (mapping.getName ())) {
        String value = mapping.getAttributes ().getValue (""name"");
        if (""North"".equals (value)) {
            return CompassPoint.NORTH;
        }
        if (""South"".equals (value)) {
            return CompassPoint.SOUTH;
        }
        if (""East"".equals (value)) {
            return CompassPoint.EAST;
        }
        if (""West"".equals (value)) {
            return CompassPoint.WEST;
        }
    }
    return chain.create (mapping, context);
}
",95,118
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestBeanCreation.java,"
public void testCustomCreatorTwo () throws Exception {
    HouseBeans houses = new HouseBeans ();
    HouseBean houseOne = new HouseBean ();
    houseOne.setFacing (CompassPoint.NORTH);
    houseOne.setAddress (new AddressBean (""Black Bull, 46 Briggate"", ""Brighouse"", ""England"", ""HD6 1EF""));
    houseOne.setHouseholder (new PersonBean (""Samual"", ""Smith""));
    houseOne.setTenant (false);
    houses.addHouse (houseOne);
    HouseBean houseTwo = new HouseBean ();
    houseTwo.setFacing (CompassPoint.SOUTH);
    houseTwo.setAddress (new AddressBean (""The Commerical Inn, 1 Gooder Lane"", ""Brighouse"", ""England"", ""HD6 1HT""));
    houseTwo.setHouseholder (new PersonBean (""Timothy"", ""Tayler""));
    houseTwo.setTenant (true);
    houses.addHouse (houseTwo);
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    writer.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (false);
    writer.write (""houses"", houses);
    String xml = ""<?xml version='1.0'?><houses>"" + ""<house tenant='false'>"" + ""<address street='Black Bull, 46 Briggate' city='Brighouse' country='England' code='HD6 1EF'/>"" + ""<householder forename='Samual' surname='Smith'/>"" + ""<facing name='North'/>"" + ""</house>"" + ""<house tenant='true'>"" + ""<address street='The Commerical Inn, 1 Gooder Lane' city='Brighouse'"" + "" country='England' code='HD6 1HT'/>"" + ""<householder forename='Timothy' surname='Tayler'/>"" + ""<facing name='South'/>"" + ""</house>"" + ""</houses>"";
    xmlAssertIsomorphic (parseString (xml), parseString (out.toString ()), true);
    BeanCreationList chain = BeanCreationList.createStandardChain ();
    class EnumCreator implements ChainedBeanCreator {
        public Object create (ElementMapping mapping, ReadContext context, BeanCreationChain chain) {
            if (CompassPoint.class.equals (mapping.getType ())) {
                String value = mapping.getAttributes ().getValue (""name"");
                if (""North"".equals (value)) {
                    return CompassPoint.NORTH;
                }
                if (""South"".equals (value)) {
                    return CompassPoint.SOUTH;
                }
                if (""East"".equals (value)) {
                    return CompassPoint.EAST;
                }
                if (""West"".equals (value)) {
                    return CompassPoint.WEST;
                }
            }
            return chain.create (mapping, context);
        }
    }
    chain.insertBeanCreator (1, new EnumCreator ());
    BeanReader reader = new BeanReader ();
    reader.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    reader.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (false);
    reader.registerBeanClass (""houses"", HouseBeans.class);
    reader.getReadConfiguration ().setBeanCreationChain (chain);
    StringReader in = new StringReader (xml);
    HouseBeans newHouses = (HouseBeans) reader.parse (in);
    assertNotNull (""Parsing should return a bean"", newHouses);
    ArrayList houseList = newHouses.houses;
    assertEquals (""Should be two houses read"", 2, houseList.size ());
    HouseBean newOne = (HouseBean) houseList.get (0);
    HouseBean newTwo = (HouseBean) houseList.get (1);
    assertEquals (""First house is equal"", houseOne, newOne);
    assertEquals (""Second house is equal"", houseTwo, newTwo);
}
",141,230
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestBeanCreation.java,"
public Object create (ElementMapping mapping, ReadContext context, BeanCreationChain chain) {
    if (CompassPoint.class.equals (mapping.getType ())) {
        String value = mapping.getAttributes ().getValue (""name"");
        if (""North"".equals (value)) {
            return CompassPoint.NORTH;
        }
        if (""South"".equals (value)) {
            return CompassPoint.SOUTH;
        }
        if (""East"".equals (value)) {
            return CompassPoint.EAST;
        }
        if (""West"".equals (value)) {
            return CompassPoint.WEST;
        }
    }
    return chain.create (mapping, context);
}
",187,210
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/HouseBean.java,"
public HouseBean () {
}
",33,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/HouseBean.java,"
public AddressBean getAddress () {
    return address;
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/HouseBean.java,"
public void setAddress (AddressBean address) {
    this.address = address;
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/HouseBean.java,"
public PersonBean getHouseholder () {
    return householder;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/HouseBean.java,"
public void setHouseholder (PersonBean householder) {
    this.householder = householder;
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/HouseBean.java,"
public boolean isTenant () {
    return isTenant;
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/HouseBean.java,"
public void setTenant (boolean isTenant) {
    this.isTenant = isTenant;
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/HouseBean.java,"
public CompassPoint getFacing () {
    return facing;
}
",65,68
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/HouseBean.java,"
public void setFacing (CompassPoint facing) {
    this.facing = facing;
}
",70,73
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/HouseBean.java,"
public String toString () {
    return ""["" + this.getClass ().getName () + "": address="" + address + "" householder="" + householder + "" facing="" + facing + "" tenant="" + isTenant + ""]"";
}
",75,79
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/HouseBean.java,"
public boolean equals (Object obj) {
    if (obj == null) return false;
    return this.hashCode () == obj.hashCode ();
}
",81,85
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/HouseBean.java,"
public int hashCode () {
    return toString ().hashCode ();
}
",87,90
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestReadContext.java,"
public TestReadContext (String name) {
    super (name);
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestReadContext.java,"
public static Test suite () {
    return new TestSuite (TestReadContext.class);
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestReadContext.java,"
public void testElementStackPushPop () throws Exception {
    ReadContext context = new ReadContext (new BindingConfiguration (), new ReadConfiguration ());
    context.pushElement (""alpha"");
    assertEquals (""Push then pop"", ""alpha"", context.popElement ());
    assertEquals (""Push then pop at bottom"", null, context.popElement ());
    context.pushElement (""beta"");
    context.pushElement (""delta"");
    context.pushElement (""gamma"");
    assertEquals (""Triple push (1)"", ""gamma"", context.popElement ());
    assertEquals (""Triple push (2)"", ""delta"", context.popElement ());
    assertEquals (""Triple push (3)"", ""beta"", context.popElement ());
    assertEquals (""Triple push at bottom"", null, context.popElement ());
}
",46,63
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestReadContext.java,"
public void testElementStackMarkedPushPop () throws Exception {
    ReadContext context = new ReadContext (new BindingConfiguration (), new ReadConfiguration ());
    context.pushElement (""beta"");
    context.pushElement (""delta"");
    context.markClassMap (Object.class);
    context.pushElement (""gamma"");
    assertEquals (""One mark (1)"", ""gamma"", context.popElement ());
    assertEquals (""One mark (2)"", ""delta"", context.popElement ());
    assertEquals (""One mark (3)"", ""beta"", context.popElement ());
    assertEquals (""One mark at bottom"", null, context.popElement ());
    context.markClassMap (Object.class);
    context.pushElement (""beta"");
    context.pushElement (""delta"");
    context.markClassMap (Object.class);
    context.pushElement (""gamma"");
    context.markClassMap (Object.class);
    assertEquals (""Three marks (1)"", ""gamma"", context.popElement ());
    assertEquals (""Three marks (2)"", ""delta"", context.popElement ());
    assertEquals (""Three marks (3)"", ""beta"", context.popElement ());
    assertEquals (""Three marks at bottom"", null, context.popElement ());
}
",65,90
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestReadContext.java,"
public void testLastMappedClassNoClass () throws Exception {
    ReadContext context = new ReadContext (new BindingConfiguration (), new ReadConfiguration ());
    context.pushElement (""beta"");
    context.pushElement (""delta"");
    context.pushElement (""gamma"");
    assertEquals (""No class"", null, context.getLastMappedClass ());
}
",92,101
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestReadContext.java,"
public void testGetCurrentElement () throws Exception {
    ReadContext context = new ReadContext (new BindingConfiguration (), new ReadConfiguration ());
    context.pushElement (""element"");
    context.markClassMap (String.class);
    assertEquals (""Current element: "", ""element"", context.getCurrentElement ());
}
",103,109
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestReadContext.java,"
public void testLastMappedClassBottomClass () throws Exception {
    ReadContext context = new ReadContext (new BindingConfiguration (), new ReadConfiguration ());
    context.markClassMap (Object.class);
    context.pushElement (""beta"");
    context.pushElement (""delta"");
    context.pushElement (""gamma"");
    assertEquals (""One classes"", Object.class, context.getLastMappedClass ());
}
",111,122
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestReadContext.java,"
public void testLastMappedClassTwoClasses () throws Exception {
    ReadContext context = new ReadContext (new BindingConfiguration (), new ReadConfiguration ());
    context.markClassMap (Object.class);
    context.pushElement (""beta"");
    context.pushElement (""delta"");
    context.markClassMap (String.class);
    context.pushElement (""gamma"");
    assertEquals (""Two classes"", String.class, context.getLastMappedClass ());
}
",124,136
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestReadContext.java,"
public void testLastMappedClassTopClass () throws Exception {
    ReadContext context = new ReadContext (new BindingConfiguration (), new ReadConfiguration ());
    context.markClassMap (Object.class);
    context.pushElement (""beta"");
    context.pushElement (""delta"");
    context.markClassMap (String.class);
    context.pushElement (""gamma"");
    context.markClassMap (Integer.class);
    assertEquals (""Top class"", Integer.class, context.getLastMappedClass ());
}
",138,150
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestReadContext.java,"
public void testNullElementNameMatchesAll () throws Exception {
    ReadContext context = new ReadContext (new BindingConfiguration (), new ReadConfiguration ());
    context.pushElement (""LibraryBeanWithArraySetter"");
    context.markClassMap (LibraryBeanWithArraySetter.class);
    context.pushElement (""books"");
    context.pushElement (""whatever"");
    assertNotNull (""Null name should match any new element"", context.getCurrentDescriptor ());
}
",153,165
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AddressBean.java,"
public AddressBean () {
}
",35,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AddressBean.java,"
public AddressBean (String street, String city, String country, String code) {
    setStreet (street);
    setCity (city);
    setCode (code);
    setCountry (country);
}
",39,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AddressBean.java,"
public String getStreet () {
    return street;
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AddressBean.java,"
public String getCity () {
    return city;
}
",52,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AddressBean.java,"
public String getCode () {
    return code;
}
",57,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AddressBean.java,"
public String getCountry () {
    return country;
}
",62,65
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AddressBean.java,"
public void setStreet (String street) {
    this.street = street;
}
",67,70
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AddressBean.java,"
public void setCity (String city) {
    this.city = city;
}
",72,75
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AddressBean.java,"
public void setCode (String code) {
    this.code = code;
}
",77,80
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AddressBean.java,"
public void setCountry (String country) {
    this.country = country;
}
",82,85
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AddressBean.java,"
public String toString () {
    return ""["" + this.getClass ().getName () + "": street="" + street + "", city="" + city + "", country="" + country + ""]"";
}
",87,91
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AddressBean.java,"
public boolean equals (Object obj) {
    if (obj == null) return false;
    return this.hashCode () == obj.hashCode ();
}
",93,97
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AddressBean.java,"
public int hashCode () {
    return toString ().hashCode ();
}
",99,102
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestMaps.java,"
public TestMaps (String testName) {
    super (testName);
}
",38,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestMaps.java,"
public void testWriteConcreateMapImplementation () throws Exception {
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (false);
    writer.getBindingConfiguration ().setMapIDs (false);
    BeanWithConcreteMap bean = new BeanWithConcreteMap ();
    bean.addSomeThingy (""Aethelred"", ""The Unready"");
    bean.addSomeThingy (""Swein"", ""Forkbeard"");
    bean.addSomeThingy (""Thorkell"", ""The Tall"");
    writer.write (bean);
    String xml = out.getBuffer ().toString ();
    StringBuffer buffer = new StringBuffer (""<?xml version='1.0'?><BeanWithConcreteMap>"");
    for (Iterator it = bean.getSomeThingies ().keySet ().iterator (); it.hasNext ();) {
        String key = (String) it.next ();
        if (""Aethelred"".equals (key)) {
            buffer.append (""<entry>"" + ""<key>Aethelred</key>"" + ""<value>The Unready</value>"" + ""</entry>"");
        }
        else if (""Swein"".equals (key)) {
            buffer.append (""<entry>"" + ""<key>Swein</key>"" + ""<value>Forkbeard</value>"" + ""</entry>"");
        }
        else if (""Thorkell"".equals (key)) {
            buffer.append (""<entry>"" + ""<key>Thorkell</key>"" + ""<value>The Tall</value>"" + ""</entry>"");
        }
    }
    buffer.append (""</BeanWithConcreteMap>"");
    String expected = buffer.toString ();
    xmlAssertIsomorphicContent (parseString (expected), parseString (xml), true);
}
",43,94
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestMaps.java,"
public void testReadConcreateMapImplementation () throws Exception {
    StringReader in = new StringReader (""<?xml version='1.0'?><BeanWithConcreteMap>"" + ""<entry>"" + ""<key>Swein</key>"" + ""<value>Forkbeard</value>"" + ""</entry>"" + ""<entry>"" + ""<key>Thorkell</key>"" + ""<value>The Tall</value>"" + ""</entry>"" + ""<entry>"" + ""<key>Aethelred</key>"" + ""<value>The Unready</value>"" + ""</entry>"" + ""</BeanWithConcreteMap>"");
    BeanReader reader = new BeanReader ();
    reader.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (false);
    reader.getBindingConfiguration ().setMapIDs (false);
    reader.registerBeanClass (BeanWithConcreteMap.class);
    BeanWithConcreteMap bean = (BeanWithConcreteMap) reader.parse (in);
    assertNotNull (""Parse failed"", bean);
    Map map = bean.getSomeThingies ();
    Set keyset = map.keySet ();
    assertEquals (""Three entries"", 3, keyset.size ());
    assertEquals (""Aethelred The Unready"", ""The Unready"", map.get (""Aethelred""));
    assertEquals (""Swein Forkbeardy"", ""Forkbeard"", map.get (""Swein""));
    assertEquals (""Thorkell The Tall"", ""The Tall"", map.get (""Thorkell""));
}
",97,131
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestMaps.java,"
public void testMapWithArray () throws Exception {
    AddressBook addressBook = new AddressBook ();
    AddressBean [] johnsAddresses = new AddressBean [2];
    johnsAddresses [0] = new AddressBean (""12 here"", ""Chicago"", ""USA"", ""1234"");
    johnsAddresses [1] = new AddressBean (""333 there"", ""Los Angeles"", ""USA"", ""99999"");
    String name = ""John"";
    addressBook.addAddressBookItem (name, johnsAddresses);
    StringWriter outputWriter = new StringWriter ();
    outputWriter.write (""<?xml version='1.0' ?>\n"");
    BeanWriter beanWriter = new BeanWriter (outputWriter);
    beanWriter.setEndOfLine (""\n"");
    beanWriter.enablePrettyPrint ();
    beanWriter.write (addressBook);
    String xml = ""<?xml version='1.0' ?>\n"" + ""  <AddressBook id=\""1\"">\n"" + ""    <addressBookItems>\n"" + ""      <entry id=\""2\"">\n"" + ""        <key>John</key>\n"" + ""        <value id=\""3\"">\n"" + ""          <AddressBean id=\""4\"">\n"" + ""            <city>Chicago</city>\n"" + ""            <code>1234</code>\n"" + ""            <country>USA</country>\n"" + ""            <street>12 here</street>\n"" + ""          </AddressBean>\n"" + ""          <AddressBean id=\""5\"">\n"" + ""            <city>Los Angeles</city>\n"" + ""            <code>99999</code>\n"" + ""            <country>USA</country>\n"" + ""            <street>333 there</street>\n"" + ""          </AddressBean>\n"" + ""        </value>\n"" + ""      </entry>\n"" + ""    </addressBookItems>\n"" + ""  </AddressBook>\n"";
    xmlAssertIsomorphicContent (parseString (xml), parseString (outputWriter.toString ()), true);
    BeanReader reader = new BeanReader ();
    reader.registerBeanClass (AddressBook.class);
    StringReader xmlReader = new StringReader (outputWriter.toString ());
    AddressBook result = (AddressBook) reader.parse (xmlReader);
    assertNotNull (""Expected to get an AddressBook!"", result);
    assertNotNull (""Expected AddressBook to have some address entryitems!"", result.getAddressBookItems ());
    AddressBean [] resultAddresses = (AddressBean []) result.getAddressBookItems ().get (name);
    assertNotNull (""Expected to have some addresses for "" + name, resultAddresses);
    assertEquals (""Got wrong city in first address for "" + name, johnsAddresses [0].getCity (), resultAddresses [0].getCity ());
    assertEquals (""Got wrong city in second address for "" + name, johnsAddresses [1].getCity (), resultAddresses [1].getCity ());
}
",133,196
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/CatBean.java,"
public CatBean () {
}
",28,28
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/CatBean.java,"
public CatBean (String name, String colour) {
    super ();
    this.name = name;
    this.colour = colour;
}
",30,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/CatBean.java,"
public String getCall () {
    return ""Meow"";
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/CatBean.java,"
public String getLatinName () {
    return ""Felis catus"";
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/CatBean.java,"
public String getColour () {
    return colour;
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/CatBean.java,"
public void setColour (String colour) {
    this.colour = colour;
}
",52,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/CatBean.java,"
public String getName () {
    return name;
}
",58,61
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/CatBean.java,"
public void setName (String name) {
    this.name = name;
}
",63,66
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/HouseBeans.java,"
public HouseBeans () {
}
",33,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/HouseBeans.java,"
public Iterator getHouses () {
    return houses.iterator ();
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/HouseBeans.java,"
public void addHouse (HouseBean house) {
    if (house != null) {
        houses.add (house);
    }
}
",40,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/Element.java,"
public Element () {
}
",32,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/Element.java,"
public Element (String value) {
    this.value = value;
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/Element.java,"
public String getValue () {
    return value;
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/Element.java,"
public void setValue (String value) {
    this.value = value;
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/DogBean.java,"
public DogBean () {
}
",29,29
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/DogBean.java,"
public DogBean (String name) {
    this (false, ""mongrol"", name);
}
",31,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/DogBean.java,"
public DogBean (boolean pedigree, String breed, String name) {
    this.pedigree = pedigree;
    this.breed = breed;
    this.name = name;
}
",36,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/DogBean.java,"
public String getCall () {
    return ""Woof"";
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/DogBean.java,"
public String getBreed () {
    return breed;
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/DogBean.java,"
public void setBreed (String breed) {
    this.breed = breed;
}
",53,56
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/DogBean.java,"
public String getName () {
    return name;
}
",58,61
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/DogBean.java,"
public void setName (String name) {
    this.name = name;
}
",63,66
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/DogBean.java,"
public boolean isPedigree () {
    return pedigree;
}
",68,71
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/DogBean.java,"
public void setPedigree (boolean pedigree) {
    this.pedigree = pedigree;
}
",73,76
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/DogBean.java,"
public String getLatinName () {
    return ""Canis familiaris"";
}
",78,81
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AlertBean.java,"
public String getMessage () {
    return message;
}
",32,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AlertBean.java,"
public void setMessage (String message) {
    this.message = message;
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AlertBean.java,"
public String getSummary () {
    return summary;
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AlertBean.java,"
public void setSummary (String summary) {
    this.summary = summary;
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AlertBean.java,"
public Date getTimestamp () {
    return timestamp;
}
",52,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AlertBean.java,"
public void setTimestamp (Date timestamp) {
    this.timestamp = timestamp;
}
",57,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/SimpleStringCollective.java,"
public ArrayList getStrings () {
    return strings;
}
",31,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/SimpleStringCollective.java,"
public void addString (String string) {
    strings.add (string);
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AddressBook.java,"
public HashMap getAddressBookItems () {
    return addressesMap;
}
",29,32
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AddressBook.java,"
public void setAddressBookItems (HashMap map) {
    this.addressesMap = map;
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/AddressBook.java,"
public void addAddressBookItem (String name, AddressBean [] addresses) {
    addressesMap.put (name, addresses);
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/Animals.java,"
public Iterator getAnimals () {
    return animals.iterator ();
}
",32,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/Animals.java,"
public void addAnimal (Animal animal) {
    animals.add (animal);
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/Animals.java,"
public int size () {
    return animals.size ();
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestPolymorphic.java,"
public TestPolymorphic (String arg0) {
    super (arg0);
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestPolymorphic.java,"
public void testWrite () throws Exception {
    Animals animals = new Animals ();
    animals.addAnimal (new FerretBean (""albino"", ""Lector""));
    animals.addAnimal (new CatBean (""Sam"", ""black""));
    animals.addAnimal (new DogBean (false, ""mongrol"", ""Bobby""));
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.getXMLIntrospector ().register (new InputSource (new StringReader (MAPPING)));
    writer.write (animals);
    xmlAssertIsomorphic (parseString (XML), parseString (out), true);
}
",86,100
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestPolymorphic.java,"
public void testRead () throws Exception {
    StringReader in = new StringReader (XML);
    BeanReader reader = new BeanReader ();
    reader.getBindingConfiguration ().setMapIDs (false);
    reader.getXMLIntrospector ().register (new InputSource (new StringReader (MAPPING)));
    reader.registerBeanClass (Animals.class);
    Animals animals = (Animals) reader.parse (in);
    assertNotNull (animals);
    assertEquals (3, animals.size ());
    Iterator it = animals.getAnimals ();
    Object firstAnimal = it.next ();
    assertTrue (""First animal is a ferret"", firstAnimal instanceof FerretBean);
    FerretBean ferret = (FerretBean) firstAnimal;
    assertEquals (""Ferret name"", ""Lector"", ferret.getName ());
    assertEquals (""Ferret colour"", ""albino"", ferret.getColour ());
    Object secondAnimal = it.next ();
    assertTrue (secondAnimal instanceof CatBean);
    CatBean cat = (CatBean) secondAnimal;
    assertEquals (""Cat name"", ""Sam"", cat.getName ());
    assertEquals (""Cat colour"", ""black"", cat.getColour ());
    Object thirdAnimal = it.next ();
    assertTrue (thirdAnimal instanceof DogBean);
    DogBean dog = (DogBean) thirdAnimal;
    assertEquals (""Dog pedigree"", false, dog.isPedigree ());
    assertEquals (""Dog name"", ""Bobby"", dog.getName ());
}
",103,133
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/PersonBean.java,"
public PersonBean () {
}
",30,30
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/PersonBean.java,"
public PersonBean (String forename, String surname) {
    setForename (forename);
    setSurname (surname);
}
",32,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/PersonBean.java,"
public String getForename () {
    return forename;
}
",38,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/PersonBean.java,"
public void setForename (String forename) {
    this.forename = forename;
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/PersonBean.java,"
public String getSurname () {
    return surname;
}
",49,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/PersonBean.java,"
public void setSurname (String surname) {
    this.surname = surname;
}
",54,57
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/PersonBean.java,"
public String toString () {
    return ""["" + this.getClass ().getName () + "": forename="" + forename + "" surname="" + surname + ""]"";
}
",59,62
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/PersonBean.java,"
public boolean equals (Object obj) {
    if (obj == null) return false;
    return this.hashCode () == obj.hashCode ();
}
",64,68
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/PersonBean.java,"
public int hashCode () {
    return toString ().hashCode ();
}
",70,73
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/Elements.java,"
public Elements () {
}
",36,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/Elements.java,"
public void addElement (Element element) {
    elements.put (element.getValue (), element);
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/Elements.java,"
public Iterator getElements () {
    return elements.values ().iterator ();
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/Elements.java,"
public Element getElement (String name) {
    return (Element) elements.get (name);
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/BeanWithConcreteMap.java,"
public HashMap getSomeThingies () {
    return someMap;
}
",32,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/BeanWithConcreteMap.java,"
public void addSomeThingy (String whatever, String thing) {
    someMap.put (whatever, thing);
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestReadData.java,"
public TestReadData (String testName) {
    super (testName);
}
",32,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestReadData.java,"
public void testReadInvalidDate () throws Exception {
    String xmlWithInvalidDate = ""<?xml version='1.0'?>"" + ""<AlertBean>"" + ""	<message>Whatever</message>"" + ""   <summary>Sometime</summary>"" + ""   <timestamp>2004-13-32 00:00:00.0</timestamp>"" + ""</AlertBean>"";
    StringReader invalidIn = new StringReader (xmlWithInvalidDate);
    String xmlWithValidDate = ""<?xml version='1.0'?>"" + ""<AlertBean>"" + ""	<message>Whatever</message>"" + ""   <summary>Sometime</summary>"" + ""   <timestamp>1999-12-31 00:00:00.0</timestamp>"" + ""</AlertBean>"";
    StringReader validIn = new StringReader (xmlWithValidDate);
    BeanReader reader = new BeanReader ();
    reader.registerBeanClass (AlertBean.class);
    try {
        AlertBean alterBean = (AlertBean) reader.parse (invalidIn);
        fail (""Invalid date so expected exception"");
    } catch (Exception e) {
    }
    AlertBean alterBean = (AlertBean) reader.parse (validIn);
}
",37,71
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestReadData.java,"
public void testWritePrivateStaticClasses () throws Exception {
    Nested nested = new Nested ();
    nested.setName (""Timothy Taylor"");
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (false);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (""ale"", nested);
    String expected = ""<?xml version='1.0'?>"" + ""<ale><name>Timothy Taylor</name></ale>"";
    xmlAssertIsomorphic (parseString (out), parseString (expected), true);
}
",73,88
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestReadData.java,"
public void _testReadPrivateStaticClasses () throws Exception {
    StringReader in = new StringReader (""<?xml version='1.0'?>"" + ""<ale><name>Timothy Taylor</name></ale>"");
    BeanReader reader = new BeanReader ();
    reader.registerBeanClass (""ale"", Nested.class);
    reader.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    Object out = reader.parse (in);
    assertNotNull (""Expected bean to be output"", out);
    assertEquals (""Expected bean to be of type Nested"", ""org.apache.commons.betwixt.io.read.TestReadData$Nested"", out.getClass ().getName ());
    Nested bean = (Nested) out;
    assertEquals (""Expected name to be set"", ""Timothy Taylor"", bean.getName ());
}
",91,104
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestReadData.java,"
public String getName () {
    return name;
}
",110,113
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestReadData.java,"
public void setName (String name) {
    this.name = name;
}
",115,118
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/FerretBean.java,"
public FerretBean () {
}
",28,28
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/FerretBean.java,"
public FerretBean (String colour, String name) {
    this.colour = colour;
    setName (name);
}
",30,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/FerretBean.java,"
public String getName () {
    return name;
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/FerretBean.java,"
public String getLatinName () {
    return ""Mustela putoris furo"";
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/FerretBean.java,"
public String getCall () {
    return ""Dook"";
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/FerretBean.java,"
public String getColour () {
    return colour;
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/FerretBean.java,"
public void setColour (String colour) {
    this.colour = colour;
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/FerretBean.java,"
public void setName (String name) {
    this.name = name;
}
",61,64
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestBindTimeTypeMapping.java,"
public TestBindTimeTypeMapping (String testName) {
    super (testName);
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestBindTimeTypeMapping.java,"
public void testDefaultMappingDerivationStrategy () throws Exception {
    XMLIntrospector xmlIntrospector = new XMLIntrospector ();
    XMLBeanInfo xmlBeanInfo = xmlIntrospector.introspect (Animals.class);
    ElementDescriptor animalsDescriptor = xmlBeanInfo.getElementDescriptor ();
    assertEquals (""Use bind time type"", true, animalsDescriptor.isUseBindTimeTypeForMapping ());
    ElementDescriptor animalDescriptor = animalsDescriptor.getElementDescriptors () [0];
    assertEquals (""Use bind time type"", true, animalDescriptor.isUseBindTimeTypeForMapping ());
}
",48,56
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestBindTimeTypeMapping.java,"
public void testIntrospectionTimeMappingDerivationStrategy () throws Exception {
    XMLIntrospector xmlIntrospector = new XMLIntrospector ();
    xmlIntrospector.getConfiguration ().setMappingDerivationStrategy (MappingDerivationStrategy.USE_INTROSPECTION_TIME_TYPE);
    XMLBeanInfo xmlBeanInfo = xmlIntrospector.introspect (Animals.class);
    ElementDescriptor animalsDescriptor = xmlBeanInfo.getElementDescriptor ();
    assertEquals (""Use introspection time type"", false, animalsDescriptor.isUseBindTimeTypeForMapping ());
    ElementDescriptor animalDescriptor = animalsDescriptor.getElementDescriptors () [0];
    assertEquals (""Use introspection time type"", false, animalDescriptor.isUseBindTimeTypeForMapping ());
}
",58,67
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestBindTimeTypeMapping.java,"
public void testBindTypeMappingDerivationStrategy () throws Exception {
    XMLIntrospector xmlIntrospector = new XMLIntrospector ();
    xmlIntrospector.getConfiguration ().setMappingDerivationStrategy (MappingDerivationStrategy.USE_BIND_TIME_TYPE);
    XMLBeanInfo xmlBeanInfo = xmlIntrospector.introspect (Animals.class);
    ElementDescriptor animalsDescriptor = xmlBeanInfo.getElementDescriptor ();
    assertEquals (""Use bind time type"", true, animalsDescriptor.isUseBindTimeTypeForMapping ());
    ElementDescriptor animalDescriptor = animalsDescriptor.getElementDescriptors () [0];
    assertEquals (""Use bind time type"", true, animalDescriptor.isUseBindTimeTypeForMapping ());
}
",69,78
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestBindTimeTypeMapping.java,"
public void testBindTypeMappingDerivationDotBetwixt () throws Exception {
    String mappingDocument = ""<?xml version='1.0'?><info>"" + ""<element name='pet-record'>"" + ""	<element name='pet' property='pet' mappingDerivation='bind'/>"" + ""</element>"" + ""</info>"";
    XMLIntrospector xmlIntrospector = new XMLIntrospector ();
    xmlIntrospector.getConfiguration ().setMappingDerivationStrategy (MappingDerivationStrategy.USE_INTROSPECTION_TIME_TYPE);
    XMLBeanInfo xmlBeanInfo = xmlIntrospector.introspect (PetBean.class, new InputSource (new StringReader (mappingDocument)));
    ElementDescriptor petDescriptor = xmlBeanInfo.getElementDescriptor ();
    assertEquals (""Use type from strategy"", true, petDescriptor.isUseBindTimeTypeForMapping ());
    ElementDescriptor animalDescriptor = petDescriptor.getElementDescriptors () [0];
    assertEquals (""Use type from document"", true, animalDescriptor.isUseBindTimeTypeForMapping ());
}
",80,94
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestBindTimeTypeMapping.java,"
public void testIntrospectionTypeMappingDerivationDotBetwixt () throws Exception {
    String mappingDocument = ""<?xml version='1.0'?><info>"" + ""<element name='pet-record'>"" + ""	<element name='pet' property='pet' mappingDerivation='introspection'/>"" + ""</element>"" + ""</info>"";
    XMLIntrospector xmlIntrospector = new XMLIntrospector ();
    xmlIntrospector.getConfiguration ().setMappingDerivationStrategy (MappingDerivationStrategy.USE_BIND_TIME_TYPE);
    XMLBeanInfo xmlBeanInfo = xmlIntrospector.introspect (PetBean.class, new InputSource (new StringReader (mappingDocument)));
    ElementDescriptor petDescriptor = xmlBeanInfo.getElementDescriptor ();
    assertEquals (""Use type from strategy"", true, petDescriptor.isUseBindTimeTypeForMapping ());
    ElementDescriptor animalDescriptor = petDescriptor.getElementDescriptors () [0];
    assertEquals (""Use type from document"", false, animalDescriptor.isUseBindTimeTypeForMapping ());
}
",96,110
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestBindTimeTypeMapping.java,"
public void testMappingDerivationDotBetwixtAddDefaults () throws Exception {
    String mappingDocument = ""<?xml version='1.0'?><info>"" + ""<element name='pet-record'>"" + ""	<element name='pet' property='pet' mappingDerivation='introspection'/>"" + ""   <addDefaults/>"" + ""</element>"" + ""</info>"";
    XMLIntrospector xmlIntrospector = new XMLIntrospector ();
    xmlIntrospector.getConfiguration ().setMappingDerivationStrategy (MappingDerivationStrategy.USE_BIND_TIME_TYPE);
    XMLBeanInfo xmlBeanInfo = xmlIntrospector.introspect (PetBean.class, new InputSource (new StringReader (mappingDocument)));
    ElementDescriptor petDescriptor = xmlBeanInfo.getElementDescriptor ();
    assertEquals (""Use type from strategy"", true, petDescriptor.isUseBindTimeTypeForMapping ());
    ElementDescriptor animalDescriptor = petDescriptor.getElementDescriptors () [0];
    assertEquals (""Use type from document"", false, animalDescriptor.isUseBindTimeTypeForMapping ());
    ElementDescriptor personDescriptor = petDescriptor.getElementDescriptors () [1];
    assertEquals (""Use type from document"", true, personDescriptor.isUseBindTimeTypeForMapping ());
}
",112,129
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestBindTimeTypeMapping.java,"
public void testBindTimeTypeWrite () throws Exception {
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    Animals animals = new Animals ();
    animals.addAnimal (new FerretBean (""albino"", ""Lector""));
    animals.addAnimal (new CatBean (""Sam"", ""black""));
    animals.addAnimal (new DogBean (""Bobby""));
    BeanWriter writer = new BeanWriter (out);
    writer.getXMLIntrospector ().getConfiguration ().setMappingDerivationStrategy (MappingDerivationStrategy.USE_BIND_TIME_TYPE);
    writer.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (false);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (animals);
    String expected = ""<?xml version='1.0'?>"" + ""<Animals>"" + ""	<animal>"" + ""		<call>Dook</call><colour>albino</colour>"" + ""		<latinName>Mustela putoris furo</latinName><name>Lector</name>"" + ""	</animal>"" + ""	<animal>"" + ""		<call>Meow</call><colour>black</colour>"" + ""		<latinName>Felis catus</latinName><name>Sam</name>"" + ""	</animal>"" + ""	<animal>"" + ""		<breed>mongrol</breed><call>Woof</call><latinName>Canis familiaris</latinName>"" + ""		<name>Bobby</name><pedigree>false</pedigree>"" + ""	</animal>"" + ""</Animals>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (out), true);
}
",131,166
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestBindTimeTypeMapping.java,"
public void testBindTimeTypeRead () throws Exception {
    String xml = ""<?xml version='1.0'?>"" + ""<Animals>"" + ""	<animal className='org.apache.commons.betwixt.io.read.FerretBean'>"" + ""		<call>Dook</call><colour>albino</colour>"" + ""		<latinName>Mustela putoris furo</latinName><name>Lector</name>"" + ""	</animal>"" + ""	<animal className='org.apache.commons.betwixt.io.read.CatBean'>"" + ""		<call>Meow</call><colour>black</colour>"" + ""		<latinName>Felis catus</latinName><name>Sam</name>"" + ""	</animal>"" + ""	<animal className='org.apache.commons.betwixt.io.read.DogBean'>"" + ""		<breed>mongrol</breed><call>Woof</call><latinName>Canis familiaris</latinName>"" + ""		<name>Bobby</name><pedigree>false</pedigree>"" + ""	</animal>"" + ""</Animals>"";
    BeanReader reader = new BeanReader ();
    reader.getXMLIntrospector ().getConfiguration ().setMappingDerivationStrategy (MappingDerivationStrategy.USE_BIND_TIME_TYPE);
    reader.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (false);
    reader.getBindingConfiguration ().setMapIDs (false);
    reader.registerBeanClass (Animals.class);
    Animals animals = (Animals) reader.parse (new StringReader (xml));
    assertEquals (""Expexted three animals"", 3, animals.size ());
    Iterator it = animals.getAnimals ();
    Animal animalOne = (Animal) it.next ();
    assertTrue (""Expected ferret"", animalOne instanceof FerretBean);
    FerretBean ferretBean = (FerretBean) animalOne;
    assertEquals (""Latin name property mapped"", ""Mustela putoris furo"", ferretBean.getLatinName ());
    assertEquals (""Call property mapped"", ""Dook"", ferretBean.getCall ());
    assertEquals (""Colour property mapped"", ""albino"", ferretBean.getColour ());
    assertEquals (""Name property mapped"", ""Lector"", ferretBean.getName ());
    Animal animalTwo = (Animal) it.next ();
    assertTrue (""Expected cat"", animalTwo instanceof CatBean);
    CatBean catBean = (CatBean) animalTwo;
    assertEquals (""Latin name property mapped"", ""Felis catus"", catBean.getLatinName ());
    assertEquals (""Call property mapped"", ""Meow"", catBean.getCall ());
    assertEquals (""Colour property mapped"", ""black"", catBean.getColour ());
    assertEquals (""Name property mapped"", ""Sam"", catBean.getName ());
    Animal animalThree = (Animal) it.next ();
    assertTrue (""Expected dog"", animalThree instanceof DogBean);
    DogBean dogBean = (DogBean) animalThree;
    assertEquals (""Latin name property mapped"", ""Canis familiaris"", dogBean.getLatinName ());
    assertEquals (""Call property mapped"", ""Woof"", dogBean.getCall ());
    assertEquals (""Breed property mapped"", ""mongrol"", dogBean.getBreed ());
    assertEquals (""Name property mapped"", ""Bobby"", dogBean.getName ());
}
",168,218
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestBindTimeTypeMapping.java,"
public void testIntrospectionTimeTypeWrite () throws Exception {
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    Animals animals = new Animals ();
    animals.addAnimal (new FerretBean (""albino"", ""Lector""));
    animals.addAnimal (new CatBean (""Sam"", ""black""));
    animals.addAnimal (new DogBean (""Bobby""));
    BeanWriter writer = new BeanWriter (out);
    writer.getXMLIntrospector ().getConfiguration ().setMappingDerivationStrategy (MappingDerivationStrategy.USE_INTROSPECTION_TIME_TYPE);
    writer.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (false);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (animals);
    String expected = ""<?xml version='1.0'?><Animals>"" + ""	<animal><call>Dook</call><latinName>Mustela putoris furo</latinName></animal>"" + ""	<animal><call>Meow</call><latinName>Felis catus</latinName></animal>"" + ""	<animal><call>Woof</call><latinName>Canis familiaris</latinName></animal>"" + ""</Animals>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (out), true);
}
",220,245
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestBindTimeTypeMapping.java,"
public void testIntrospectionTimeTypeRead () throws Exception {
    String xml = ""<?xml version='1.0'?>"" + ""<Animals>"" + ""	<animal className='org.apache.commons.betwixt.io.read.FerretBean'>"" + ""		<call>Dook</call><colour>albino</colour>"" + ""		<latinName>Mustela putoris furo</latinName><name>Lector</name>"" + ""	</animal>"" + ""	<animal className='org.apache.commons.betwixt.io.read.CatBean'>"" + ""		<call>Meow</call><colour>black</colour>"" + ""		<latinName>Felis catus</latinName><name>Sam</name>"" + ""	</animal>"" + ""	<animal className='org.apache.commons.betwixt.io.read.DogBean'>"" + ""		<breed>mongrol</breed><call>Woof</call><latinName>Canis familiaris</latinName>"" + ""		<name>Bobby</name><pedigree>false</pedigree>"" + ""	</animal>"" + ""</Animals>"";
    BeanReader reader = new BeanReader ();
    reader.getXMLIntrospector ().getConfiguration ().setMappingDerivationStrategy (MappingDerivationStrategy.USE_INTROSPECTION_TIME_TYPE);
    reader.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (false);
    reader.getBindingConfiguration ().setMapIDs (false);
    reader.registerBeanClass (Animals.class);
    Animals animals = (Animals) reader.parse (new StringReader (xml));
    assertEquals (""Expexted three animals"", 3, animals.size ());
    Iterator it = animals.getAnimals ();
    Animal animalOne = (Animal) it.next ();
    assertTrue (""Expected ferret"", animalOne instanceof FerretBean);
    FerretBean ferretBean = (FerretBean) animalOne;
    assertEquals (""Latin name property mapped"", ""Mustela putoris furo"", ferretBean.getLatinName ());
    assertEquals (""Call property mapped"", ""Dook"", ferretBean.getCall ());
    assertNull (""Colour property not mapped"", ferretBean.getColour ());
    assertNull (""Name property not mapped"", ferretBean.getName ());
    Animal animalTwo = (Animal) it.next ();
    assertTrue (""Expected cat"", animalTwo instanceof CatBean);
    CatBean catBean = (CatBean) animalTwo;
    assertEquals (""Latin name property mapped"", ""Felis catus"", catBean.getLatinName ());
    assertEquals (""Call property mapped"", ""Meow"", catBean.getCall ());
    assertNull (""Colour property not mapped"", catBean.getColour ());
    assertNull (""Name property not mapped"", catBean.getName ());
    Animal animalThree = (Animal) it.next ();
    assertTrue (""Expected dog"", animalThree instanceof DogBean);
    DogBean dogBean = (DogBean) animalThree;
    assertEquals (""Latin name property mapped"", ""Canis familiaris"", dogBean.getLatinName ());
    assertEquals (""Call property mapped"", ""Woof"", dogBean.getCall ());
    assertNull (""Breed property not mapped"", dogBean.getBreed ());
    assertNull (""Name property not mapped"", dogBean.getName ());
}
",247,297
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/CompassPoint.java,"
private CompassPoint (String name) {
    this.name = name;
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/CompassPoint.java,"
public String getName () {
    return name;
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestMappingActions.java,"
public TestMappingActions (String name) {
    super (name);
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestMappingActions.java,"
public static Test suite () {
    return new TestSuite (TestMappingActions.class);
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestMappingActions.java,"
public void testSimpleRead () throws Exception {
    String xml = ""<?xml version='1.0'?><AddressBean><street>1 Main Street</street><city>New Town</city>"" + ""<code>NT1 1AA</code><country>UK</country></AddressBean>"";
    BeanReader reader = new BeanReader ();
    reader.registerBeanClass (AddressBean.class);
    AddressBean address = (AddressBean) reader.parse (new StringReader (xml));
    assertFalse (""Address is mapped"", address == null);
    assertEquals (""Street"", ""1 Main Street"", address.getStreet ());
    assertEquals (""City"", ""New Town"", address.getCity ());
    assertEquals (""Code"", ""NT1 1AA"", address.getCode ());
    assertEquals (""Country"", ""UK"", address.getCountry ());
}
",52,70
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestMappingActions.java,"
public void testPrimitiveCollective () throws Exception {
    String xml = ""<?xml version='1.0'?><SimpleStringCollective><strings>"" + ""<string>one</string><string>two</string><string>three</string>"" + ""</strings></SimpleStringCollective>"";
    BeanReader reader = new BeanReader ();
    reader.registerBeanClass (SimpleStringCollective.class);
    SimpleStringCollective collective = (SimpleStringCollective) reader.parse (new StringReader (xml));
    assertFalse (""SimpleStringCollective mapped"", collective == null);
    List strings = collective.getStrings ();
    assertEquals (""String count"", 3, strings.size ());
    assertEquals (""First string"", ""one"", strings.get (0));
    assertEquals (""Second string"", ""two"", strings.get (1));
    assertEquals (""Third string"", ""three"", strings.get (2));
}
",72,92
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestMappingActions.java,"
public void testBodyUpdateActionNoMatch () throws Exception {
    AddressBean bean = new AddressBean ();
    bean.setStreet (""DEFAULT"");
    bean.setCode (""DEFAULT"");
    bean.setCountry (""DEFAULT"");
    XMLIntrospector introspector = new XMLIntrospector ();
    ElementDescriptor elementDescriptor = introspector.introspect (AddressBean.class).getElementDescriptor ();
    ReadContext context = new ReadContext (new BindingConfiguration (), new ReadConfiguration ());
    context.setBean (bean);
    context.markClassMap (AddressBean.class);
    context.pushElement (""NoMatch"");
    context.setXMLIntrospector (introspector);
    SimpleTypeBindAction action = new SimpleTypeBindAction ();
    action.body (""Street value"", context);
    assertEquals (""Street is unset"", ""DEFAULT"", bean.getStreet ());
    assertEquals (""Country is unset"", ""DEFAULT"", bean.getCountry ());
    assertEquals (""Code is unset"", ""DEFAULT"", bean.getCode ());
}
",96,116
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestMappingActions.java,"
public void testBodyUpdateActionMatch () throws Exception {
    AddressBean bean = new AddressBean ();
    bean.setStreet (""DEFAULT"");
    bean.setCode (""DEFAULT"");
    bean.setCountry (""DEFAULT"");
    XMLIntrospector introspector = new XMLIntrospector ();
    ReadContext context = new ReadContext (new BindingConfiguration (), new ReadConfiguration ());
    context.pushBean (bean);
    context.markClassMap (AddressBean.class);
    context.pushElement (""street"");
    context.setXMLIntrospector (introspector);
    SimpleTypeBindAction action = new SimpleTypeBindAction ();
    action.body (""Street value"", context);
    assertEquals (""Street is set"", ""Street value"", bean.getStreet ());
    assertEquals (""Country is unset"", ""DEFAULT"", bean.getCountry ());
    assertEquals (""Code is unset"", ""DEFAULT"", bean.getCode ());
}
",119,137
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/read/TestMappingActions.java,"
public void testCollection () throws Exception {
    String xml = ""<?xml version='1.0'?>"" + ""<elements><element><value>alpha</value></element></elements>"";
    StringReader in = new StringReader (xml);
    BeanReader reader = new BeanReader ();
    reader.registerBeanClass (Elements.class);
    Elements result = (Elements) reader.parse (in);
    assertNotNull (""Element alpha exists"", result.getElement (""alpha""));
}
",139,148
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestPrettyPrint.java,"
public TestPrettyPrint (String testName) {
    super (testName);
}
",29,32
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestPrettyPrint.java,"
public void testEndElement () throws Exception {
    StringWriter out = new StringWriter ();
    BeanWriter writer = new BeanWriter (out);
    writer.enablePrettyPrint ();
    writer.setEndTagForEmptyElement (true);
    WriteContext context = new WriteContext () {
        public ElementDescriptor getCurrentDescriptor () {
            return null;
        }
    }
    ;
    writer.startElement (context, """", ""emptytag"", ""emptytag"", new AttributesImpl ());
    writer.endElement (context, """", ""emptytag"", ""emptytag"");
    assertEquals ("""", ""<emptytag></emptytag>"", out.toString ().trim ());
}
",34,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestPrettyPrint.java,"
public ElementDescriptor getCurrentDescriptor () {
    return null;
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSAXBeanWriter.java,"
public TestSAXBeanWriter (String name) {
    super (name);
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSAXBeanWriter.java,"
public void testWrite () throws Exception {
    PersonBean bean = new PersonBean (35, ""John Smith"");
    StringWriter out = new StringWriter ();
    SAXBeanWriter writer = new SAXBeanWriter (new SAXContentHandler (out));
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (bean);
    String beanString = out.getBuffer ().toString ();
    String xml = ""<?xml version='1.0'?><PersonBean><age>35</age>"" + ""<name>John Smith</name></PersonBean>"";
    xmlAssertIsomorphicContent (parseString (xml), parseString (beanString), true);
    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance ();
    DocumentBuilder builder = factory.newDocumentBuilder ();
    factory.setIgnoringElementContentWhitespace (true);
    InputSource in = new InputSource ();
    StringReader reader = new StringReader (beanString);
    in.setCharacterStream (reader);
    Document doc = builder.parse (in);
    assertNotNull (""Document missing"", doc);
    Element root = doc.getDocumentElement ();
    assertNotNull (""Document root missing"", root);
    assertEquals (""Document root name wrong"", ""PersonBean"", root.getNodeName ());
    NodeList children = root.getChildNodes ();
    for (int i = 0; i < children.getLength (); i ++) {
        Node child = children.item (i);
        if (child.getNodeName ().equals (""age"")) {
            assertNotNull (""Person age missing"", child.getFirstChild ());
            assertEquals (""Person age wrong"", ""35"", child.getFirstChild ().getNodeValue ().trim ());
        }
        else if (child.getNodeName ().equals (""name"")) {
            assertNotNull (""Person name missing"", child.getFirstChild ());
            assertEquals (""Person name wrong"", ""John Smith"", child.getFirstChild ().getNodeValue ().trim ());
        }
        else {
            if (child.getNodeName ().equals (""#text"")) {
                String value = child.getNodeValue ();
                if (value != null) {
                    value = value.trim ();
                }
                if (value.length () != 0) {
                    fail (""Text should not contain content in node "" + child.getNodeName ());
                }
            }
            else {
                fail (""Invalid node "" + child.getNodeName ());
            }
        }
    }
}
",56,128
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSAXBeanWriter.java,"
public void testDocumentElements () throws Exception {
    class TestDocHandler extends DefaultHandler {
        boolean startCalled = false;
        boolean endCalled = false;
        public void startDocument () {
            startCalled = true;
        } public void endDocument () {
            endCalled = true;
        }
    }
    PersonBean bean = new PersonBean (35, ""John Smith"");
    TestDocHandler handler = new TestDocHandler ();
    SAXBeanWriter writer = new SAXBeanWriter (handler);
    writer.setCallDocumentEvents (true);
    writer.write (bean);
    assertEquals (""Start not called"", handler.startCalled, true);
    assertEquals (""End not called"", handler.endCalled, true);
    handler = new TestDocHandler ();
    writer = new SAXBeanWriter (handler);
    writer.setCallDocumentEvents (false);
    writer.write (bean);
    assertEquals (""Start called"", handler.startCalled, false);
    assertEquals (""End called"", handler.endCalled, false);
}
",130,168
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSAXBeanWriter.java,"
public void startDocument () {
    startCalled = true;
}
",139,142
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSAXBeanWriter.java,"
public void endDocument () {
    endCalled = true;
}
",144,147
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSAXBeanWriter.java,"
public void testLocalNames () throws Exception {
    class TestNames extends DefaultHandler {
        boolean namesMatch = true;
        public void startElement (String uri, String localName, String qName, Attributes attributes) {
            if (! localName.equals (qName)) {
                namesMatch = false;
            }
            for (int i = 0, size = attributes.getLength (); i < size; i ++) {
                if (! attributes.getLocalName (i).equals (attributes.getQName (i))) {
                    namesMatch = false;
                }
            }
        } public void endElement (String uri, String localName, String qName) {
            if (! localName.equals (qName)) {
                namesMatch = false;
            }
        }
    }
    PersonBean bean = new PersonBean (24, ""vikki"");
    TestNames testHandler = new TestNames ();
    SAXBeanWriter writer = new SAXBeanWriter (testHandler);
    writer.write (bean);
    assertEquals (""Local names match QNames"", testHandler.namesMatch, true);
}
",171,209
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSAXBeanWriter.java,"
public void startElement (String uri, String localName, String qName, Attributes attributes) {
    if (! localName.equals (qName)) {
        namesMatch = false;
    }
    for (int i = 0, size = attributes.getLength (); i < size; i ++) {
        if (! attributes.getLocalName (i).equals (attributes.getQName (i))) {
            namesMatch = false;
        }
    }
}
",178,192
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSAXBeanWriter.java,"
public void endElement (String uri, String localName, String qName) {
    if (! localName.equals (qName)) {
        namesMatch = false;
    }
}
",194,200
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSAXBeanWriter.java,"
public static Test suite () {
    return new TestSuite (TestSAXBeanWriter.class);
}
",212,215
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSAXBeanWriter.java,"
public static void main (String [] args) {
    TestRunner.run (suite ());
}
",217,220
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestWriteIDs.java,"
public TestWriteIDs (String testName) {
    super (testName);
}
",28,31
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestWriteIDs.java,"
public void testTest () throws Exception {
    PersonBean bean = new PersonBean ();
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter beanWriter = new BeanWriter (out);
    beanWriter.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    beanWriter.getBindingConfiguration ().setMapIDs (true);
    beanWriter.enablePrettyPrint ();
    beanWriter.write (""bean"", bean);
    String expected = ""<?xml version='1.0'?><bean id='1'/>"";
    xmlAssertIsomorphic (parseString (expected), parseString (out), true);
}
",32,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestIgnoreEmptyElements.java,"
public TestIgnoreEmptyElements (String testName) {
    super (testName);
}
",30,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestIgnoreEmptyElements.java,"
public void testWritePersonBean () throws Exception {
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setWriteEmptyElements (false);
    SidekickBean sidekick = new SidekickBean (""Robin"");
    SuperheroBean superhero = new SuperheroBean (sidekick);
    writer.write (superhero);
    String expected = ""<?xml version='1.0'?>"" + ""<SuperheroBean id='1'>"" + ""  <sidekick id='2'><nickname>Robin</nickname></sidekick>"" + ""</SuperheroBean>"";
    String xml = out.toString ();
    xmlAssertIsomorphic (parseString (expected), parseString (xml));
}
",35,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestIgnoreEmptyElements.java,"
public void testNestedWriteEmptyElements () throws Exception {
    LoopBean root = new LoopBean (""base"");
    LoopBean middle = new LoopBean (null);
    root.setFriend (middle);
    middle.setFriend (new LoopBean (null));
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (root);
    String xml = ""<?xml version='1.0'?><LoopBean><name>base</name><friend><name/><friend><name/></friend>"" + ""</friend></LoopBean>"";
    xmlAssertIsomorphicContent (parseString (out.getBuffer ().toString ()), parseString (xml), true);
    out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    writer = new BeanWriter (out);
    writer.setWriteEmptyElements (false);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (root);
    xml = ""<?xml version='1.0'?><LoopBean><name>base</name></LoopBean>"";
    xmlAssertIsomorphicContent (parseString (out.getBuffer ().toString ()), parseString (xml), true);
}
",54,84
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/MovieBean.java,"
public MovieBean () {
}
",36,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/MovieBean.java,"
public MovieBean (String name, int year, PersonBean director) {
    setName (name);
    setYear (year);
    setDirector (director);
}
",37,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/MovieBean.java,"
public Iterator getActors () {
    return actors.iterator ();
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/MovieBean.java,"
public PersonBean getDirector () {
    return director;
}
",49,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/MovieBean.java,"
public String getName () {
    return name;
}
",54,57
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/MovieBean.java,"
public int getYear () {
    return year;
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/MovieBean.java,"
public void addActor (PersonBean actor) {
    actors.add (actor);
}
",65,68
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/MovieBean.java,"
public void setDirector (PersonBean bean) {
    director = bean;
}
",70,73
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/MovieBean.java,"
public void setName (String string) {
    name = string;
}
",75,78
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/MovieBean.java,"
public void setYear (int i) {
    year = i;
}
",81,84
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSuppressElement.java,"
public TestSuppressElement (String testName) {
    super (testName);
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSuppressElement.java,"
public void testSuppressNothing () throws Exception {
    PersonBean angLee = new NullPersonBean (""Ang"", ""Lee"");
    MovieBean movie = new MovieBean (""Crouching Tiger, Hidden Dragon"", 2000, angLee);
    movie.addActor (new NullPersonBean (""Yun-Fat"", ""Chow""));
    movie.addActor (new PersonBean (""Michelle"", ""Yeoh""));
    movie.addActor (new PersonBean (""Ziyi"", ""Zhang""));
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (movie);
    String expected = ""<?xml version='1.0'?>"" + ""<movie>"" + ""    <name>Crouching Tiger, Hidden Dragon</name>"" + ""    <year>2000</year>"" + ""    <director>"" + ""        <forenames>Ang</forenames>"" + ""        <surname>Lee</surname>"" + ""     </director>"" + ""    <actors>"" + ""         <actor>"" + ""              <forenames>Yun-Fat</forenames>"" + ""              <surname>Chow</surname>"" + ""         </actor>"" + ""         <actor>"" + ""              <forenames>Michelle</forenames>"" + ""              <surname>Yeoh</surname>"" + ""         </actor>"" + ""         <actor>"" + ""           <forenames>Ziyi</forenames>"" + ""            <surname>Zhang</surname>"" + ""          </actor>"" + ""    </actors>"" + ""</movie>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (out));
}
",40,79
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSuppressElement.java,"
public void testSuppressType () throws Exception {
    PersonBean angLee = new NullPersonBean (""Ang"", ""Lee"");
    MovieBean movie = new MovieBean (""Crouching Tiger, Hidden Dragon"", 2000, angLee);
    movie.addActor (new NullPersonBean (""Yun-Fat"", ""Chow""));
    movie.addActor (new PersonBean (""Michelle"", ""Yeoh""));
    movie.addActor (new PersonBean (""Ziyi"", ""Zhang""));
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.getBindingConfiguration ().setValueSuppressionStrategy (new ValueSuppressionStrategy () {
        public boolean suppressAttribute (AttributeDescriptor attributeDescriptor, String value) {
            return DEFAULT.suppressAttribute (attributeDescriptor, value);
        } public boolean suppressElement (ElementDescriptor element, String namespaceUrl, String localName, String qualifiedName, Object value) {
            boolean result = false;
            if (value instanceof NullPersonBean) {
                result = true;
            }
            return result;
        }
    }
    );
    writer.write (movie);
    String expected = ""<?xml version='1.0'?>"" + ""<movie>"" + ""    <name>Crouching Tiger, Hidden Dragon</name>"" + ""    <year>2000</year>"" + ""    <actors>"" + ""         <actor>"" + ""              <forenames>Michelle</forenames>"" + ""              <surname>Yeoh</surname>"" + ""         </actor>"" + ""         <actor>"" + ""           <forenames>Ziyi</forenames>"" + ""            <surname>Zhang</surname>"" + ""          </actor>"" + ""    </actors>"" + ""</movie>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (out));
}
",82,132
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSuppressElement.java,"
public boolean suppressAttribute (AttributeDescriptor attributeDescriptor, String value) {
    return DEFAULT.suppressAttribute (attributeDescriptor, value);
}
",97,100
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSuppressElement.java,"
public boolean suppressElement (ElementDescriptor element, String namespaceUrl, String localName, String qualifiedName, Object value) {
    boolean result = false;
    if (value instanceof NullPersonBean) {
        result = true;
    }
    return result;
}
",102,111
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSuppressElement.java,"
public void testSuppressElementName () throws Exception {
    PersonBean angLee = new NullPersonBean (""Ang"", ""Lee"");
    MovieBean movie = new MovieBean (""Crouching Tiger, Hidden Dragon"", 2000, angLee);
    movie.addActor (new NullPersonBean (""Yun-Fat"", ""Chow""));
    movie.addActor (new PersonBean (""Michelle"", ""Yeoh""));
    movie.addActor (new PersonBean (""Ziyi"", ""Zhang""));
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.getBindingConfiguration ().setValueSuppressionStrategy (new ValueSuppressionStrategy () {
        public boolean suppressAttribute (AttributeDescriptor attributeDescriptor, String value) {
            return DEFAULT.suppressAttribute (attributeDescriptor, value);
        } public boolean suppressElement (ElementDescriptor element, String namespaceUrl, String localName, String qualifiedName, Object value) {
            boolean result = false;
            if (""year"".equals (element.getQualifiedName ())) {
                result = true;
            }
            return result;
        }
    }
    );
    writer.write (movie);
    String expected = ""<?xml version='1.0'?>"" + ""<movie>"" + ""    <name>Crouching Tiger, Hidden Dragon</name>"" + ""    <director>"" + ""        <forenames>Ang</forenames>"" + ""        <surname>Lee</surname>"" + ""     </director>"" + ""    <actors>"" + ""         <actor>"" + ""              <forenames>Yun-Fat</forenames>"" + ""              <surname>Chow</surname>"" + ""         </actor>"" + ""         <actor>"" + ""              <forenames>Michelle</forenames>"" + ""              <surname>Yeoh</surname>"" + ""         </actor>"" + ""         <actor>"" + ""           <forenames>Ziyi</forenames>"" + ""            <surname>Zhang</surname>"" + ""          </actor>"" + ""    </actors>"" + ""</movie>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (out));
}
",135,192
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSuppressElement.java,"
public boolean suppressAttribute (AttributeDescriptor attributeDescriptor, String value) {
    return DEFAULT.suppressAttribute (attributeDescriptor, value);
}
",150,153
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSuppressElement.java,"
public boolean suppressElement (ElementDescriptor element, String namespaceUrl, String localName, String qualifiedName, Object value) {
    boolean result = false;
    if (""year"".equals (element.getQualifiedName ())) {
        result = true;
    }
    return result;
}
",155,164
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSuppressElement.java,"
public void testSuppressName () throws Exception {
    PersonBean angLee = new NullPersonBean (""Ang"", ""Lee"");
    MovieBean movie = new MovieBean (""Crouching Tiger, Hidden Dragon"", 2000, angLee);
    movie.addActor (new NullPersonBean (""Yun-Fat"", ""Chow""));
    movie.addActor (new PersonBean (""Michelle"", ""Yeoh""));
    movie.addActor (new PersonBean (""Ziyi"", ""Zhang""));
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.getBindingConfiguration ().setValueSuppressionStrategy (new ValueSuppressionStrategy () {
        public boolean suppressAttribute (AttributeDescriptor attributeDescriptor, String value) {
            return DEFAULT.suppressAttribute (attributeDescriptor, value);
        } public boolean suppressElement (ElementDescriptor element, String namespaceUrl, String localName, String qualifiedName, Object value) {
            boolean result = false;
            if (""actor"".equals (qualifiedName)) {
                result = true;
            }
            return result;
        }
    }
    );
    writer.write (movie);
    String expected = ""<?xml version='1.0'?>"" + ""<movie>"" + ""    <name>Crouching Tiger, Hidden Dragon</name>"" + ""    <year>2000</year>"" + ""    <director>"" + ""        <forenames>Ang</forenames>"" + ""        <surname>Lee</surname>"" + ""     </director>"" + ""    <actors>"" + ""    </actors>"" + ""</movie>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (out));
}
",194,240
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSuppressElement.java,"
public boolean suppressAttribute (AttributeDescriptor attributeDescriptor, String value) {
    return DEFAULT.suppressAttribute (attributeDescriptor, value);
}
",209,212
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestSuppressElement.java,"
public boolean suppressElement (ElementDescriptor element, String namespaceUrl, String localName, String qualifiedName, Object value) {
    boolean result = false;
    if (""actor"".equals (qualifiedName)) {
        result = true;
    }
    return result;
}
",214,223
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/SAXContentHandler.java,"
public SAXContentHandler (Writer out) {
    this.out = out;
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/SAXContentHandler.java,"
public void characters (char [] ch, int start, int length) throws SAXException {
    try {
        out.write (""  "" + new String (ch, start, length) + ""\n"");
    } catch (IOException ioe) {
    }
}
",47,57
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/SAXContentHandler.java,"
public void endElement (String namespaceURI, String localName, String qName) throws SAXException {
    try {
        out.write (""</"" + qName + "">\n"");
    } catch (IOException e) {
    }
}
",62,72
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/SAXContentHandler.java,"
public void startDocument () throws SAXException {
    try {
        out.write (""<?xml version=\""1.0\""?>\n"");
    } catch (IOException e) {
    }
}
",77,86
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/SAXContentHandler.java,"
public void startElement (String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {
    try {
        StringBuffer sb = new StringBuffer ();
        sb.append (""<"" + qName);
        for (int i = 0; i < atts.getLength (); i ++) {
            sb.append ("" "" + atts.getQName (i));
            sb.append (""=\"""");
            sb.append (atts.getValue (i));
            sb.append (""\"""");
        }
        sb.append ("">\n"");
        out.write (sb.toString ());
    } catch (IOException e) {
    }
}
",91,115
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/PersonBean.java,"
public PersonBean () {
}
",29,29
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/PersonBean.java,"
public PersonBean (String forenames, String surname) {
    setSurname (surname);
    setForenames (forenames);
}
",31,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/PersonBean.java,"
public String getForenames () {
    return forenames;
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/PersonBean.java,"
public String getSurname () {
    return surname;
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/PersonBean.java,"
public void setForenames (String string) {
    forenames = string;
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/PersonBean.java,"
public void setSurname (String string) {
    surname = string;
}
",52,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestAbstractBeanWriter.java,"
public TestAbstractBeanWriter (String testName) {
    super (testName);
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestAbstractBeanWriter.java,"
public void testContextCurrentElement () throws Exception {
    MovieBean bean = new MovieBean (""Excalibur"", 1981, new PersonBean (""John"", ""Boorman""));
    bean.addActor (new PersonBean (""Nigel"", ""Terry""));
    bean.addActor (new PersonBean (""Helen"", ""Mirren""));
    bean.addActor (new PersonBean (""Nicol"", ""Williamson""));
    TestWritingAPI writer = new TestWritingAPI ();
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    XMLBeanInfo personXmlBeanInfo = writer.getXMLIntrospector ().introspect (PersonBean.class);
    XMLBeanInfo movieXmlBeanInfo = writer.getXMLIntrospector ().introspect (MovieBean.class);
    writer.write (bean);
    List expected = new ArrayList ();
    ElementDescriptor movieElementdescriptor = movieXmlBeanInfo.getElementDescriptor ();
    ElementDescriptor nameDescriptor = movieElementdescriptor.getElementDescriptors () [0];
    ElementDescriptor yearDescriptor = movieElementdescriptor.getElementDescriptors () [1];
    ElementDescriptor directorDescriptor = movieElementdescriptor.getElementDescriptors () [2];
    ElementDescriptor actorsDescriptor = movieElementdescriptor.getElementDescriptors () [3];
    ElementDescriptor personDescriptor = personXmlBeanInfo.getElementDescriptor ();
    expected.add (new TestWritingAPI.Record (TestWritingAPI.START_ELEMENT, movieElementdescriptor));
    expected.add (new TestWritingAPI.Record (TestWritingAPI.START_ELEMENT, nameDescriptor));
    expected.add (new TestWritingAPI.Record (TestWritingAPI.BODY_TEXT, nameDescriptor));
    expected.add (new TestWritingAPI.Record (TestWritingAPI.END_ELEMENT, nameDescriptor));
    expected.add (new TestWritingAPI.Record (TestWritingAPI.START_ELEMENT, yearDescriptor));
    expected.add (new TestWritingAPI.Record (TestWritingAPI.BODY_TEXT, yearDescriptor));
    expected.add (new TestWritingAPI.Record (TestWritingAPI.END_ELEMENT, yearDescriptor));
    expected.add (new TestWritingAPI.Record (TestWritingAPI.START_ELEMENT, personDescriptor));
    expected.add (new TestWritingAPI.Record (TestWritingAPI.END_ELEMENT, personDescriptor));
    expected.add (new TestWritingAPI.Record (TestWritingAPI.START_ELEMENT, actorsDescriptor));
    expected.add (new TestWritingAPI.Record (TestWritingAPI.START_ELEMENT, personDescriptor));
    expected.add (new TestWritingAPI.Record (TestWritingAPI.END_ELEMENT, personDescriptor));
    expected.add (new TestWritingAPI.Record (TestWritingAPI.START_ELEMENT, personDescriptor));
    expected.add (new TestWritingAPI.Record (TestWritingAPI.END_ELEMENT, personDescriptor));
    expected.add (new TestWritingAPI.Record (TestWritingAPI.START_ELEMENT, personDescriptor));
    expected.add (new TestWritingAPI.Record (TestWritingAPI.END_ELEMENT, personDescriptor));
    expected.add (new TestWritingAPI.Record (TestWritingAPI.END_ELEMENT, actorsDescriptor));
    expected.add (new TestWritingAPI.Record (TestWritingAPI.END_ELEMENT, movieElementdescriptor));
    assertEquals (""Collections same size"", expected.size (), writer.recording.size ());
    assertEquals (""Movie element start"", expected.get (0), writer.recording.get (0));
    assertEquals (""Name element start"", expected.get (1), writer.recording.get (1));
    assertEquals (""Name element body"", expected.get (2), writer.recording.get (2));
    assertEquals (""Name element end"", expected.get (3), writer.recording.get (3));
    assertEquals (""Year element start"", expected.get (4), writer.recording.get (4));
    assertEquals (""Year element body"", expected.get (5), writer.recording.get (5));
    assertEquals (""Year element end"", expected.get (6), writer.recording.get (6));
    assertEquals (""Director element start"", expected.get (7), writer.recording.get (7));
    assertEquals (""Director element end"", expected.get (8), writer.recording.get (8));
    assertEquals (""Actors element start"", expected.get (9), writer.recording.get (9));
    assertEquals (""Actor element body"", expected.get (10), writer.recording.get (10));
    assertEquals (""Actor element end"", expected.get (11), writer.recording.get (12));
    assertEquals (""Actor element body"", expected.get (12), writer.recording.get (12));
    assertEquals (""Actor element end"", expected.get (13), writer.recording.get (13));
    assertEquals (""Actor element body"", expected.get (14), writer.recording.get (14));
    assertEquals (""Actor element end"", expected.get (15), writer.recording.get (15));
    assertEquals (""Actors element end"", expected.get (16), writer.recording.get (16));
    assertEquals (""Movie element end"", expected.get (17), writer.recording.get (17));
}
",42,182
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestAbstractBeanWriter.java,"
protected void bodyText (String text) throws IOException, SAXException {
    throw new RuntimeException (""Deprecated method called"");
}
",194,197
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestAbstractBeanWriter.java,"
protected void bodyText (WriteContext context, String text) throws IOException, SAXException {
    recording.add (new Record (BODY_TEXT, context.getCurrentDescriptor ()));
}
",200,204
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestAbstractBeanWriter.java,"
protected void endElement (String uri, String localName, String qName) throws IOException, SAXException {
    throw new RuntimeException (""Deprecated method called"");
}
",206,210
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestAbstractBeanWriter.java,"
protected void endElement (WriteContext context, String uri, String localName, String qName) throws IOException, SAXException {
    recording.add (new Record (END_ELEMENT, context.getCurrentDescriptor ()));
}
",212,221
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestAbstractBeanWriter.java,"
protected void startElement (String uri, String localName, String qName, Attributes attr) throws IOException, SAXException {
    throw new RuntimeException (""Deprecated method called"");
}
",223,231
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestAbstractBeanWriter.java,"
protected void startElement (WriteContext context, String uri, String localName, String qName, Attributes attr) throws IOException, SAXException {
    recording.add (new Record (START_ELEMENT, context.getCurrentDescriptor ()));
}
",233,242
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestAbstractBeanWriter.java,"
Record (int type, ElementDescriptor currentDescriptor) {
    this.currentDescriptor = currentDescriptor;
    this.type = type;
}
",249,253
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestAbstractBeanWriter.java,"
public int hashCode () {
    return type;
}
",255,258
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestAbstractBeanWriter.java,"
public String toString () {
    return ""[Record: type="" + type + ""; "" + currentDescriptor + ""]"";
}
",260,263
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestAbstractBeanWriter.java,"
public boolean equals (Object arg) {
    boolean result = false;
    if (arg instanceof Record) {
        Record record = (Record) arg;
        result = (type == type) && currentDescriptor.equals (record.currentDescriptor);
    }
    return result;
}
",265,275
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestBeanWriter.java,"
public void testSetEndTagForEmptyElementTrue () throws Exception {
    StringWriter out = new StringWriter ();
    BeanWriter writer = new BeanWriter (out);
    writer.setEndTagForEmptyElement (true);
    WriteContext context = new WriteContext () {
        public ElementDescriptor getCurrentDescriptor () {
            return null;
        }
    }
    ;
    writer.startElement (context, null, null, ""element"", new AttributesImpl ());
    writer.endElement (context, null, null, ""element"");
    assertEquals (""<element></element>"" + writer.getEndOfLine (), out.getBuffer ().toString ());
}
",35,61
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestBeanWriter.java,"
public ElementDescriptor getCurrentDescriptor () {
    return null;
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestBeanWriter.java,"
public void testSetEndTagForEmptyElementFalse () throws Exception {
    StringWriter out = new StringWriter ();
    BeanWriter writer = new BeanWriter (out);
    writer.setEndTagForEmptyElement (false);
    WriteContext context = new WriteContext () {
        public ElementDescriptor getCurrentDescriptor () {
            return null;
        }
    }
    ;
    writer.startElement (context, null, null, ""element"", new AttributesImpl ());
    writer.endElement (context, null, null, ""element"");
    assertEquals (""<element/>"" + writer.getEndOfLine (), out.getBuffer ().toString ());
}
",64,90
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestBeanWriter.java,"
public ElementDescriptor getCurrentDescriptor () {
    return null;
}
",72,75
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/SidekickBean.java,"
public SidekickBean () {
}
",26,26
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/SidekickBean.java,"
public SidekickBean (String name) {
    setNickname (name);
}
",28,31
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/SidekickBean.java,"
public String getNickname () {
    return nickname;
}
",33,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/SidekickBean.java,"
public void setNickname (String nickname) {
    this.nickname = nickname;
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestAttributeSuppression.java,"
public TestAttributeSuppression (String testName) {
    super (testName);
}
",31,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestAttributeSuppression.java,"
public void testEmptyStringSuppression () throws Exception {
    PersonBean bean = new PersonBean (""Corwin"", null);
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    writer.write (bean);
    String expected = ""<?xml version='1.0'?><PersonBean forenames='Corwin'/>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (out));
}
",37,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestAttributeSuppression.java,"
public void testCustomStrategy () throws Exception {
    PersonBean bean = new PersonBean (""Zaphod"", ""Beeblebrox"");
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    writer.getBindingConfiguration ().setValueSuppressionStrategy (new ValueSuppressionStrategy () {
        public boolean suppressAttribute (AttributeDescriptor attributeDescriptor, String value) {
            return ""Zaphod"".equals (value);
        }
    }
    );
    writer.write (bean);
    String expected = ""<?xml version='1.0'?><PersonBean surname='Beeblebrox'/>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (out));
}
",55,78
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/io/TestAttributeSuppression.java,"
public boolean suppressAttribute (AttributeDescriptor attributeDescriptor, String value) {
    return ""Zaphod"".equals (value);
}
",68,71
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public static void main (String [] args) {
    TestRunner.run (suite ());
}
",61,64
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public static Test suite () {
    return new TestSuite (TestBeanReader.class);
}
",66,69
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public TestBeanReader (String testName) {
    super (testName);
}
",71,74
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public void testBeanWriter () throws Exception {
    BeanReader reader = new BeanReader ();
    reader.registerBeanClass (getBeanClass ());
    InputStream in = getXMLInput ();
    try {
        Object bean = reader.parse (in);
        testCustomer (bean);
        String out = writeBean (bean);
        String xml = ""<?xml version='1.0'?><CustomerBean><name>James</name><time>20:30:40</time>"" + ""<date>2002-03-17</date><projectMap/><bigDecimal>1234567890.12345</bigDecimal>"" + ""<bigInteger>1234567890</bigInteger><projectNames/><emails>"" + ""<email>jstrachan@apache.org</email><email>james_strachan@yahoo.co.uk</email>"" + ""</emails><timestamp>2002-03-17 20:30:40.0</timestamp><locations>"" + ""<location>London</location><location>Bath</location></locations>"" + ""<ID/><projectURLs/><nickName/><address><code/><country/>"" + ""<city/><street/></address><numbers><number>3</number><number>4</number>"" + ""<number>5</number></numbers></CustomerBean>"";
        xmlAssertIsomorphic (parseString (xml), parseString (out), true);
    } finally {
        in.close ();
    }
}
",76,105
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public void testWriteThenRead () throws Exception {
    PersonBean bean = new PersonBean (21, ""Samual Smith"");
    StringWriter stringWriter = new StringWriter ();
    BeanWriter beanWriter = new BeanWriter (stringWriter);
    beanWriter.write (bean);
    stringWriter.flush ();
    String xml = ""<?xml version='1.0'?>"" + stringWriter.toString ();
    BeanReader reader = new BeanReader ();
    reader.registerBeanClass (PersonBean.class);
    bean = (PersonBean) reader.parse (new StringReader (xml));
    assertEquals (""Person age wrong"", 21, bean.getAge ());
    assertEquals (""Person name wrong"", ""Samual Smith"", bean.getName ());
    bean = new PersonBean (19, ""John Smith"");
    stringWriter = new StringWriter ();
    beanWriter = new BeanWriter (stringWriter);
    beanWriter.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    beanWriter.write (bean);
    stringWriter.flush ();
    xml = ""<?xml version='1.0'?>"" + stringWriter.toString ();
    reader = new BeanReader ();
    reader.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    reader.registerBeanClass (PersonBean.class);
    bean = (PersonBean) reader.parse (new StringReader (xml));
    assertEquals (""[Attribute] Person age wrong"", 19, bean.getAge ());
    assertEquals (""[Attribute] Person name wrong"", ""John Smith"", bean.getName ());
}
",107,140
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public String writeBean (Object bean) throws Exception {
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.setEndOfLine (""\n"");
    writer.enablePrettyPrint ();
    writer.write (bean);
    return out.getBuffer ().toString ();
}
",142,152
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public Class getBeanClass () {
    return CustomerBean.class;
}
",155,158
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
protected void testCustomer (Object bean) throws Exception {
    assertTrue (""Is a CustomerBean"", bean instanceof CustomerBean);
    CustomerBean customer = (CustomerBean) bean;
    assertEquals (""name"", ""James"", customer.getName ());
    String [] emails = customer.getEmails ();
    assertTrue (""contains some emails"", emails != null);
    assertEquals (""emails.length"", 2, emails.length);
    assertEquals (""emails[0]"", ""jstrachan@apache.org"", emails [0]);
    assertEquals (""emails[1]"", ""james_strachan@yahoo.co.uk"", emails [1]);
    int [] numbers = customer.getNumbers ();
    assertTrue (""contains some numbers"", numbers != null);
    assertEquals (""numbers.length"", 3, numbers.length);
    assertEquals (""numbers[0]"", 3, numbers [0]);
    assertEquals (""numbers[1]"", 4, numbers [1]);
    assertEquals (""numbers[2]"", 5, numbers [2]);
    List locations = customer.getLocations ();
    assertTrue (""contains some locations"", locations != null);
    assertEquals (""locations.size()"", 2, locations.size ());
    assertEquals (""locations[0]"", ""London"", locations.get (0));
    assertEquals (""locations[1]"", ""Bath"", locations.get (1));
    assertEquals (ConvertUtils.convert (""2002-03-17"", Date.class), customer.getDate ());
    assertEquals (ConvertUtils.convert (""20:30:40"", Time.class), customer.getTime ());
    assertEquals (ConvertUtils.convert (""2002-03-17 20:30:40.0"", Timestamp.class), customer.getTimestamp ());
    assertEquals (new BigDecimal (""1234567890.12345""), customer.getBigDecimal ());
    assertEquals (new BigInteger (""1234567890""), customer.getBigInteger ());
}
",163,195
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
protected InputStream getXMLInput () throws IOException {
    return new FileInputStream (getTestFile (""src/test/org/apache/commons/betwixt/customer.xml""));
}
",197,200
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public void testAdderButNoProperty () throws Exception {
}
",205,236
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
private void checkBean (AdderButNoPropertyBean bean) throws Exception {
    assertEquals (""Bad addString call count"", 3, bean.stringCallCount ());
}
",238,241
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
private void checkBean (PersonListBean bean) throws Exception {
    assertEquals (""PersonList size"", 4, bean.getPersonList ().size ());
    assertEquals (""PersonList value (1)"", ""Athos"", ((PersonBean) bean.getPersonList ().get (0)).getName ());
    assertEquals (""PersonList value (2)"", ""Porthos"", ((PersonBean) bean.getPersonList ().get (1)).getName ());
    assertEquals (""PersonList value (3)"", ""Aramis"", ((PersonBean) bean.getPersonList ().get (2)).getName ());
    assertEquals (""PersonList value (4)"", ""D'Artagnan"", ((PersonBean) bean.getPersonList ().get (3)).getName ());
}
",243,250
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public void testPersonList () throws Exception {
    PersonListBean people = new PersonListBean ();
    people.addPerson (new PersonBean (22, ""Athos""));
    people.addPerson (new PersonBean (25, ""Porthos""));
    people.addPerson (new PersonBean (23, ""Aramis""));
    people.addPerson (new PersonBean (18, ""D'Artagnan""));
    checkBean (people);
    BeanReader reader = new BeanReader ();
    reader.registerBeanClass (PersonListBean.class);
    InputStream in = new FileInputStream (getTestFile (""src/test/org/apache/commons/betwixt/person-list.xml""));
    try {
        checkBean ((PersonListBean) reader.parse (in));
    } finally {
        in.close ();
    }
}
",252,300
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public void testWrapElements () throws Exception {
    ListOfNames listOfNames = new ListOfNames ();
    listOfNames.addName (new NameBean (""Martin""));
    String xml = ""<ListOfNames><names><name name='Martin'/></names></ListOfNames>"";
    BeanReader reader = new BeanReader ();
    reader.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    reader.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (true);
    reader.registerBeanClass (ListOfNames.class);
    ListOfNames newListOfNames = (ListOfNames) reader.parse (new StringReader (xml));
    assertEquals (""Wrapped collection read fails"", listOfNames, newListOfNames);
}
",303,318
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public void testSetDigesterRules () throws Exception {
    NameBean martinBean = new NameBean (""Martin"");
    ListOfNames listOfNames = new ListOfNames ();
    listOfNames.addName (martinBean);
    String xml = ""<ListOfNames><names><name name='Martin'/></names></ListOfNames>"";
    BeanReader reader = new BeanReader ();
    reader.setRules (new ExtendedBaseRules ());
    reader.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    reader.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (true);
    TestRule ruleOne = new TestRule ();
    TestRule ruleTwo = new TestRule ();
    reader.addRule (""!*/ListOfNames/names/name"", ruleOne);
    reader.registerBeanClass (ListOfNames.class);
    reader.addRule (""!*/ListOfNames/names/name"", ruleTwo);
    ListOfNames newListOfNames = (ListOfNames) reader.parse (new StringReader (xml));
    reader.parse (new StringReader (xml));
    assertEquals (""Rule one called"", true, ruleOne.isCalled ());
    assertEquals (""Rule two called"", true, ruleTwo.isCalled ());
    assertEquals (""Rule one digester top object"", listOfNames, ruleOne.getTop ());
    assertEquals (""Rule two digester top object"", martinBean, ruleTwo.getTop ());
}
",320,353
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public void testDateReadConversion () throws Exception {
    Calendar calendar = Calendar.getInstance ();
    calendar.set (2003, 7, 2, 19, 30, 00);
    java.util.Date date = calendar.getTime ();
    String dateToString = date.toString ();
    PartyBean bean = new PartyBean (""Wedding"", date, 1930, new AddressBean (""Old White Lion Hotel"", ""Howarth"", ""Merry Old England"", ""BD22 8EP""));
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    XMLIntrospector introspector = writer.getXMLIntrospector ();
    introspector.getConfiguration ().setElementNameMapper (new HyphenatedNameMapper ());
    introspector.getConfiguration ().setAttributesForPrimitives (false);
    writer.write (""party"", bean);
    String xml = ""<?xml version='1.0'?><party>"" + ""<venue><street>Old White Lion Hotel</street><city>Howarth</city>"" + ""<code>BD22 8EP</code><country>Merry Old England</country></venue>"" + ""<date-of-party>"" + dateToString + ""</date-of-party><from-hour>1930</from-hour>"" + ""<excuse>Wedding</excuse>"" + ""</party>"";
    xmlAssertIsomorphic (parseString (xml), parseString (out), true);
    BeanReader reader = new BeanReader ();
    reader.setXMLIntrospector (introspector);
    reader.registerBeanClass (""party"", PartyBean.class);
    PartyBean readBean = (PartyBean) reader.parse (new StringReader (xml));
    assertEquals (""FromHours incorrect property value"", readBean.getFromHour (), bean.getFromHour ());
    assertEquals (""Excuse incorrect property value"", readBean.getExcuse (), bean.getExcuse ());
    AddressBean readAddress = readBean.getVenue ();
    AddressBean address = bean.getVenue ();
    assertEquals (""address.street incorrect property value"", readAddress.getStreet (), address.getStreet ());
    assertEquals (""address.city incorrect property value"", readAddress.getCity (), address.getCity ());
    assertEquals (""address.code incorrect property value"", readAddress.getCode (), address.getCode ());
    assertEquals (""address.country incorrect property value"", readAddress.getCountry (), address.getCountry ());
    assertEquals (""Incorrect date property"", date.toGMTString (), readBean.getDateOfParty ().toGMTString ());
}
",355,408
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public void testHyphenatedNameMapping () throws Exception {
    Calendar calendar = Calendar.getInstance ();
    calendar.set (2003, 7, 2, 19, 30, 00);
    java.util.Date date = calendar.getTime ();
    String dateToString = date.toString ();
    PartyBean bean = new PartyBean (""Wedding"", date, 1930, new AddressBean (""Old White Lion Hotel"", ""Howarth"", ""Merry Old England"", ""BD22 8EP""));
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    XMLIntrospector introspector = writer.getXMLIntrospector ();
    introspector.getConfiguration ().setElementNameMapper (new HyphenatedNameMapper ());
    introspector.getConfiguration ().setAttributesForPrimitives (false);
    writer.write (bean);
    String xml = ""<?xml version='1.0'?><party-bean>"" + ""<venue><street>Old White Lion Hotel</street><city>Howarth</city>"" + ""<code>BD22 8EP</code><country>Merry Old England</country></venue>"" + ""<date-of-party>"" + dateToString + ""</date-of-party><from-hour>1930</from-hour>"" + ""<excuse>Wedding</excuse>"" + ""</party-bean>"";
    xmlAssertIsomorphic (parseString (xml), parseString (out), true);
    BeanReader reader = new BeanReader ();
    reader.setXMLIntrospector (introspector);
    reader.registerBeanClass (PartyBean.class);
    PartyBean readBean = (PartyBean) reader.parse (new StringReader (xml));
    assertEquals (""FromHours incorrect property value"", readBean.getFromHour (), bean.getFromHour ());
    assertEquals (""Excuse incorrect property value"", readBean.getExcuse (), bean.getExcuse ());
    AddressBean readAddress = readBean.getVenue ();
    AddressBean address = bean.getVenue ();
    assertEquals (""address.street incorrect property value"", readAddress.getStreet (), address.getStreet ());
    assertEquals (""address.city incorrect property value"", readAddress.getCity (), address.getCity ());
    assertEquals (""address.code incorrect property value"", readAddress.getCode (), address.getCode ());
    assertEquals (""address.country incorrect property value"", readAddress.getCountry (), address.getCountry ());
    assertEquals (""Incorrect date property"", date.toGMTString (), readBean.getDateOfParty ().toGMTString ());
}
",410,464
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public void testCustomDateReadConversion () throws Exception {
    BindingConfiguration configuration = new BindingConfiguration (new ConvertUtilsObjectStringConverter (), false);
    class ISOToStringConverter implements Converter {
        final SimpleDateFormat formatter = new SimpleDateFormat (""yyyyMMdd"");
        public Object convert (Class type, Object value) {
            if (value == null) {
                return null;
            }
            if (value instanceof java.util.Date) {
                return formatter.format ((java.util.Date) value);
            }
            return value.toString ();
        }
    }
    class ISODateConverter implements Converter {
        final SimpleDateFormat formatter = new SimpleDateFormat (""yyyyMMdd"");
        public Object convert (Class type, Object value) {
            if (value == null) {
                return null;
            }
            if (value instanceof java.util.Date) {
                return formatter.format ((java.util.Date) value);
            }
            try {
                return formatter.parse (value.toString ());
            } catch (ParseException ex) {
                throw new ConversionException (ex);
            }
        }
    }
    ISODateConverter converter = new ISODateConverter ();
    ConvertUtils.register (converter, java.util.Date.class);
    ISOToStringConverter tsConverter = new ISOToStringConverter ();
    ConvertUtils.register (tsConverter, String.class);
    Converter dateConverter = ConvertUtils.lookup (java.util.Date.class);
    assertEquals (""Date converter successfully registered"", dateConverter, converter);
    Converter stringConverter = ConvertUtils.lookup (String.class);
    assertEquals (""Date converter successfully registered"", tsConverter, stringConverter);
    java.util.Date conversionResult = (java.util.Date) ConvertUtils.convert (""20030101"", java.util.Date.class);
    Calendar calendar = Calendar.getInstance ();
    calendar.setTime (conversionResult);
    int dayOfYear = calendar.get (Calendar.DAY_OF_YEAR);
    assertEquals (""Correct conversion result"", dayOfYear, 1);
    calendar.set (2003, 7, 2);
    java.util.Date date = calendar.getTime ();
    PartyBean bean = new PartyBean (""Wedding"", date, 1900, new AddressBean (""Old White Lion Hotel"", ""Howarth"", ""Merry Old England"", ""BD22 8EP""));
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setBindingConfiguration (configuration);
    XMLIntrospector introspector = writer.getXMLIntrospector ();
    introspector.getConfiguration ().setElementNameMapper (new HyphenatedNameMapper ());
    introspector.getConfiguration ().setAttributesForPrimitives (false);
    writer.write (""party"", bean);
    String xml = ""<?xml version='1.0'?><party>"" + ""<venue><street>Old White Lion Hotel</street><city>Howarth</city>"" + ""<code>BD22 8EP</code><country>Merry Old England</country></venue>"" + ""<date-of-party>20030802</date-of-party><from-hour>1900</from-hour>"" + ""<excuse>Wedding</excuse>"" + ""</party>"";
    xmlAssertIsomorphic (parseString (xml), parseString (out), true);
    BeanReader reader = new BeanReader ();
    reader.setBindingConfiguration (configuration);
    reader.setXMLIntrospector (introspector);
    reader.registerBeanClass (""party"", PartyBean.class);
    PartyBean readBean = (PartyBean) reader.parse (new StringReader (xml));
    assertEquals (""FromHours incorrect property value"", readBean.getFromHour (), bean.getFromHour ());
    assertEquals (""Excuse incorrect property value"", readBean.getExcuse (), bean.getExcuse ());
    AddressBean readAddress = readBean.getVenue ();
    AddressBean address = bean.getVenue ();
    assertEquals (""address.street incorrect property value"", readAddress.getStreet (), address.getStreet ());
    assertEquals (""address.city incorrect property value"", readAddress.getCity (), address.getCity ());
    assertEquals (""address.code incorrect property value"", readAddress.getCode (), address.getCode ());
    assertEquals (""address.country incorrect property value"", readAddress.getCountry (), address.getCountry ());
    calendar.setTime (bean.getDateOfParty ());
    calendar.set (Calendar.HOUR_OF_DAY, 0);
    dayOfYear = calendar.get (Calendar.DAY_OF_YEAR);
    int year = calendar.get (Calendar.YEAR);
    calendar.setTime (readBean.getDateOfParty ());
    calendar.set (Calendar.HOUR_OF_DAY, 0);
    int readDayOfYear = calendar.get (Calendar.DAY_OF_YEAR);
    int readYear = calendar.get (Calendar.YEAR);
    assertEquals (""date incorrect property value (year)"", year, readYear);
    assertEquals (""date incorrect property value (day)"", dayOfYear, readDayOfYear);
    ConvertUtils.deregister ();
}
",466,598
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public Object convert (Class type, Object value) {
    if (value == null) {
        return null;
    }
    if (value instanceof java.util.Date) {
        return formatter.format ((java.util.Date) value);
    }
    return value.toString ();
}
",479,490
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public Object convert (Class type, Object value) {
    if (value == null) {
        return null;
    }
    if (value instanceof java.util.Date) {
        return formatter.format ((java.util.Date) value);
    }
    try {
        return formatter.parse (value.toString ());
    } catch (ParseException ex) {
        throw new ConversionException (ex);
    }
}
",496,518
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public void testReadMap () throws Exception {
    MapBean bean = new MapBean (""drinkers"");
    bean.addAddress (""Russell McManus"", new AddressBean (""6, Westgate"", ""Shipley"", ""United Kingdom"", ""BD17 5EJ""));
    bean.addAddress (""Alex Compbell"", new AddressBean (""5, Kirkgate"", ""Shipley"", ""United Kingdom"", ""BD18 3QW""));
    bean.addAddress (""Sid Gardner"", new AddressBean (""Old House At Home, Otley Road"", ""Shipley"", ""United Kingdom"", ""BD18 2BJ""));
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (""address-book"", bean);
    String xml = ""<?xml version='1.0'?><address-book><title>drinkers</title>"" + ""<addresses>"" + ""<entry><key>Alex Compbell</key><value><country>United Kingdom</country>"" + ""<code>BD18 3QW</code><city>Shipley</city><street>5, Kirkgate</street></value></entry>"" + ""<entry><key>Russell McManus</key><value><country>United Kingdom</country><code>BD17 5EJ</code>"" + ""<city>Shipley</city><street>6, Westgate</street></value></entry>"" + ""<entry><key>Sid Gardner</key><value><country>United Kingdom</country>"" + ""<code>BD18 2BJ</code><city>Shipley</city><street>Old House At Home, Otley Road</street>"" + ""</value></entry>"" + ""</addresses></address-book>"";
    xmlAssertIsomorphic (parseString (out.toString ()), parseString (xml), true);
    BeanReader reader = new BeanReader ();
    reader.getBindingConfiguration ().setMapIDs (false);
    reader.registerBeanClass (""address-book"", MapBean.class);
    bean = (MapBean) reader.parse (new StringReader (xml));
    assertEquals (""Title property is incorrect"", ""drinkers"", bean.getTitle ());
    assertEquals (""Map entries"", 3, bean.getAddresses ().size ());
    AddressBean address = (AddressBean) bean.getAddresses ().get (""Russell McManus"");
    assertNotNull (""Missing entry for 'Russell McManus'"", address);
    assertEquals (""Bad address (1)"", ""6, Westgate"", address.getStreet ());
    assertEquals (""Bad address (2)"", ""Shipley"", address.getCity ());
    assertEquals (""Bad address (3)"", ""United Kingdom"", address.getCountry ());
    assertEquals (""Bad address (4)"", ""BD17 5EJ"", address.getCode ());
    address = (AddressBean) bean.getAddresses ().get (""Alex Compbell"");
    assertNotNull (""Missing entry for 'Alex Compbell'"", address);
    assertEquals (""Bad address (5)"", ""5, Kirkgate"", address.getStreet ());
    assertEquals (""Bad address (6)"", ""Shipley"", address.getCity ());
    assertEquals (""Bad address (7)"", ""United Kingdom"", address.getCountry ());
    assertEquals (""Bad address (8)"", ""BD18 3QW"", address.getCode ());
    address = (AddressBean) bean.getAddresses ().get (""Sid Gardner"");
    assertNotNull (""Missing entry for 'Sid Gardner'"", address);
    assertEquals (""Bad address (9)"", ""Old House At Home, Otley Road"", address.getStreet ());
    assertEquals (""Bad address (10)"", ""Shipley"", address.getCity ());
    assertEquals (""Bad address (11)"", ""United Kingdom"", address.getCountry ());
    assertEquals (""Bad address (12)"", ""BD18 2BJ"", address.getCode ());
}
",601,680
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public void testReadMap2 () throws Exception {
    IdMap idMap = new IdMap ();
    String id = ""3920"";
    idMap.addId (id, new Integer (1));
    StringWriter outputWriter = new StringWriter ();
    outputWriter.write (""<?xml version='1.0' ?>\n"");
    BeanWriter beanWriter = new BeanWriter (outputWriter);
    beanWriter.write (idMap);
    String xml = outputWriter.toString ();
    System.out.println (""Map test: "" + xml);
    BeanReader beanReader = new BeanReader ();
    beanReader.registerBeanClass (IdMap.class);
    IdMap result = (IdMap) beanReader.parse (new StringReader (xml));
    assertNotNull (""didn't get an object back!"", result);
    assertNotNull (""didn't get a Map out of the IdMap!"", result.getIds ());
    assertEquals (""Got the Map, but doesn't have an entry!"", 1, result.getIds ().size ());
    assertNotNull (""Got the Map, but doesn't have correct values!"", result.getIds ().get (id));
}
",682,701
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public void testIndirectReference () throws Exception {
    Tweedledum dum = new Tweedledum ();
    Tweedledee dee = new Tweedledee (dum);
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (dee);
    String xml = ""<?xml version='1.0'?><Tweedledee><name>Tweedledee</name>"" + ""<brother><name>Tweedledum</name></brother></Tweedledee>"";
    xmlAssertIsomorphic (parseString (xml), parseString (out), true);
    BeanReader reader = new BeanReader ();
    reader.getBindingConfiguration ().setMapIDs (false);
    reader.registerBeanClass (Tweedledee.class);
    Tweedledee bean = (Tweedledee) reader.parse (new StringReader (xml));
    assertNotNull (bean.getBrother ());
}
",703,722
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public void _testDoubleLinkedCollectionRead () throws Exception {
    String xml = ""<?xml version='1.0'?><DOUBLE_LINKED_PARENT_BEAN>"" + ""<NAME>Cronus</NAME>"" + ""<CHILDREN>"" + ""<CHILD><NAME>Hades</NAME></CHILD>"" + ""<CHILD><NAME>Hera</NAME></CHILD>"" + ""<CHILD><NAME>Hestia</NAME></CHILD>"" + ""<CHILD><NAME>Demeter</NAME></CHILD>"" + ""<CHILD><NAME>Poseidon</NAME></CHILD>"" + ""<CHILD><NAME>Zeus</NAME></CHILD>"" + ""</CHILDREN></DOUBLE_LINKED_PARENT_BEAN>"";
    BeanReader reader = new BeanReader ();
    reader.getXMLIntrospector ().getConfiguration ().setElementNameMapper (new HyphenatedNameMapper (true, ""_""));
    reader.registerBeanClass (DoubleLinkedParentBean.class);
    DoubleLinkedParentBean bean = (DoubleLinkedParentBean) reader.parse (new StringReader (xml));
    assertNotNull (""Bean read"", bean);
    assertEquals (""Cronus"", ""Parent name"", bean.getName ());
    assertEquals (""Number of children"", 6, bean.getSize ());
    ArrayList list = new ArrayList ();
    for (Iterator it = bean.getChildren (); it.hasNext ();) {
        list.add (it.next ());
    }
    DoubleLinkedChildBean childZero = (DoubleLinkedChildBean) list.get (0);
    DoubleLinkedChildBean childOne = (DoubleLinkedChildBean) list.get (1);
    DoubleLinkedChildBean childTwo = (DoubleLinkedChildBean) list.get (2);
    DoubleLinkedChildBean childThree = (DoubleLinkedChildBean) list.get (3);
    DoubleLinkedChildBean childFour = (DoubleLinkedChildBean) list.get (4);
    DoubleLinkedChildBean childFive = (DoubleLinkedChildBean) list.get (5);
    assertEquals (""Child name zero"", ""Hades"", childZero.getName ());
    assertEquals (""Child name one"", ""Hera"", childZero.getName ());
    assertEquals (""Child name two"", ""Hestia"", childZero.getName ());
    assertEquals (""Child name three"", ""Demeter"", childZero.getName ());
    assertEquals (""Child name four"", ""Poseidon"", childZero.getName ());
    assertEquals (""Child name five"", ""Zeus"", childZero.getName ());
}
",724,766
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public Object getTop () {
    return top;
}
",779,782
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public String getName () {
    return name;
}
",784,787
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public void setName (String name) {
    this.name = name;
}
",789,792
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public boolean isCalled () {
    return called;
}
",794,797
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanReader.java,"
public void begin (String name, String namespace, Attributes attributes) {
    top = getDigester ().peek ();
    called = true;
}
",799,803
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PoemBean.java,"
public List getLines () {
    return lines;
}
",27,30
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PoemBean.java,"
public void addLine (String line) {
    lines.add (line);
}
",32,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestInterfaceIntrospection.java,"
public void testSuperInterfaceIntrospection () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    XMLBeanInfo beanInfo = introspector.introspect (ICopyableDateRange.class);
    ElementDescriptor [] childDescriptors = beanInfo.getElementDescriptor ().getElementDescriptors ();
    assertEquals (""Date range child elements"", 2, childDescriptors.length);
    int code = 0;
    for (int i = 0; i < 2; i ++) {
        String name = childDescriptors [i].getPropertyName ();
        if (""startDate"".equals (name)) {
            code += 1;
        }
        if (""endDate"".equals (name)) {
            code += 2;
        }
    }
    assertEquals (""Expected date range elements"", 3, code);
}
",32,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestInterfaceIntrospection.java,"
public void testSuperInterfaceIntrospectionWithDotBetwixt () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    XMLBeanInfo beanInfo = introspector.introspect (ILaughingCount.class);
    ElementDescriptor [] childDescriptors = beanInfo.getElementDescriptor ().getElementDescriptors ();
    assertEquals (""Laughing count child elements"", 1, childDescriptors.length);
    assertEquals (""Laughing count super interface matched"", ""count"", childDescriptors [0].getPropertyName ());
    assertEquals (""Laughing count super interface matched"", Integer.TYPE, childDescriptors [0].getPropertyType ());
    assertNotNull (""Laughing count updater matched"", childDescriptors [0].getUpdater ());
}
",58,70
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/PhoneBookBean.java,"
public PhoneBookBean () {
}
",35,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/PhoneBookBean.java,"
public PhoneBookBean (String name) {
    setName (name);
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/PhoneBookBean.java,"
public String getName () {
    return name;
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/PhoneBookBean.java,"
public void setName (String string) {
    name = string;
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/PhoneBookBean.java,"
public List getNumbers () {
    return numbers;
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/PhoneBookBean.java,"
public void addNumber (PhoneNumberBean phoneNumber) {
    numbers.add (phoneNumber);
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/FaceImpl.java,"
public String getName () {
    return name;
}
",31,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/FaceImpl.java,"
public void setName (String name) {
    this.name = name;
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/FaceImpl.java,"
public void smirk () {
    smirked = true;
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/FaceImpl.java,"
public boolean getFaceReallySmirked () {
    return smirked;
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/CopyableDateRange.java,"
public CopyableDateRange (Date startDate, Date endDate) {
    super ();
    this.startDate = startDate;
    this.endDate = endDate;
}
",31,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/CopyableDateRange.java,"
public Object copy () {
    return new CopyableDateRange (getStartDate (), getEndDate ());
}
",38,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/CopyableDateRange.java,"
public Date getStartDate () {
    return startDate;
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/CopyableDateRange.java,"
public Date getEndDate () {
    return endDate;
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/BeanWithBeanInfoBeanBeanInfo.java,"
public PropertyDescriptor [] getPropertyDescriptors () {
    PropertyDescriptor [] descriptors = new PropertyDescriptor [2];
    try {
        descriptors [0] = new PropertyDescriptor (""alpha"", BeanWithBeanInfoBean.class, ""getAlpha"", ""setAlpha"");
        descriptors [1] = new PropertyDescriptor (""gamma"", BeanWithBeanInfoBean.class, ""gammaGetter"", ""gammaSetter"");
    } catch (IntrospectionException e) {
        throw new RuntimeException (e.getMessage ());
    }
    return descriptors;
}
",33,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/CompanyBean.java,"
public CompanyBean () {
}
",33,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/CompanyBean.java,"
public CompanyBean (String name, AddressBean address) {
    setName (name);
    setRegisteredAddress (address);
}
",35,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/CompanyBean.java,"
public String getName () {
    return name;
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/CompanyBean.java,"
public AddressBean getRegisteredAddress () {
    return registeredAddress;
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/CompanyBean.java,"
public void setName (String string) {
    name = string;
}
",52,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/CompanyBean.java,"
public void setRegisteredAddress (AddressBean bean) {
    registeredAddress = bean;
}
",57,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/DateFormatterBean.java,"
public Map getFormats () {
    return formatsByLocale;
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/DateFormatterBean.java,"
public void addFormat (Locale locale, SimpleDateFormat format) {
    formatsByLocale.put (locale, format);
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/DateFormatterBean.java,"
public String format (Date date, Locale locale) {
    String result = """";
    SimpleDateFormat simpleDateFormat = (SimpleDateFormat) formatsByLocale.get (locale);
    if (simpleDateFormat == null) {
        result = DateFormat.getDateInstance (DateFormat.SHORT, locale).format (date);
    }
    else {
        result = simpleDateFormat.format (date);
    }
    return result;
}
",53,66
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/BeanWithBeanInfoBean.java,"
public BeanWithBeanInfoBean () {
}
",42,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/BeanWithBeanInfoBean.java,"
public BeanWithBeanInfoBean (String alpha, String beta, String gamma) {
    setAlpha (alpha);
    setBeta (beta);
    gammaSetter (gamma);
}
",44,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/BeanWithBeanInfoBean.java,"
public String getAlpha () {
    return alpha;
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/BeanWithBeanInfoBean.java,"
public void setAlpha (String alpha) {
    this.alpha = alpha;
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/BeanWithBeanInfoBean.java,"
public String getBeta () {
    return beta;
}
",61,64
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/BeanWithBeanInfoBean.java,"
public void setBeta (String beta) {
    this.beta = beta;
}
",66,69
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/BeanWithBeanInfoBean.java,"
public String gammaGetter () {
    return gamma;
}
",71,74
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/BeanWithBeanInfoBean.java,"
public void gammaSetter (String gamma) {
    this.gamma = gamma;
}
",76,79
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/AddressBook.java,"
public AddressBook () {
}
",36,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/AddressBook.java,"
public Map getAddressesByName () {
    return addressesByName;
}
",38,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/AddressBook.java,"
public void addAddress (String name, AddressBean address) {
    addressesByName.put (name, address);
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/AddressBook.java,"
public Map getNamesByAddress () {
    return namesByAddress;
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/AddressBook.java,"
public void addName (AddressBean address, String name) {
    namesByAddress.put (address, name);
}
",53,56
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestDeclarativeIntrospection.java,"
public TestDeclarativeIntrospection (String name) {
    super (name);
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestDeclarativeIntrospection.java,"
public void testStandardPropertyIsHollow () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setAttributesForPrimitives (true);
    XMLBeanInfo out = introspector.introspect (CompanyBean.class);
    ElementDescriptor companyBeanDescriptor = out.getElementDescriptor ();
    ElementDescriptor [] childDescriptors = companyBeanDescriptor.getElementDescriptors ();
    assertEquals (""Correct number of child descriptors"", 1, childDescriptors.length);
    ElementDescriptor addressDescriptor = childDescriptors [0];
    assertEquals (""standard property is hollow"", true, addressDescriptor.isHollow ());
}
",41,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestDeclarativeIntrospection.java,"
public void testSimpleElementIsHollow () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setAttributesForPrimitives (false);
    XMLBeanInfo out = introspector.introspect (CompanyBean.class);
    ElementDescriptor companyBeanDescriptor = out.getElementDescriptor ();
    ElementDescriptor [] childDescriptors = companyBeanDescriptor.getElementDescriptors ();
    assertEquals (""Correct number of child descriptors"", 2, childDescriptors.length);
    ElementDescriptor nameDescriptor = null;
    for (int i = 0, size = childDescriptors.length; i < size; i ++) {
        if (""name"".equals (childDescriptors [i].getLocalName ())) {
            nameDescriptor = childDescriptors [i];
        }
    }
    assertNotNull (""Expected to find an element descriptor for 'name'"", nameDescriptor);
    assertFalse (""Expected simple element not to be hollow"", nameDescriptor.isHollow ());
}
",57,78
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestDeclarativeIntrospection.java,"
public void testWrappedCollective () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setWrapCollectionsInElement (true);
    introspector.getConfiguration ().setAttributesForPrimitives (true);
    XMLBeanInfo out = introspector.introspect (PhoneBookBean.class);
    ElementDescriptor phoneBookBeanDescriptor = out.getElementDescriptor ();
    ElementDescriptor [] phoneBookChildDescriptors = phoneBookBeanDescriptor.getElementDescriptors ();
    assertEquals (""Expected single wrapping descriptor"", 1, phoneBookChildDescriptors.length);
    ElementDescriptor wrappingDescriptor = phoneBookChildDescriptors [0];
    assertNull (""Spacer should not have an updater"", wrappingDescriptor.getUpdater ());
    assertEquals (""Wrapper element name should match getter"", ""numbers"", wrappingDescriptor.getQualifiedName ());
    ElementDescriptor [] wrappingChildDescriptors = wrappingDescriptor.getElementDescriptors ();
    assertEquals (""Expected single child for wrapping descriptor"", 1, wrappingChildDescriptors.length);
    ElementDescriptor hollowPhoneNumberDescriptor = wrappingChildDescriptors [0];
    assertTrue (""Expected wrapped descriptor to be hollow"", hollowPhoneNumberDescriptor.isHollow ());
    assertEquals (""Expected the collective property type to be a list"", List.class, hollowPhoneNumberDescriptor.getPropertyType ());
    assertEquals (""Expected the singular property type to be the phone number"", PhoneNumberBean.class, hollowPhoneNumberDescriptor.getSingularPropertyType ());
    assertEquals (""Collective element name should match adder"", ""number"", hollowPhoneNumberDescriptor.getQualifiedName ());
}
",80,111
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestDeclarativeIntrospection.java,"
public void testUnwrappedCollective () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setWrapCollectionsInElement (false);
    introspector.getConfiguration ().setAttributesForPrimitives (true);
    XMLBeanInfo out = introspector.introspect (PhoneBookBean.class);
    ElementDescriptor phoneBookBeanDescriptor = out.getElementDescriptor ();
    ElementDescriptor [] phoneBookChildDescriptors = phoneBookBeanDescriptor.getElementDescriptors ();
    assertEquals (""Expected single child descriptor"", 1, phoneBookChildDescriptors.length);
    ElementDescriptor hollowPhoneNumberDescriptor = phoneBookChildDescriptors [0];
    assertTrue (""Expected collective element descriptor to be hollow"", hollowPhoneNumberDescriptor.isHollow ());
    assertEquals (""Expected the collective property type to be a list"", List.class, hollowPhoneNumberDescriptor.getPropertyType ());
    assertEquals (""Expected the singular property type to be the phone number"", PhoneNumberBean.class, hollowPhoneNumberDescriptor.getSingularPropertyType ());
    assertEquals (""Collective element name should match adder"", ""number"", hollowPhoneNumberDescriptor.getQualifiedName ());
}
",113,136
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestDeclarativeIntrospection.java,"
public void testUnwrappedMap () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setWrapCollectionsInElement (false);
    introspector.getConfiguration ().setAttributesForPrimitives (true);
    XMLBeanInfo out = introspector.introspect (DateFormatterBean.class);
    ElementDescriptor formatterDescriptor = out.getElementDescriptor ();
    ElementDescriptor [] formatterChildDescriptors = formatterDescriptor.getElementDescriptors ();
    assertEquals (""Only one top level child"", 1, formatterChildDescriptors.length);
    ElementDescriptor entryDescriptor = formatterChildDescriptors [0];
    assertEquals (""Must be called entry"", ""entry"", entryDescriptor.getLocalName ());
    assertFalse (""Is not hollow"", entryDescriptor.isHollow ());
    assertNull (""No updater for entry spacer"", entryDescriptor.getUpdater ());
    ElementDescriptor [] entryChildDesciptors = entryDescriptor.getElementDescriptors ();
    assertEquals (""Entry has two children"", 2, entryChildDesciptors.length);
    ElementDescriptor keyDescriptor = entryChildDesciptors [0];
    assertEquals (""Must be called key"", ""key"", keyDescriptor.getLocalName ());
    assertTrue (""Is not simple therefore hollow"", keyDescriptor.isHollow ());
    assertNotNull (""Key should have an updater"", keyDescriptor.getUpdater ());
    ElementDescriptor valueDescriptor = entryChildDesciptors [1];
    assertEquals (""Must be called key"", ""value"", valueDescriptor.getLocalName ());
    assertTrue (""Is not simple therefore hollow"", valueDescriptor.isHollow ());
    assertNotNull (""Value should have an updater"", valueDescriptor.getUpdater ());
}
",138,167
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestDeclarativeIntrospection.java,"
public void testWrappedMap () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setWrapCollectionsInElement (true);
    introspector.getConfiguration ().setAttributesForPrimitives (true);
    XMLBeanInfo out = introspector.introspect (DateFormatterBean.class);
    ElementDescriptor formatterDescriptor = out.getElementDescriptor ();
    ElementDescriptor [] formatterChildDescriptors = formatterDescriptor.getElementDescriptors ();
    assertEquals (""Only one top level child"", 1, formatterChildDescriptors.length);
    ElementDescriptor spacerDescriptor = formatterChildDescriptors [0];
    assertEquals (""Spacer must be called formats"", ""formats"", spacerDescriptor.getLocalName ());
    assertFalse (""Is not hollow"", spacerDescriptor.isHollow ());
    assertNull (""No updater for entry spacer"", spacerDescriptor.getUpdater ());
    ElementDescriptor [] spacerChildDescriptors = spacerDescriptor.getElementDescriptors ();
    assertEquals (""Only one top level child"", 1, spacerChildDescriptors.length);
    ElementDescriptor entryDescriptor = spacerChildDescriptors [0];
    assertEquals (""Must be called entry"", ""entry"", entryDescriptor.getLocalName ());
    assertFalse (""Is not hollow"", entryDescriptor.isHollow ());
    assertNull (""No updater for entry spacer"", entryDescriptor.getUpdater ());
    ElementDescriptor [] entryChildDesciptors = entryDescriptor.getElementDescriptors ();
    assertEquals (""Entry has two children"", 2, entryChildDesciptors.length);
    ElementDescriptor keyDescriptor = entryChildDesciptors [0];
    assertEquals (""Must be called key"", ""key"", keyDescriptor.getLocalName ());
    assertTrue (""Is not simple therefore hollow"", keyDescriptor.isHollow ());
    assertNotNull (""Key should have an updater"", keyDescriptor.getUpdater ());
    ElementDescriptor valueDescriptor = entryChildDesciptors [1];
    assertEquals (""Must be called key"", ""value"", valueDescriptor.getLocalName ());
    assertTrue (""Is not simple therefore hollow"", valueDescriptor.isHollow ());
    assertNotNull (""Value should have an updater"", valueDescriptor.getUpdater ());
}
",169,206
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestDeclarativeIntrospection.java,"
public void testIsSimpleForPrimitives () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setWrapCollectionsInElement (true);
    introspector.getConfiguration ().setAttributesForPrimitives (false);
    XMLBeanInfo out = introspector.introspect (PhoneNumberBean.class);
    ElementDescriptor phoneNumberDescriptor = out.getElementDescriptor ();
    assertFalse (""Phone number descriptor is complex"", phoneNumberDescriptor.isSimple ());
    ElementDescriptor [] phoneNumberChildDescriptors = phoneNumberDescriptor.getElementDescriptors ();
    assertEquals (""Expected three child elements"", 3, phoneNumberChildDescriptors.length);
    assertTrue (""Descriptor "" + phoneNumberChildDescriptors [0] + "" should be simple"", phoneNumberChildDescriptors [0].isSimple ());
    assertTrue (""Descriptor "" + phoneNumberChildDescriptors [1] + "" should be simple"", phoneNumberChildDescriptors [1].isSimple ());
    assertTrue (""Descriptor "" + phoneNumberChildDescriptors [2] + "" should be simple"", phoneNumberChildDescriptors [2].isSimple ());
}
",208,230
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestDeclarativeIntrospection.java,"
public void testSimpleForRSS () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setWrapCollectionsInElement (true);
    introspector.getConfiguration ().setAttributesForPrimitives (false);
    XMLBeanInfo out = introspector.introspect (Channel.class);
    ElementDescriptor channelDescriptor = out.getElementDescriptor ();
    ElementDescriptor [] childNodesOfRSS = channelDescriptor.getElementDescriptors ();
    assertEquals (""RSS has only one child, channel"", 1, childNodesOfRSS.length);
    ElementDescriptor [] childNodesOfChannel = childNodesOfRSS [0].getElementDescriptors ();
    boolean matched = false;
    for (int i = 0, size = childNodesOfChannel.length; i < size; i ++) {
        if (""item"".equals (childNodesOfChannel [i].getLocalName ())) {
            matched = true;
        }
    }
    assertTrue (""Local element named item"", matched);
    for (int i = 0, size = childNodesOfChannel.length; i < size; i ++) {
        if (""title"".equals (childNodesOfChannel [i].getLocalName ())) {
            assertFalse (""Title is not hollow"", childNodesOfChannel [i].isHollow ());
        }
        else if (""item"".equals (childNodesOfChannel [i].getLocalName ())) {
            assertTrue (""Item is hollow"", childNodesOfChannel [i].isHollow ());
        }
        else if (""textinput"".equals (childNodesOfChannel [i].getLocalName ())) {
            assertTrue (""TextInput is hollow"", childNodesOfChannel [i].isHollow ());
        }
        else if (""skipDays"".equals (childNodesOfChannel [i].getLocalName ())) {
            assertFalse (""skipDays is not hollow"", childNodesOfChannel [i].isHollow ());
            assertFalse (""day is not hollow"", childNodesOfChannel [i].getElementDescriptors () [0].isHollow ());
        }
        else if (""skipHours"".equals (childNodesOfChannel [i].getLocalName ())) {
            assertFalse (""skipHours is not hollow"", childNodesOfChannel [i].isHollow ());
            assertFalse (""hour is not hollow"", childNodesOfChannel [i].getElementDescriptors () [0].isHollow ());
        }
    }
}
",232,279
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestDeclarativeIntrospection.java,"
public void testMapWithSimpleKey () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setWrapCollectionsInElement (false);
    introspector.getConfiguration ().setAttributesForPrimitives (true);
    XMLBeanInfo out = introspector.introspect (AddressBook.class);
    ElementDescriptor formatterDescriptor = out.getElementDescriptor ();
    ElementDescriptor [] formatterChildDescriptors = formatterDescriptor.getElementDescriptors ();
    assertEquals (""Two top level children"", 2, formatterChildDescriptors.length);
    ElementDescriptor entryDescriptor = formatterChildDescriptors [0];
    assertEquals (""Must be called entry"", ""entry"", entryDescriptor.getLocalName ());
    assertFalse (""Is not hollow"", entryDescriptor.isHollow ());
    assertNull (""No updater for entry spacer"", entryDescriptor.getUpdater ());
    ElementDescriptor [] entryChildDesciptors = entryDescriptor.getElementDescriptors ();
    assertEquals (""Entry has two children"", 2, entryChildDesciptors.length);
    ElementDescriptor keyDescriptor = entryChildDesciptors [0];
    assertEquals (""Must be called key"", ""key"", keyDescriptor.getLocalName ());
    assertFalse (""Is simple therefore not hollow"", keyDescriptor.isHollow ());
    assertNotNull (""Key should have an updater"", keyDescriptor.getUpdater ());
    ElementDescriptor valueDescriptor = entryChildDesciptors [1];
    assertEquals (""Must be called key"", ""value"", valueDescriptor.getLocalName ());
    assertTrue (""Is not simple therefore hollow"", valueDescriptor.isHollow ());
    assertNotNull (""Value should have an updater"", valueDescriptor.getUpdater ());
}
",282,311
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestDeclarativeIntrospection.java,"
public void testMapWithSimpleEntry () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setWrapCollectionsInElement (false);
    introspector.getConfiguration ().setAttributesForPrimitives (true);
    XMLBeanInfo out = introspector.introspect (AddressBook.class);
    ElementDescriptor formatterDescriptor = out.getElementDescriptor ();
    ElementDescriptor [] formatterChildDescriptors = formatterDescriptor.getElementDescriptors ();
    assertEquals (""Two top level children"", 2, formatterChildDescriptors.length);
    ElementDescriptor entryDescriptor = formatterChildDescriptors [1];
    assertEquals (""Must be called entry"", ""entry"", entryDescriptor.getLocalName ());
    assertFalse (""Is not hollow"", entryDescriptor.isHollow ());
    assertNull (""No updater for entry spacer"", entryDescriptor.getUpdater ());
    ElementDescriptor [] entryChildDesciptors = entryDescriptor.getElementDescriptors ();
    assertEquals (""Entry has two children"", 2, entryChildDesciptors.length);
    ElementDescriptor keyDescriptor = entryChildDesciptors [0];
    assertEquals (""Must be called key"", ""key"", keyDescriptor.getLocalName ());
    assertTrue (""Is not simple therefore hollow"", keyDescriptor.isHollow ());
    assertNotNull (""Key should have an updater"", keyDescriptor.getUpdater ());
    ElementDescriptor valueDescriptor = entryChildDesciptors [1];
    assertEquals (""Must be called key"", ""value"", valueDescriptor.getLocalName ());
    assertFalse (""Is simple therefore not hollow"", valueDescriptor.isHollow ());
    assertNotNull (""Value should have an updater"", valueDescriptor.getUpdater ());
}
",314,343
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestDeclarativeIntrospection.java,"
public void testConcreteMapNoWrap () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setWrapCollectionsInElement (false);
    XMLBeanInfo beanInfo = introspector.introspect (BeanWithConcreteMap.class);
    ElementDescriptor beanDescriptor = beanInfo.getElementDescriptor ();
    ElementDescriptor [] beanChildDescriptors = beanDescriptor.getElementDescriptors ();
    assertEquals (""One Entry element"", 1, beanChildDescriptors.length);
    ElementDescriptor entry = beanChildDescriptors [0];
    ElementDescriptor [] entryChildren = entry.getElementDescriptors ();
    assertEquals (""Expected key and entry elements"", 2, entryChildren.length);
}
",345,358
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestDeclarativeIntrospection.java,"
public void testConcreteMapWithWrap () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setWrapCollectionsInElement (true);
    XMLBeanInfo beanInfo = introspector.introspect (BeanWithConcreteMap.class);
    ElementDescriptor beanDescriptor = beanInfo.getElementDescriptor ();
    ElementDescriptor [] beanChildDescriptors = beanDescriptor.getElementDescriptors ();
    assertEquals (""One wrapper element"", 1, beanChildDescriptors.length);
    ElementDescriptor wrapper = beanChildDescriptors [0];
    ElementDescriptor [] wrapperChildren = wrapper.getElementDescriptors ();
    assertEquals (""One Entry element"", 1, wrapperChildren.length);
    ElementDescriptor entry = wrapperChildren [0];
    ElementDescriptor [] entryChildren = entry.getElementDescriptors ();
    assertEquals (""Expected key and entry elements"", 2, entryChildren.length);
}
",360,380
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/BeanWithConcreteMap.java,"
public HashMap getSomeThingies () {
    return someMap;
}
",32,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/BeanWithConcreteMap.java,"
public void addSomeThingy (String whatever, String thing) {
    someMap.put (whatever, thing);
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestXMLIntrospector.java,"
public static void main (String [] args) {
    TestRunner.run (suite ());
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestXMLIntrospector.java,"
public static Test suite () {
    return new TestSuite (TestXMLIntrospector.class);
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestXMLIntrospector.java,"
public TestXMLIntrospector (String testName) {
    super (testName);
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestXMLIntrospector.java,"
public void testIntrospector () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setAttributesForPrimitives (true);
    Object bean = createBean ();
    XMLBeanInfo info = introspector.introspect (bean);
    assertTrue (""Found XMLBeanInfo"", info != null);
    ElementDescriptor descriptor = info.getElementDescriptor ();
    assertTrue (""Found root element descriptor"", descriptor != null);
    AttributeDescriptor [] attributes = descriptor.getAttributeDescriptors ();
    assertTrue (""Found attributes"", attributes != null && attributes.length > 0);
    info = introspector.introspect (bean);
    assertTrue (""Found XMLBeanInfo"", info != null);
    descriptor = info.getElementDescriptor ();
    assertTrue (""Found root element descriptor"", descriptor != null);
    attributes = descriptor.getAttributeDescriptors ();
    assertTrue (""Found attributes"", attributes != null && attributes.length > 0);
    introspector.setRegistry (new NoCacheRegistry ());
    info = introspector.introspect (bean);
    assertTrue (""Found XMLBeanInfo"", info != null);
    descriptor = info.getElementDescriptor ();
    assertTrue (""Found root element descriptor"", descriptor != null);
    attributes = descriptor.getAttributeDescriptors ();
    assertTrue (""Found attributes"", attributes != null && attributes.length > 0);
    introspector.setRegistry (new DefaultXMLBeanInfoRegistry ());
    info = introspector.introspect (bean);
    assertTrue (""Found XMLBeanInfo"", info != null);
    descriptor = info.getElementDescriptor ();
    assertTrue (""Found root element descriptor"", descriptor != null);
    attributes = descriptor.getAttributeDescriptors ();
    assertTrue (""Found attributes"", attributes != null && attributes.length > 0);
}
",65,134
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestXMLIntrospector.java,"
public void testBeanWithBeanInfo () throws Exception {
    BeanInfo bwbiBeanInfo = Introspector.getBeanInfo (BeanWithBeanInfoBean.class);
    PropertyDescriptor [] propertyDescriptors = bwbiBeanInfo.getPropertyDescriptors ();
    assertEquals (""Wrong number of properties"", 2, propertyDescriptors.length);
    if (""alpha"".equals (propertyDescriptors [0].getName ())) {
        assertEquals (""Second property name"", ""gamma"", propertyDescriptors [1].getName ());
    }
    else {
        assertEquals (""First property name"", ""gamma"", propertyDescriptors [0].getName ());
        assertEquals (""Second property name"", ""alpha"", propertyDescriptors [1].getName ());
    }
    propertyDescriptors = null;
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setAttributesForPrimitives (false);
    XMLBeanInfo xmlBeanInfo = introspector.introspect (BeanWithBeanInfoBean.class);
    ElementDescriptor [] elementDescriptors = xmlBeanInfo.getElementDescriptor ().getElementDescriptors ();
    assertEquals (""Wrong number of elements"", 2, elementDescriptors.length);
    boolean alphaFirst = true;
    if (""alpha"".equals (elementDescriptors [0].getPropertyName ())) {
        assertEquals (""Second element name"", ""gamma"", elementDescriptors [1].getPropertyName ());
    }
    else {
        alphaFirst = false;
        assertEquals (""First element name"", ""gamma"", elementDescriptors [0].getPropertyName ());
        assertEquals (""Second element name"", ""alpha"", elementDescriptors [1].getPropertyName ());
    }
    StringWriter out = new StringWriter ();
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    BeanWithBeanInfoBean bean = new BeanWithBeanInfoBean (""alpha value"", ""beta value"", ""gamma value"");
    writer.write (bean);
    if (alphaFirst) {
        xmlAssertIsomorphicContent (parseFile (""src/test/org/apache/commons/betwixt/introspection/test-bwbi-output-a.xml""), parseString (out.toString ()));
    }
    else {
        xmlAssertIsomorphicContent (parseFile (""src/test/org/apache/commons/betwixt/introspection/test-bwbi-output-g.xml""), parseString (out.toString ()));
    }
}
",136,221
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestXMLIntrospector.java,"
public void testDefaultClassNormalizer () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    FaceImpl face = new FaceImpl ();
    XMLBeanInfo info = introspector.introspect (face);
    ElementDescriptor elementDescriptor = info.getElementDescriptor ();
    AttributeDescriptor [] attributeDescriptor = elementDescriptor.getAttributeDescriptors ();
    ElementDescriptor [] children = elementDescriptor.getElementDescriptors ();
    assertEquals (""Expected no attributes"", 0, attributeDescriptor.length);
    assertEquals (""Expected two elements"", 2, children.length);
}
",223,236
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestXMLIntrospector.java,"
public void testClassNormalizer () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setClassNormalizer (new ClassNormalizer () {
        public Class normalize (Class clazz) {
            if (IFace.class.isAssignableFrom (clazz)) {
                return IFace.class;
            }
            return super.normalize (clazz);
        }
    }
    );
    FaceImpl face = new FaceImpl ();
    XMLBeanInfo info = introspector.introspect (face);
    ElementDescriptor elementDescriptor = info.getElementDescriptor ();
    assertEquals (""Expected only itself"", 1, elementDescriptor.getElementDescriptors ().length);
    AttributeDescriptor [] attributeDescriptor = elementDescriptor.getAttributeDescriptors ();
    ElementDescriptor [] children = elementDescriptor.getElementDescriptors ();
    assertEquals (""Expected no attributes"", 0, attributeDescriptor.length);
    assertEquals (""Expected one elements"", 1, children.length);
    assertEquals (""Expected element"", ""name"", children [0].getLocalName ());
}
",238,265
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestXMLIntrospector.java,"
public Class normalize (Class clazz) {
    if (IFace.class.isAssignableFrom (clazz)) {
        return IFace.class;
    }
    return super.normalize (clazz);
}
",244,251
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestXMLIntrospector.java,"
public void testListedClassNormalizer () throws Exception {
    ListedClassNormalizer classNormalizer = new ListedClassNormalizer ();
    classNormalizer.addSubstitution (IFace.class);
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setClassNormalizer (classNormalizer);
    FaceImpl face = new FaceImpl ();
    XMLBeanInfo info = introspector.introspect (face);
    ElementDescriptor elementDescriptor = info.getElementDescriptor ();
    AttributeDescriptor [] attributeDescriptor = elementDescriptor.getAttributeDescriptors ();
    ElementDescriptor [] children = elementDescriptor.getElementDescriptors ();
    assertEquals (""Expected no attributes"", 0, attributeDescriptor.length);
    assertEquals (""Expected one elements"", 1, children.length);
    assertEquals (""Expected element"", ""name"", children [0].getLocalName ());
}
",267,284
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestXMLIntrospector.java,"
public void testListedClassNormalizerWrite () throws Exception {
    ListedClassNormalizer classNormalizer = new ListedClassNormalizer ();
    classNormalizer.addSubstitution (IFace.class);
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.getXMLIntrospector ().getConfiguration ().setClassNormalizer (classNormalizer);
    FaceImpl bean = new FaceImpl ();
    bean.setName (""Old Tom Cobbly"");
    writer.write (bean);
    String xml = ""<?xml version='1.0'?><IFace><name>Old Tom Cobbly</name></IFace>"";
    xmlAssertIsomorphicContent (parseString (out.getBuffer ().toString ()), parseString (xml), true);
}
",286,305
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestXMLIntrospector.java,"
public void testBetwixtFileType () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    XMLBeanInfo info = introspector.introspect (Channel.class);
    ElementDescriptor elementDescriptor = info.getElementDescriptor ();
    Class clazz = elementDescriptor.getSingularPropertyType ();
    assertEquals (""Element type correct"", Channel.class, clazz);
    assertEquals (""Element name correct"", ""rss"", elementDescriptor.getLocalName ());
}
",307,318
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestXMLIntrospector.java,"
public void testIgnoreAllBeanInfo () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setIgnoreAllBeanInfo (false);
    introspector.setRegistry (new NoCacheRegistry ());
    XMLBeanInfo info = introspector.introspect (BeanWithBeanInfoBean.class);
    ElementDescriptor [] elementDescriptors = info.getElementDescriptor ().getElementDescriptors ();
    if (""alpha"".equals (elementDescriptors [0].getPropertyName ())) {
        assertEquals (""Second element name"", ""gamma"", elementDescriptors [1].getPropertyName ());
    }
    else {
        assertEquals (""First element name"", ""gamma"", elementDescriptors [0].getPropertyName ());
        assertEquals (""Second element name"", ""alpha"", elementDescriptors [1].getPropertyName ());
    }
    introspector.getConfiguration ().setIgnoreAllBeanInfo (true);
    info = introspector.introspect (BeanWithBeanInfoBean.class);
    elementDescriptors = info.getElementDescriptor ().getElementDescriptors ();
    if (""alpha"".equals (elementDescriptors [0].getPropertyName ())) {
        assertEquals (""Second element name"", ""beta"", elementDescriptors [1].getPropertyName ());
    }
    else {
        assertEquals (""First element name"", ""beta"", elementDescriptors [0].getPropertyName ());
        assertEquals (""Second element name"", ""alpha"", elementDescriptors [1].getPropertyName ());
    }
}
",320,351
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/PhoneNumberBean.java,"
public PhoneNumberBean () {
}
",33,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/PhoneNumberBean.java,"
public PhoneNumberBean (String phoneNumber, String type) {
    setPhoneNumber (phoneNumber);
    setType (type);
}
",35,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/PhoneNumberBean.java,"
public String getPhoneNumber () {
    return phoneNumber;
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/PhoneNumberBean.java,"
public void setPhoneNumber (String string) {
    phoneNumber = string;
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/PhoneNumberBean.java,"
public String getType () {
    return type;
}
",52,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/PhoneNumberBean.java,"
public void setType (String string) {
    type = string;
}
",57,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/PhoneNumberBean.java,"
public String getName () {
    return name;
}
",62,65
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/PhoneNumberBean.java,"
public void setName (String string) {
    name = string;
}
",67,70
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/introspection/TestDynaBeanIntrospection.java,"
public void testSimpleIntrospectionTest () throws Exception {
    DynaProperty [] dynaProperties = {new DynaProperty (""one"", Integer.class), new DynaProperty (""two"", String.class)};
    BasicDynaClass dynaClass = new BasicDynaClass (""WibbleDynaBean"", BasicDynaBean.class, dynaProperties);
    DynaBean dynaBean = dynaClass.newInstance ();
    XMLIntrospector xmlIntrospector = new XMLIntrospector ();
    XMLBeanInfo xmlBeanInfo = xmlIntrospector.introspect (dynaBean);
    ElementDescriptor dynaBeanDescriptor = xmlBeanInfo.getElementDescriptor ();
    ElementDescriptor [] dynaPropertyDescriptors = dynaBeanDescriptor.getElementDescriptors ();
    assertEquals (""Two dyna properties expected"", 2, dynaPropertyDescriptors.length);
    for (int i = 0; i < 2; i ++) {
        if (""one"".equals (dynaPropertyDescriptors [i].getPropertyName ()) || ""two"".equals (dynaPropertyDescriptors [i].getPropertyName ())) {
            assertNotNull (""Property updater"", dynaPropertyDescriptors [1].getUpdater ());
        }
        else {
            fail (""Properties should be named one and two"");
        }
    }
}
",35,64
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedUpdatersBean.java,"
public MixedUpdatersBean () {
}
",41,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedUpdatersBean.java,"
public MixedUpdatersBean (String name) {
    setName (name);
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedUpdatersBean.java,"
public String getName () {
    return name;
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedUpdatersBean.java,"
public void setName (String name) {
    this.name = name;
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedUpdatersBean.java,"
public List getItems () {
    return items;
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedUpdatersBean.java,"
public void addItem (String item) {
    items.add (item);
}
",65,68
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedUpdatersBean.java,"
public String getBadName () {
    return badName;
}
",70,73
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedUpdatersBean.java,"
public void badNameSetter (String badName) {
    this.badName = badName;
}
",75,78
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedUpdatersBean.java,"
public List getBadItems () {
    return badItems;
}
",80,83
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedUpdatersBean.java,"
public void badItemAdder (String badItem) {
    badItems.add (badItem);
}
",85,88
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedUpdatersBean.java,"
public String getPrivateProperty () {
    return privateProperty;
}
",90,93
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedUpdatersBean.java,"
protected void setPrivateProperty (String privateProp) {
    this.privateProperty = privateProp;
}
",95,98
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedUpdatersBean.java,"
public void privatePropertyWorkaroundSetter (String privateProp) {
    this.privateProperty = privateProp;
}
",99,102
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedUpdatersBean.java,"
public List getPrivateItems () {
    return privateItems;
}
",104,107
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedUpdatersBean.java,"
private void addPrivateItem (String item) {
    privateItems.add (item);
}
",109,112
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestXmlToBean.java,"
public static Test suite () {
    return new TestSuite (TestXmlToBean.class);
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestXmlToBean.java,"
public TestXmlToBean (String testName) {
    super (testName);
}
",52,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestXmlToBean.java,"
public void testForceAccessibleSuper () throws Exception {
    XMLIntrospector xmlIntrospector = new XMLIntrospector ();
    XMLBeanInfo xmlBeanInfo = xmlIntrospector.introspect (MixedUpdatersBean.class);
    ElementDescriptor [] descriptors = xmlBeanInfo.getElementDescriptor ().getElementDescriptors ();
    boolean propertyFound = false;
    for (int i = 0; i < descriptors.length; i ++) {
        ElementDescriptor descriptor = descriptors [i];
        if (""private-super"".equals (descriptor.getLocalName ())) {
            propertyFound = true;
            assertNotNull (""Updater found"", descriptor.getUpdater ());
            assertNotNull (""Expression found"", descriptor.getTextExpression ());
        }
    }
    assertTrue (""Found inaccessible super methods"", propertyFound);
}
",59,76
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestXmlToBean.java,"
public void testCustomUpdaters () throws Exception {
    MixedUpdatersBean bean = new MixedUpdatersBean (""Lov"");
    bean.badNameSetter (""Hate"");
    bean.addItem (""White"");
    bean.badItemAdder (""Black"");
    bean.addItem (""Life"");
    bean.badItemAdder (""Death"");
    bean.privatePropertyWorkaroundSetter (""Private"");
    bean.getPrivateItems ().add (""private item 1"");
    bean.privateField = 100;
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (bean);
    String xml = ""<?xml version='1.0'?><mixed><name>Lov</name><bad-name>Hate</bad-name>"" + ""<items><item>White</item><item>Life</item></items>"" + ""<bad-items><bad-item>Black</bad-item><bad-item>Death</bad-item></bad-items>"" + ""<private-property>Private</private-property>"" + ""<private-items><private-item>private item 1</private-item></private-items>"" + ""<private-super>100</private-super>"" + ""</mixed>"";
    xmlAssertIsomorphicContent (parseString (xml), parseString (out.toString ()), true);
    BeanReader reader = new BeanReader ();
    reader.getBindingConfiguration ().setMapIDs (false);
    reader.registerBeanClass (""mixed"", MixedUpdatersBean.class);
    bean = (MixedUpdatersBean) reader.parse (new StringReader (xml));
    assertEquals (""Name incorrect"", ""Lov"", bean.getName ());
    assertEquals (""BadName incorrect"", ""Hate"", bean.getBadName ());
    List items = bean.getItems ();
    assertEquals (""Wrong number of items"", 2, items.size ());
    assertEquals (""Item one wrong"", ""White"", items.get (0));
    assertEquals (""Item two wrong"", ""Life"", items.get (1));
    List badItems = bean.getBadItems ();
    assertEquals (""Wrong number of bad items"", 2, badItems.size ());
    assertEquals (""Private property incorrect"", ""Private"", bean.getPrivateProperty ());
    List privateItems = bean.getPrivateItems ();
    assertEquals (""Wrong number of private items"", 1, privateItems.size ());
    assertEquals (""Private property accessed on super"", 100, bean.privateField);
}
",78,135
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestXmlToBean.java,"
public void testMixedContent () throws Exception {
    StringReader xml = new StringReader (""<?xml version='1.0' encoding='UTF-8'?><deep-thought alpha='Life' gamma='42'>"" + ""The Universe And Everything</deep-thought>"");
    BeanReader reader = new BeanReader ();
    reader.registerBeanClass (MixedContentOne.class);
    Object resultObject = reader.parse (xml);
    assertEquals (""Object is MixedContentOne"", true, resultObject instanceof MixedContentOne);
    MixedContentOne result = (MixedContentOne) resultObject;
    assertEquals (""Property Alpha matches"", ""Life"", result.getAlpha ());
    assertEquals (""Property Beta matches"", ""The Universe And Everything"", result.getBeta ());
    assertEquals (""Property Gamma matches"", 42, result.getGamma ());
}
",139,154
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestXmlToBean.java,"
public void _testBasicInterfaceImpl () throws Exception {
    ExampleBean bean = new ExampleBean (""Alice"");
    bean.addExample (new ExampleImpl (1, ""Mad Hatter""));
    bean.addExample (new ExampleImpl (2, ""March Hare""));
    bean.addExample (new ExampleImpl (3, ""Dormouse""));
    String xml = ""<?xml version='1.0' encoding='UTF-8'?>"" + ""<example-bean><name>Alice</name>"" + ""<example><id>1</id><name>Mad Hatter</name></example>"" + ""<example><id>2</id><name>March Hare</name></example>"" + ""<example><id>3</id><name>Dormouse</name></example>"" + ""</example-bean>"";
    BeanReader reader = new BeanReader ();
    reader.getXMLIntrospector ().getConfiguration ().setElementNameMapper (new HyphenatedNameMapper ());
    reader.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (false);
    reader.registerBeanClass (ExampleBean.class);
    StringReader in = new StringReader (xml);
    ExampleBean out = (ExampleBean) reader.parse (in);
    assertEquals (""Interface read failed"", bean, out);
}
",158,183
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedCollectionBean.java,"
public Collection getGubbins () {
    return gubbins;
}
",30,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestBeanToXml.java,"
public static Test suite () {
    return new TestSuite (TestBeanToXml.class);
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestBeanToXml.java,"
public TestBeanToXml (String testName) {
    super (testName);
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestBeanToXml.java,"
public void testOne () throws Exception {
    xmlAssertIsomorphicContent (parseFile (""src/test/org/apache/commons/betwixt/dotbetwixt/rbean-result.xml""), parseFile (""src/test/org/apache/commons/betwixt/dotbetwixt/rbean-result.xml""));
}
",55,61
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestBeanToXml.java,"
public void testSimpleBean () throws Exception {
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0' encoding='UTF-8'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.getBindingConfiguration ().setMapIDs (false);
    SimpleTestBean bean = new SimpleTestBean (""alpha-value"", ""beta-value"", ""gamma-value"");
    writer.write (bean);
    out.flush ();
    String xml = out.toString ();
    xmlAssertIsomorphicContent (parseFile (""src/test/org/apache/commons/betwixt/dotbetwixt/simpletestone.xml""), parseString (xml));
}
",63,86
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestBeanToXml.java,"
public void testWriteRecursiveBean () throws Exception {
}
",88,114
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestBeanToXml.java,"
public void testBadDotBetwixtNames () throws Exception {
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0' encoding='UTF-8'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.write (new BadDotBetwixtNamesBean (""one"", ""two""));
    parseString (out.toString ());
}
",119,133
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestBeanToXml.java,"
public void testMixedContent () throws Exception {
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0' encoding='UTF-8'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (new MixedContentBean (""First"", ""Last"", ""Always""));
    String xml = ""<?xml version='1.0' encoding='UTF-8'?><foo version='1.0'>"" + ""<bar version='First'>Fiddle sticks<baa>Last</baa>Always</bar></foo>"";
    xmlAssertIsomorphicContent (parseString (xml), parseString (out.toString ()));
}
",136,150
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestBeanToXml.java,"
public void testSimpleMixedContent () throws Exception {
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0' encoding='UTF-8'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (new MixedContentOne (""Life,"", ""The Universe And Everything"", 42));
    String xml = ""<?xml version='1.0' encoding='UTF-8'?><deep-thought alpha='Life,' gamma='42'>"" + ""The Universe And Everything</deep-thought>"";
    xmlAssertIsomorphicContent (parseString (xml), parseString (out.toString ()));
}
",153,167
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestBeanToXml.java,"
public void testBasicInterfaceImpl () throws Exception {
    ExampleBean bean = new ExampleBean (""Alice"");
    bean.addExample (new ExampleImpl (1, ""Mad Hatter""));
    bean.addExample (new ExampleImpl (2, ""March Hare""));
    bean.addExample (new ExampleImpl (3, ""Dormouse""));
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0' encoding='UTF-8'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.getXMLIntrospector ().getConfiguration ().setElementNameMapper (new HyphenatedNameMapper ());
    writer.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (false);
    writer.write (bean);
    String xml = ""<?xml version='1.0' encoding='UTF-8'?>"" + ""<example-bean><name>Alice</name>"" + ""<example><id>1</id><name>Mad Hatter</name></example>"" + ""<example><id>2</id><name>March Hare</name></example>"" + ""<example><id>3</id><name>Dormouse</name></example>"" + ""</example-bean>"";
    xmlAssertIsomorphicContent (parseString (xml), parseString (out.toString ()), true);
}
",170,198
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/Father.java,"
public String getSpouse () {
    return spouse;
}
",33,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/Father.java,"
public void setSpouse (String spouse) {
    this.spouse = spouse;
}
",38,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/Father.java,"
public List getKids () {
    return kids;
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/Father.java,"
public void addKid (String kid) {
    if (this.kids == null) {
        this.kids = new ArrayList ();
    }
    this.kids.add (kid);
}
",48,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestIntrospection.java,"
public static Test suite () {
    return new TestSuite (TestIntrospection.class);
}
",38,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestIntrospection.java,"
public TestIntrospection (String testName) {
    super (testName);
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestIntrospection.java,"
public void testClassAttribute () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    XMLBeanInfo beanInfo = introspector.introspect (ExampleBean.class);
    ElementDescriptor [] elementDescriptors = beanInfo.getElementDescriptor ().getElementDescriptors ();
    ElementDescriptor elementsElementDescriptor = null;
    for (int i = 0, size = elementDescriptors.length; i < size; i ++) {
        if (""example"".equals (elementDescriptors [i].getLocalName ())) {
            elementsElementDescriptor = elementDescriptors [i];
        }
    }
    assertNotNull (""Element descriptor for elements not found"", elementsElementDescriptor);
    assertEquals (""Class property not set"", ExampleImpl.class, elementsElementDescriptor.getImplementationClass ());
}
",52,75
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestCustomDotBetwixt.java,"
public TestCustomDotBetwixt (String testName) {
    super (testName);
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestCustomDotBetwixt.java,"
public void testIntrospectWithCustomDotBetwixt () throws Exception {
    StringReader reader = new StringReader (""<?xml version='1.0' ?>"" + ""<info>"" + ""    <element name='jelly'>"" + ""        <element name='wibble' property='alpha'/>"" + ""        <element name='wobble' property='beta'/>"" + ""    </element>"" + ""</info>"");
    XMLIntrospector introspector = new XMLIntrospector ();
    XMLBeanInfo xmlBeanInfo = introspector.introspect (SimpleTestBean.class, new InputSource (reader));
    ElementDescriptor elementDescriptor = xmlBeanInfo.getElementDescriptor ();
    assertEquals (""Root is jelly"", ""jelly"", elementDescriptor.getLocalName ());
    ElementDescriptor [] childDescriptors = elementDescriptor.getElementDescriptors ();
    assertEquals (""Expected two child elements"", 2, childDescriptors.length);
    assertEquals (""Wibble comes first"", ""wibble"", childDescriptors [0].getLocalName ());
    assertEquals (""Wobble comes last"", ""wobble"", childDescriptors [1].getLocalName ());
    reader = new StringReader (""<?xml version='1.0' ?>"" + ""<info>"" + ""    <element name='not-jelly'>"" + ""        <element name='no-wibble' property='alpha'/>"" + ""        <element name='no-wobble' property='beta'/>"" + ""    </element>"" + ""</info>"");
    xmlBeanInfo = introspector.introspect (SimpleTestBean.class, new InputSource (reader));
    elementDescriptor = xmlBeanInfo.getElementDescriptor ();
    assertEquals (""Root is not-jelly"", ""not-jelly"", elementDescriptor.getLocalName ());
    childDescriptors = elementDescriptor.getElementDescriptors ();
    assertEquals (""Expected two child elements"", 2, childDescriptors.length);
    assertEquals (""No wibble comes first"", ""no-wibble"", childDescriptors [0].getLocalName ());
    assertEquals (""No wobble comes last"", ""no-wobble"", childDescriptors [1].getLocalName ());
}
",41,78
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestCustomDotBetwixt.java,"
public void testRegisterCustomDotBetwixt () throws Exception {
    StringReader reader = new StringReader (""<?xml version='1.0' ?>"" + ""<info>"" + ""    <element name='jelly'>"" + ""        <element name='wibble' property='alpha'/>"" + ""        <element name='wobble' property='beta'/>"" + ""    </element>"" + ""</info>"");
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.register (SimpleTestBean.class, new InputSource (reader));
    XMLBeanInfo xmlBeanInfo = introspector.introspect (SimpleTestBean.class);
    ElementDescriptor elementDescriptor = xmlBeanInfo.getElementDescriptor ();
    assertEquals (""Root is jelly"", ""jelly"", elementDescriptor.getLocalName ());
    ElementDescriptor [] childDescriptors = elementDescriptor.getElementDescriptors ();
    assertEquals (""Expected two child elements"", 2, childDescriptors.length);
    assertEquals (""Wibble comes first"", ""wibble"", childDescriptors [0].getLocalName ());
    assertEquals (""Wobble comes last"", ""wobble"", childDescriptors [1].getLocalName ());
}
",81,101
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestCustomDotBetwixt.java,"
public void testWriteCustomDotBetwixt () throws Exception {
    StringReader reader = new StringReader (""<?xml version='1.0' ?>"" + ""<info>"" + ""    <element name='jelly'>"" + ""        <element name='wibble' property='alpha'/>"" + ""        <element name='wobble' property='beta'/>"" + ""    </element>"" + ""</info>"");
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    SimpleTestBean bean = new SimpleTestBean (""one"", ""two"", ""three"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (bean, new InputSource (reader));
    String expected = ""<?xml version='1.0'?>"" + ""<jelly><wibble>one</wibble><wobble>two</wobble></jelly>"";
    xmlAssertIsomorphic (parseString (expected), parseString (out));
}
",103,125
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestCustomDotBetwixt.java,"
public void testReadCustomDotBetwixt () throws Exception {
    String xml = ""<?xml version='1.0'?>"" + ""<jelly><wibble>one</wibble><wobble>two</wobble></jelly>"";
    StringReader in = new StringReader (xml);
    StringReader dotBetwixt = new StringReader (""<?xml version='1.0' ?>"" + ""<info>"" + ""    <element name='jelly'>"" + ""        <element name='wibble' property='alpha'/>"" + ""        <element name='wobble' property='beta'/>"" + ""    </element>"" + ""</info>"");
    BeanReader reader = new BeanReader ();
    reader.getBindingConfiguration ().setMapIDs (false);
    reader.registerBeanClass (new InputSource (dotBetwixt), SimpleTestBean.class);
    SimpleTestBean bean = (SimpleTestBean) reader.parse (in);
    assertNotNull (""Bean not mapped"", bean);
    assertEquals (""Property alpha mapping"", ""one"", bean.getAlpha ());
    assertEquals (""Property beta mapping"", ""two"", bean.getBeta ());
}
",128,150
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/ExampleImpl.java,"
public ExampleImpl () {
}
",30,30
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/ExampleImpl.java,"
public ExampleImpl (int id, String name) {
    setId (id);
    setName (name);
}
",31,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/ExampleImpl.java,"
public int getId () {
    return id;
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/ExampleImpl.java,"
public void setId (int id) {
    this.id = id;
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/ExampleImpl.java,"
public String getName () {
    return name;
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/ExampleImpl.java,"
public void setName (String name) {
    this.name = name;
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/ExampleImpl.java,"
public String toString () {
    return ""["" + this.getClass ().getName () + "": id="" + id + "", name="" + name + ""]"";
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/ExampleImpl.java,"
public boolean equals (Object obj) {
    if (obj == null) return false;
    return this.hashCode () == obj.hashCode ();
}
",61,65
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/ExampleImpl.java,"
public int hashCode () {
    return toString ().hashCode ();
}
",67,70
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestDotBetwixtNamespace.java,"
public TestDotBetwixtNamespace (String name) {
    super (name);
}
",33,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestDotBetwixtNamespace.java,"
public void testWriteSimpleDotBetwixtWithNamespaces () throws Exception {
    PersonWithNamespace bean = new PersonWithNamespace (""Robert"", ""Burrell"", ""Donkin"");
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.getXMLIntrospector ().getConfiguration ().getPrefixMapper ().setPrefix (""http://jakarta.apache.org/commons/betwixt/PersonWithNamespaceExample"", ""pn"");
    writer.write (bean);
    String xml = out.getBuffer ().toString ();
    String expected = ""<?xml version='1.0'?>"" + ""<pn:person "" + ""xmlns:pn='http://jakarta.apache.org/commons/betwixt/PersonWithNamespaceExample' "" + ""pn:middle='Burrell'>"" + ""<forename>Robert</forename>"" + ""<pn:surname>Donkin</pn:surname></pn:person>"";
    xmlAssertIsomorphicContent (parseString (xml), parseString (expected));
}
",39,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedContentOne.java,"
public MixedContentOne (String alpha, String beta, int gamma) {
    setAlpha (alpha);
    setBeta (beta);
    setGamma (gamma);
}
",35,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedContentOne.java,"
public MixedContentOne () {
}
",42,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedContentOne.java,"
public String getAlpha () {
    return alpha;
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedContentOne.java,"
public void setAlpha (String alpha) {
    this.alpha = alpha;
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedContentOne.java,"
public String getBeta () {
    return beta;
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedContentOne.java,"
public void setBeta (String beta) {
    this.beta = beta;
}
",61,64
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedContentOne.java,"
public int getGamma () {
    return gamma;
}
",66,69
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedContentOne.java,"
public void setGamma (int gamma) {
    this.gamma = gamma;
}
",71,74
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/Book.java,"
public String getAuthor () {
    return author;
}
",33,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/Book.java,"
public String getISBN () {
    return ISBN;
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/Book.java,"
public String getTitle () {
    return title;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/Book.java,"
public void setAuthor (String string) {
    author = string;
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/Book.java,"
public void setISBN (String string) {
    ISBN = string;
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/Book.java,"
public void setTitle (String string) {
    title = string;
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/PersonWithNamespace.java,"
public PersonWithNamespace () {
}
",32,32
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/PersonWithNamespace.java,"
public PersonWithNamespace (String forename, String middlename, String lastname) {
    setForename (forename);
    setMiddlename (middlename);
    setLastname (lastname);
}
",34,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/PersonWithNamespace.java,"
public String getForename () {
    return forename;
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/PersonWithNamespace.java,"
public String getLastname () {
    return lastname;
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/PersonWithNamespace.java,"
public String getMiddlename () {
    return middlename;
}
",54,57
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/PersonWithNamespace.java,"
public void setForename (String string) {
    forename = string;
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/PersonWithNamespace.java,"
public void setLastname (String string) {
    lastname = string;
}
",65,68
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/PersonWithNamespace.java,"
public void setMiddlename (String string) {
    middlename = string;
}
",70,73
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestMixedCollections.java,"
public TestMixedCollections (String testName) {
    super (testName);
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestMixedCollections.java,"
public void testNoNameIntrospection () throws Exception {
    XMLIntrospector xmlIntrospector = new XMLIntrospector ();
    xmlIntrospector.getConfiguration ().setWrapCollectionsInElement (false);
    XMLBeanInfo xmlBeanInfo = xmlIntrospector.introspect (MixedCollectionBean.class);
    ElementDescriptor elementDescriptor = xmlBeanInfo.getElementDescriptor ();
    ElementDescriptor [] childDescriptors = elementDescriptor.getElementDescriptors ();
    assertEquals (""One child"", 1, childDescriptors.length);
    assertNull (""Expected null name"", childDescriptors [0].getLocalName ());
}
",39,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestMixedCollections.java,"
public void testNoNameWrite () throws Exception {
    MixedCollectionBean bean = new MixedCollectionBean ();
    bean.getGubbins ().add (new String (""Blake""));
    bean.getGubbins ().add (new Integer (7));
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (bean);
    String expected = ""<?xml version='1.0'?>"" + ""<stuff><String>Blake</String><Integer>7</Integer></stuff>"";
    xmlAssertIsomorphic (parseString (expected), parseString (out));
}
",51,66
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/IgnoreBean.java,"
public String getAlpha () {
    return alpha;
}
",31,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/IgnoreBean.java,"
public void setAlpha (String string) {
    alpha = string;
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/IgnoreBean.java,"
public String getBeta () {
    return beta;
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/IgnoreBean.java,"
public void setBeta (String string) {
    beta = string;
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MapBean.java,"
public Map getValues () {
    return ids;
}
",29,32
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MapBean.java,"
public void addValue (String key, Integer value) {
    this.ids.put (key, value);
}
",33,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedContentBean.java,"
public MixedContentBean (String alpha, String beta, String gamma) {
    setAlpha (alpha);
    setBeta (beta);
    setGamma (gamma);
}
",34,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedContentBean.java,"
public MixedContentBean () {
}
",41,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedContentBean.java,"
public String getAlpha () {
    return alpha;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedContentBean.java,"
public void setAlpha (String alpha) {
    this.alpha = alpha;
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedContentBean.java,"
public String getBeta () {
    return beta;
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedContentBean.java,"
public void setBeta (String beta) {
    this.beta = beta;
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedContentBean.java,"
public String getGamma () {
    return gamma;
}
",65,68
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MixedContentBean.java,"
public void setGamma (String gamma) {
    this.gamma = gamma;
}
",70,73
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestLoopType.java,"
public void testSimpleList () throws Exception {
    Father father = new Father ();
    father.setSpouse (""Julie"");
    father.addKid (""John"");
    father.addKid (""Jane"");
    StringWriter outputWriter = new StringWriter ();
    outputWriter.write (""<?xml version='1.0' ?>\n"");
    BeanWriter beanWriter = new BeanWriter (outputWriter);
    beanWriter.setEndOfLine (""\n"");
    beanWriter.enablePrettyPrint ();
    beanWriter.getBindingConfiguration ().setMapIDs (true);
    beanWriter.write (father);
    BeanReader beanReader = new BeanReader ();
    beanReader.registerBeanClass (Father.class);
    StringReader xmlReader = new StringReader (outputWriter.toString ());
    Father result = (Father) beanReader.parse (xmlReader);
    assertNotNull (""Unexpected null list of children!"", result.getKids ());
    assertEquals (""got wrong number of children"", father.getKids ().size (), result.getKids ().size ());
    assertNull (""Spouse should not get set because it is not in the .betwixt file"", result.getSpouse ());
}
",39,72
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestLoopType.java,"
public void testIgnoredProperty () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    XMLBeanInfo beanInfo = introspector.introspect (IgnoreBean.class);
    ElementDescriptor ignoreDescriptor = beanInfo.getElementDescriptor ();
    assertEquals (""element name matches"", ""ignore"", ignoreDescriptor.getLocalName ());
    ElementDescriptor [] childDescriptors = ignoreDescriptor.getElementDescriptors ();
    assertEquals (""number of child elements"", 1, childDescriptors.length);
}
",74,84
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestLoopType.java,"
public void testIgnoredAdders () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    XMLBeanInfo beanInfo = introspector.introspect (IgnoreAddersBean.class);
    ElementDescriptor ignoreDescriptor = beanInfo.getElementDescriptor ();
    assertEquals (""element name matches"", ""ignore"", ignoreDescriptor.getLocalName ());
    ElementDescriptor [] childDescriptors = ignoreDescriptor.getElementDescriptors ();
    assertEquals (""number of child elements"", 2, childDescriptors.length);
    for (int i = 0; i < childDescriptors.length; i ++) {
        ElementDescriptor descriptor = childDescriptors [i];
        if (descriptor.getLocalName ().equals (""gammas"")) {
            assertNull (""Expected descriptor to be null since adders must be explicitly listed."", descriptor.getUpdater ());
        }
        else {
            assertEquals (""alpha"", descriptor.getLocalName ());
        }
    }
    AttributeDescriptor [] attributes = ignoreDescriptor.getAttributeDescriptors ();
    assertEquals (1, attributes.length);
    assertEquals (""beta"", attributes [0].getLocalName ());
}
",90,115
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestLoopType.java,"
public void _testAddDefaults () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    XMLBeanInfo beanInfo = introspector.introspect (LibraryBean.class);
    ElementDescriptor libraryDescriptor = beanInfo.getElementDescriptor ();
    AttributeDescriptor [] libraryAttributeDescriptors = libraryDescriptor.getAttributeDescriptors ();
    assertEquals (""Only one attribute"", 1, libraryAttributeDescriptors.length);
    ElementDescriptor [] libraryElementDescriptors = libraryDescriptor.getElementDescriptors ();
    assertEquals (""Only one element"", 1, libraryElementDescriptors.length);
}
",118,131
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/SimpleTestBean.java,"
public SimpleTestBean () {
}
",35,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/SimpleTestBean.java,"
public SimpleTestBean (String alpha, String beta, String gamma) {
    setAlpha (alpha);
    setBeta (beta);
    setGamma (gamma);
}
",37,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/SimpleTestBean.java,"
public String getAlpha () {
    return alpha;
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/SimpleTestBean.java,"
public void setAlpha (String alpha) {
    this.alpha = alpha;
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/SimpleTestBean.java,"
public String getBeta () {
    return beta;
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/SimpleTestBean.java,"
public void setBeta (String beta) {
    this.beta = beta;
}
",61,64
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/SimpleTestBean.java,"
public String getGamma () {
    return gamma;
}
",66,69
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/SimpleTestBean.java,"
public void setGamma (String gamma) {
    this.gamma = gamma;
}
",71,74
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestMsgParser.java,"
protected void setUp () throws Exception {
    msg = new MsgBean ();
    msg.setDescription (""Some simple descriptive text"");
    msg.setToAddress (""mike@somewhere.com"");
    msg.setFromAddress (""debbie@somwhere.com"");
    msg.setName (""basicMsg"");
    msg.setOptionalField1 (""7-12-99"");
    msg.setOptionalField2 (""true"");
    msg.setStatus (""sent"");
    msg.setType (""spam"");
}
",42,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestMsgParser.java,"
public void testGetAsXml () throws Exception {
    String xmlMsg = null;
    xmlMsg = getAsXml (msg);
    assertNotNull (""XML String should not be null"", xmlMsg);
}
",55,61
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestMsgParser.java,"
public void testParseMsg () throws Exception {
    MsgBean newMsg = null;
    String xmlMsg = getAsXml (msg);
    newMsg = parseMsg (xmlMsg);
    assertNotNull (""new MsgBean should not be null."", newMsg);
    assertEquals (msg.getDescription (), newMsg.getDescription ());
    assertEquals (msg.getFromAddress (), newMsg.getFromAddress ());
    assertEquals (msg.getName (), newMsg.getName ());
    assertEquals (msg.getOptionalField1 (), newMsg.getOptionalField1 ());
    assertEquals (msg.getOptionalField2 (), newMsg.getOptionalField2 ());
    assertEquals (msg.getStatus (), newMsg.getStatus ());
    assertEquals (msg.getToAddress (), newMsg.getToAddress ());
    assertEquals (msg.getType (), newMsg.getType ());
}
",63,79
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestMsgParser.java,"
public static final String getAsXml (MsgBean msg) throws Exception {
    StringWriter writer = new StringWriter ();
    writer.write (XML_PROLOG);
    BeanWriter beanWriter = new BeanWriter (writer);
    beanWriter.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    beanWriter.getBindingConfiguration ().setMapIDs (false);
    beanWriter.setEndOfLine (""\n"");
    beanWriter.enablePrettyPrint ();
    beanWriter.write (""message"", msg);
    beanWriter.flush ();
    return writer.toString ();
}
",88,112
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestMsgParser.java,"
public static final MsgBean parseMsg (String xmlMessage) throws Exception {
    MsgBean msg = null;
    BeanReader beanReader = new BeanReader ();
    beanReader.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    beanReader.registerBeanClass (""message"", MsgBean.class);
    StringReader stringReader = new StringReader (xmlMessage);
    return (MsgBean) beanReader.parse (stringReader);
}
",121,132
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestMap.java,"
public void testMapWithDotBetwixtFile () throws Exception {
    MapBean map = new MapBean ();
    String key = ""one"";
    map.addValue (key, new Integer (1));
    StringWriter outputWriter = new StringWriter ();
    outputWriter.write (""<?xml version='1.0' ?>\n"");
    BeanWriter beanWriter = new BeanWriter (outputWriter);
    beanWriter.setEndOfLine (""\n"");
    beanWriter.enablePrettyPrint ();
    beanWriter.getBindingConfiguration ().setMapIDs (true);
    beanWriter.write (map);
    BeanReader beanReader = new BeanReader ();
    beanReader.registerBeanClass (MapBean.class);
    StringReader xmlReader = new StringReader (outputWriter.toString ());
    MapBean result = (MapBean) beanReader.parse (xmlReader);
    assertNotNull (""Should have deserialized a MapBean but got null."", result);
    assertEquals (""Should have gotten the same value back from the Map after deserializing that was put in."", map.getValues ().get (key), result.getValues ().get (key));
}
",35,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/PrivateMethodsBean.java,"
public int getSuperPrivate () {
    return privateField;
}
",24,27
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/PrivateMethodsBean.java,"
protected void setSuperPrivate (int privateField) {
    this.privateField = privateField;
}
",29,32
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MsgBean.java,"
public MsgBean () {
    super ();
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MsgBean.java,"
public String getFromAddress () {
    return fromAddress;
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MsgBean.java,"
public void setFromAddress (String fromAddress) {
    this.fromAddress = fromAddress;
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MsgBean.java,"
public String getName () {
    return name;
}
",64,67
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MsgBean.java,"
public void setName (String name) {
    this.name = name;
}
",72,75
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MsgBean.java,"
public String getStatus () {
    return status;
}
",80,83
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MsgBean.java,"
public void setStatus (String status) {
    this.status = status;
}
",88,91
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MsgBean.java,"
public String getToAddress () {
    return toAddress;
}
",96,99
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MsgBean.java,"
public void setToAddress (String toAddress) {
    this.toAddress = toAddress;
}
",104,107
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MsgBean.java,"
public String getType () {
    return type;
}
",112,115
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MsgBean.java,"
public void setType (String type) {
    this.type = type;
}
",120,123
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MsgBean.java,"
public String getDescription () {
    return description;
}
",128,131
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MsgBean.java,"
public void setDescription (String description) {
    this.description = description;
}
",136,139
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MsgBean.java,"
public String getOptionalField1 () {
    return optionalField1;
}
",144,147
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MsgBean.java,"
public void setOptionalField1 (String optionalField1) {
    this.optionalField1 = optionalField1;
}
",152,155
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MsgBean.java,"
public String getOptionalField2 () {
    return optionalField2;
}
",160,163
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/MsgBean.java,"
public void setOptionalField2 (String optionalField2) {
    this.optionalField2 = optionalField2;
}
",168,171
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestMultiMap.java,"
public TestMultiMap (String testName) {
    super (testName);
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/TestMultiMap.java,"
public void testRegisterMultiMapping () throws Exception {
    XMLIntrospector xmlIntrospector = new XMLIntrospector ();
    Class [] mapped = xmlIntrospector.register (new InputSource (new StringReader (MAPPING)));
    assertEquals (""Mapped classes"", 3, mapped.length);
    XMLBeanInfo beanInfo = xmlIntrospector.introspect (AddressBean.class);
    assertNotNull (""Bean info mapping"", beanInfo);
    ElementDescriptor descriptor = beanInfo.getElementDescriptor ();
    assertEquals (""Root element name"", ""not-address"", descriptor.getLocalName ());
    ElementDescriptor [] childDescriptors = descriptor.getElementDescriptors ();
    assertEquals (""4 child elements"", 4, childDescriptors.length);
    assertEquals (""First element"", ""not-street"", childDescriptors [0].getLocalName ());
    assertEquals (""Second element"", ""not-city"", childDescriptors [1].getLocalName ());
    assertEquals (""Third element"", ""not-code"", childDescriptors [2].getLocalName ());
    assertEquals (""Forth element"", ""not-country"", childDescriptors [3].getLocalName ());
    beanInfo = xmlIntrospector.introspect (SimpleTestBean.class);
    assertNotNull (""Bean info mapping"", beanInfo);
    descriptor = beanInfo.getElementDescriptor ();
    assertEquals (""Root element name"", ""jelly"", descriptor.getLocalName ());
    childDescriptors = descriptor.getElementDescriptors ();
    assertEquals (""Child elements"", 2, childDescriptors.length);
    assertEquals (""First element"", ""wibble"", childDescriptors [0].getLocalName ());
    assertEquals (""Second element"", ""wobble"", childDescriptors [1].getLocalName ());
}
",64,91
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/ExampleBean.java,"
public ExampleBean () {
}
",33,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/ExampleBean.java,"
public ExampleBean (String name) {
    setName (name);
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/ExampleBean.java,"
public String getName () {
    return name;
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/ExampleBean.java,"
public void setName (String name) {
    this.name = name;
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/ExampleBean.java,"
public List getExamples () {
    return examples;
}
",49,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/ExampleBean.java,"
public void addExample (IExample example) {
    examples.add (example);
}
",54,57
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/ExampleBean.java,"
public String toString () {
    return ""["" + this.getClass ().getName () + "": name="" + name + "", examples="" + examples + ""]"";
}
",60,64
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/ExampleBean.java,"
public boolean equals (Object obj) {
    if (obj == null) return false;
    return this.hashCode () == obj.hashCode ();
}
",66,70
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/ExampleBean.java,"
public int hashCode () {
    return toString ().hashCode ();
}
",72,75
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/IgnoreAddersBean.java,"
public String getAlpha () {
    return alpha;
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/IgnoreAddersBean.java,"
public void setAlpha (String string) {
    alpha = string;
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/IgnoreAddersBean.java,"
public String getBeta () {
    return beta;
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/IgnoreAddersBean.java,"
public void setBeta (String string) {
    beta = string;
}
",49,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/IgnoreAddersBean.java,"
public ArrayList getGammas () {
    return gammas;
}
",54,57
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/IgnoreAddersBean.java,"
public void addGamma (String gamma) {
    gammas.add (gamma);
}
",59,62
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/BadDotBetwixtNamesBean.java,"
public BadDotBetwixtNamesBean () {
}
",32,32
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/BadDotBetwixtNamesBean.java,"
public BadDotBetwixtNamesBean (String alpha, String beta) {
    setAlpha (alpha);
    setBeta (beta);
}
",34,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/BadDotBetwixtNamesBean.java,"
public String getAlpha () {
    return alpha;
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/BadDotBetwixtNamesBean.java,"
public void setAlpha (String alpha) {
    this.alpha = alpha;
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/BadDotBetwixtNamesBean.java,"
public String getBeta () {
    return beta;
}
",52,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/BadDotBetwixtNamesBean.java,"
public void setBeta (String beta) {
    this.beta = beta;
}
",57,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/RecursiveBean.java,"
public RecursiveBean () {
}
",34,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/RecursiveBean.java,"
public RecursiveBean (String name) {
    setName (name);
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/RecursiveBean.java,"
public RecursiveBean (String name, RecursiveBean bean) {
    setName (name);
    setChild (bean);
}
",41,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/RecursiveBean.java,"
public String getName () {
    return name;
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/RecursiveBean.java,"
public void setName (String name) {
    this.name = name;
}
",53,56
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/RecursiveBean.java,"
public RecursiveBean getChild () {
    return child;
}
",58,61
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/RecursiveBean.java,"
public void setChild (RecursiveBean child) {
    this.child = child;
}
",63,66
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/LibraryBean.java,"
public String getName () {
    return name;
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/LibraryBean.java,"
public void setName (String string) {
    name = string;
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/LibraryBean.java,"
public Iterator getBooks () {
    return books.iterator ();
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/dotbetwixt/LibraryBean.java,"
public void addBook (Book book) {
    books.add (book);
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/registry/TestRegistryPolymorphicResolution.java,"
public Iterator getElements () {
    return _elements.iterator ();
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/registry/TestRegistryPolymorphicResolution.java,"
public void addElement (Element element) {
    _elements.add (element);
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/registry/TestRegistryPolymorphicResolution.java,"
public void testRegisterThenResolve () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.register (new InputSource (new StringReader (MAPPING)));
    ElementDescriptor descriptor = introspector.introspect (Element.class).getElementDescriptor ();
    ElementMapping elementMapping = new ElementMapping ();
    elementMapping.setAttributes (new AttributesImpl ());
    elementMapping.setName (""Bogus"");
    elementMapping.setDescriptor (descriptor);
    elementMapping.setType (Iterator.class);
    ReadContext readContext = new ReadContext (new BindingConfiguration (), new ReadConfiguration ());
    assertNull (introspector.getPolymorphicReferenceResolver ().resolveType (elementMapping, readContext));
    elementMapping.setName (""elementA"");
    Class resolution = introspector.getPolymorphicReferenceResolver ().resolveType (elementMapping, readContext);
    assertEquals (""Should resolve to the element about"", ElementA.class, resolution);
}
",83,102
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/registry/TestXMLBeanInfoRegistry.java,"
public static void main (String [] args) {
    TestRunner.run (suite ());
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/registry/TestXMLBeanInfoRegistry.java,"
public static Test suite () {
    return new TestSuite (TestXMLBeanInfoRegistry.class);
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/registry/TestXMLBeanInfoRegistry.java,"
public TestXMLBeanInfoRegistry (String testName) {
    super (testName);
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/registry/TestXMLBeanInfoRegistry.java,"
public void testNoCache () throws Exception {
    XMLBeanInfoRegistry registry = new NoCacheRegistry ();
    XMLBeanInfo xbi = new XMLBeanInfo (Long.class);
    assertNull (""No cache XML register (1)"", registry.get (Long.class));
    registry.put (Long.class, xbi);
    assertNull (""No cache XML register (2)"", registry.get (Long.class));
}
",49,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/registry/TestXMLBeanInfoRegistry.java,"
public void testDefault () throws Exception {
    XMLBeanInfoRegistry registry = new DefaultXMLBeanInfoRegistry ();
    XMLBeanInfo xbi = new XMLBeanInfo (Long.class);
    assertNull (""Default XML register (1)"", registry.get (Long.class));
    registry.put (Long.class, xbi);
    assertEquals (""Default XML register (2)"", xbi, registry.get (Long.class));
}
",62,74
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/BookBean.java,"
public BookBean () {
}
",31,31
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/BookBean.java,"
public BookBean (String author, String title, String publisher) {
    setAuthor (author);
    setTitle (title);
    setPublisher (publisher);
}
",33,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/BookBean.java,"
public String getAuthor () {
    return author;
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/BookBean.java,"
public String getPublisher () {
    return publisher;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/BookBean.java,"
public String getTitle () {
    return title;
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/BookBean.java,"
public void setAuthor (String string) {
    author = string;
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/BookBean.java,"
public void setPublisher (String string) {
    publisher = string;
}
",61,64
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/BookBean.java,"
public void setTitle (String string) {
    title = string;
}
",66,69
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/BookBean.java,"
public boolean equals (Object obj) {
    boolean result = false;
    if (obj instanceof BookBean) {
        BookBean book = (BookBean) obj;
        result = author.equals (book.author) && publisher.equals (book.publisher) && title.equals (book.title);
    }
    return result;
}
",71,82
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/BookBean.java,"
public String toString () {
    return ""[BookBean title="" + title + ""]"";
}
",84,87
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DoubleLinkedParentBean.java,"
public DoubleLinkedParentBean () {
}
",34,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DoubleLinkedParentBean.java,"
public DoubleLinkedParentBean (String name) {
    setName (name);
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DoubleLinkedParentBean.java,"
public String getName () {
    return name;
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DoubleLinkedParentBean.java,"
public void setName (String name) {
    this.name = name;
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DoubleLinkedParentBean.java,"
public Iterator getChildren () {
    return children.iterator ();
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DoubleLinkedParentBean.java,"
public int getSize () {
    return children.size ();
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DoubleLinkedParentBean.java,"
public void addChild (DoubleLinkedChildBean child) {
    children.add (child);
    child.setParent (this);
}
",62,66
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/Tweedledee.java,"
public Tweedledee () {
}
",31,31
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/Tweedledee.java,"
public Tweedledee (Tweedledum tweedledum) {
    setBrother (tweedledum);
}
",32,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/Tweedledee.java,"
public Tweedledum getBrother () {
    return tweedledum;
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/Tweedledee.java,"
public void setBrother (Tweedledum tweedledum) {
    this.tweedledum = tweedledum;
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/Tweedledee.java,"
public String getName () {
    return ""Tweedledee"";
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/ScarabSettings.java,"
public ScarabSettings () {
    globalAttributes = new ArrayList ();
    modules = new ArrayList ();
    globalIssueTypes = new ArrayList ();
}
",52,57
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/ScarabSettings.java,"
public List getGlobalAttributes () {
    return globalAttributes;
}
",59,62
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/ScarabSettings.java,"
public void addGlobalAttribute (GlobalAttribute globalAttribute) {
    if (globalAttribute.getName () == null) {
        throw new AssertionFailedError (""Cannot add a new GlobalAttribute that has no name: "" + globalAttribute);
    }
    globalAttributes.add (globalAttribute);
}
",64,73
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/ScarabSettings.java,"
public List getGlobalIssueTypes () {
    return globalIssueTypes;
}
",75,78
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/ScarabSettings.java,"
public void addGlobalIssueType (GlobalIssueType globalIssueType) {
    globalIssueTypes.add (globalIssueType);
}
",80,83
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/ScarabSettings.java,"
public List getModules () {
    return modules;
}
",85,88
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/ScarabSettings.java,"
public void addModule (Module module) {
    modules.add (module);
}
",90,93
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/TestScarabSettings.java,"
public static void main (String [] args) {
    TestRunner.run (suite ());
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/TestScarabSettings.java,"
public static Test suite () {
    return new TestSuite (TestScarabSettings.class);
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/TestScarabSettings.java,"
public TestScarabSettings (String testName) {
    super (testName);
}
",61,64
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/TestScarabSettings.java,"
public void testRoundTrip () throws Exception {
    BeanReader reader = createBeanReader ();
    ScarabSettings ss = (ScarabSettings) reader.parse (new FileInputStream (getTestFile (""src/test/org/apache/commons/betwixt/scarab/scarab-settings.xml"")));
    StringWriter buffer = new StringWriter ();
    write (ss, buffer);
    reader = createBeanReader ();
    String text = buffer.toString ();
    System.out.println (text);
    testScarabSettings (ss);
}
",70,99
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/TestScarabSettings.java,"
protected BeanReader createBeanReader () throws Exception {
    BeanReader reader = new BeanReader ();
    reader.setXMLIntrospector (createXMLIntrospector ());
    reader.registerBeanClass (ScarabSettings.class);
    return reader;
}
",108,115
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/TestScarabSettings.java,"
protected XMLIntrospector createXMLIntrospector () {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setAttributesForPrimitives (false);
    introspector.getConfiguration ().setElementNameMapper (new HyphenatedNameMapper ());
    return introspector;
}
",122,136
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/TestScarabSettings.java,"
protected void testScarabSettings (ScarabSettings ss) throws Exception {
    List globalAttributes = ss.getGlobalAttributes ();
    GlobalAttribute ga = (GlobalAttribute) globalAttributes.get (1);
    assertEquals (""Functional area"", ga.getName ());
    List globalAttributeOptions = ga.getGlobalAttributeOptions ();
    System.out.println (""GlobalAttribute: "" + ga);
    System.out.println (""globalAttributeOptions: "" + globalAttributeOptions);
    assertEquals (ga.getCreatedDate ().getTimestamp (), ""2002-05-31 13:29:27.0"");
    assertEquals (globalAttributeOptions.size (), 2);
    GlobalAttributeOption gao = (GlobalAttributeOption) globalAttributeOptions.get (0);
    assertEquals (""UI"", gao.getChildOption ());
    gao = (GlobalAttributeOption) globalAttributeOptions.get (1);
    assertEquals (""Code"", gao.getChildOption ());
    List globalIssueTypes = ss.getGlobalIssueTypes ();
    GlobalIssueType git = (GlobalIssueType) globalIssueTypes.get (0);
    assertEquals (""Defect"", git.getName ());
    List modules = ss.getModules ();
    Module m = (Module) modules.get (0);
    assertEquals (""Source"", m.getName ());
}
",141,168
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/TestScarabSettings.java,"
protected void write (Object bean, Writer out) throws Exception {
    BeanWriter writer = new BeanWriter (out);
    writer.setXMLIntrospector (createXMLIntrospector ());
    writer.setEndOfLine (""\n"");
    writer.enablePrettyPrint ();
    writer.write (bean);
}
",173,181
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/GlobalAttribute.java,"
public GlobalAttribute () {
    globalAttributeOptions = new ArrayList ();
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/GlobalAttribute.java,"
public String toString () {
    return super.toString () + ""[name="" + name + "";createdDate="" + createdDate + "";options="" + globalAttributeOptions + ""]"";
}
",53,56
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/GlobalAttribute.java,"
public void addGlobalAttributeOption (GlobalAttributeOption globalAttributeOption) {
    globalAttributeOptions.add (globalAttributeOption);
}
",58,61
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/GlobalAttribute.java,"
public List getGlobalAttributeOptions () {
    return globalAttributeOptions;
}
",63,66
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/GlobalAttribute.java,"
public void setName (String name) {
    this.name = name;
}
",68,71
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/GlobalAttribute.java,"
public String getName () {
    return name;
}
",73,76
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/GlobalAttribute.java,"
public void addCreatedDate (CreatedDate cd) {
    this.createdDate = cd;
}
",78,81
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/GlobalAttribute.java,"
public CreatedDate getCreatedDate () {
    return this.createdDate;
}
",83,86
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/Module.java,"
public Module () {
}
",38,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/Module.java,"
public void setName (String name) {
    log.debug (""Module.setName(): "" + name);
    this.name = name;
}
",42,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/Module.java,"
public String getName () {
    return name;
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/GlobalAttributeOption.java,"
public GlobalAttributeOption () {
}
",36,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/GlobalAttributeOption.java,"
public String toString () {
    return super.toString () + ""[name="" + name + "";childOption="" + childOption + ""]"";
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/GlobalAttributeOption.java,"
public void setName (String name) {
    this.name = name;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/GlobalAttributeOption.java,"
public String getName () {
    return name;
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/GlobalAttributeOption.java,"
public void setChildOption (String name) {
    this.childOption = name;
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/GlobalAttributeOption.java,"
public String getChildOption () {
    return childOption;
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/GlobalAttributeOption.java,"
public String getPreferredOrder () {
    return preferredOrder;
}
",65,68
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/GlobalAttributeOption.java,"
public void setPreferredOrder (String value) {
    this.preferredOrder = value;
}
",70,73
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/GlobalIssueType.java,"
public GlobalIssueType () {
}
",35,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/GlobalIssueType.java,"
public void setName (String name) {
    this.name = name;
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/GlobalIssueType.java,"
public String getName () {
    return name;
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/CreatedDate.java,"
public void setFormat (String format) {
    this.format = format;
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/CreatedDate.java,"
public String getFormat () {
    return this.format;
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/CreatedDate.java,"
public void setTimestamp (String timestamp) {
    this.timestamp = timestamp;
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/CreatedDate.java,"
public String getTimestamp () {
    return this.timestamp;
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/scarab/CreatedDate.java,"
public String toString () {
    return ""format="" + format + "";timestamp="" + timestamp;
}
",61,64
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PlanetBean.java,"
public PlanetBean (String name) {
    super ();
    this.name = name;
}
",34,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PlanetBean.java,"
public String getName () {
    return name;
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PlanetBean.java,"
public void setName (String name) {
    this.name = name;
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PlanetBean.java,"
public List getMoons () {
    return moons;
}
",57,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PlanetBean.java,"
public void addMoon (MoonBean moon) {
    this.moons.add (moon);
}
",62,65
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DoubleLinkedChildBean.java,"
public DoubleLinkedChildBean () {
}
",32,32
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DoubleLinkedChildBean.java,"
public DoubleLinkedChildBean (DoubleLinkedParentBean parent, String name) {
    setParent (parent);
    setName (name);
}
",34,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DoubleLinkedChildBean.java,"
public DoubleLinkedParentBean getParent () {
    return parent;
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DoubleLinkedChildBean.java,"
public void setParent (DoubleLinkedParentBean parent) {
    this.parent = parent;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DoubleLinkedChildBean.java,"
public String getName () {
    return name;
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DoubleLinkedChildBean.java,"
public void setName (String name) {
    this.name = name;
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestArrays.java,"
public TestArrays (String testName) {
    super (testName);
}
",33,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestArrays.java,"
public void testWriteArray () throws Exception {
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    writer.getBindingConfiguration ().setMapIDs (false);
    LibraryBean libraryBean = new LibraryBean ();
    libraryBean.addBook (new BookBean (""Martin Fowler"", ""Refactoring"", ""Addision Wesley""));
    libraryBean.addBook (new BookBean (""Ben Laurie"", ""Apache"", ""O'Reilly""));
    libraryBean.addBook (new BookBean (""Kent Beck"", ""Test Driven Development"", ""Addision Wesley""));
    writer.write (libraryBean);
    String xml = out.toString ();
    String expected = ""<?xml version='1.0'?><LibraryBean>"" + ""<books>"" + ""<book author='Martin Fowler' title='Refactoring' publisher='Addision Wesley'/>"" + ""<book author='Ben Laurie' title='Apache' publisher='O&apos;Reilly'/>"" + ""<book author='Kent Beck' title='Test Driven Development' publisher='Addision Wesley'/>"" + ""</books>"" + ""</LibraryBean>"";
    xmlAssertIsomorphicContent (parseString (xml), parseString (expected), true);
}
",38,65
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestArrays.java,"
public void testReadArray () throws Exception {
    String xml = ""<?xml version='1.0'?><LibraryBean>"" + ""<books>"" + ""<book author='Martin Fowler' title='Refactoring' publisher='Addision Wesley'/>"" + ""<book author='Ben Laurie' title='Apache' publisher='O&apos;Reilly'/>"" + ""<book author='Kent Beck' title='Test Driven Development' publisher='Addision Wesley'/>"" + ""</books>"" + ""</LibraryBean>"";
    BeanReader reader = new BeanReader ();
    reader.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    reader.getBindingConfiguration ().setMapIDs (false);
    reader.registerBeanClass (LibraryBean.class);
    LibraryBean bean = (LibraryBean) reader.parse (new StringReader (xml));
    BookBean [] books = bean.getBooks ();
    assertEquals (""Three books read"", 3, books.length);
    assertEquals (""Book one"", new BookBean (""Martin Fowler"", ""Refactoring"", ""Addision Wesley""), books [0]);
    assertEquals (""Book two"", new BookBean (""Ben Laurie"", ""Apache"", ""O'Reilly""), books [1]);
    assertEquals (""Book three"", new BookBean (""Kent Beck"", ""Test Driven Development"", ""Addision Wesley""), books [2]);
}
",67,89
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestArrays.java,"
public void testWriteArrayWithSetter () throws Exception {
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    writer.getBindingConfiguration ().setMapIDs (false);
    LibraryBeanWithArraySetter libraryBean = new LibraryBeanWithArraySetter ();
    BookBean [] books = {new BookBean (""Martin Fowler"", ""Refactoring"", ""Addision Wesley""), new BookBean (""Ben Laurie"", ""Apache"", ""O'Reilly""), new BookBean (""Kent Beck"", ""Test Driven Development"", ""Addision Wesley"")};
    libraryBean.setBooks (books);
    writer.write (libraryBean);
    String xml = out.toString ();
    String expected = ""<?xml version='1.0'?><LibraryBeanWithArraySetter>"" + ""<books>"" + ""<BookBean author='Martin Fowler' title='Refactoring' publisher='Addision Wesley'/>"" + ""<BookBean author='Ben Laurie' title='Apache' publisher='O&apos;Reilly'/>"" + ""<BookBean author='Kent Beck' title='Test Driven Development' publisher='Addision Wesley'/>"" + ""</books>"" + ""</LibraryBeanWithArraySetter>"";
    xmlAssertIsomorphicContent (parseString (xml), parseString (expected), true);
}
",91,123
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestArrays.java,"
public void testReadArrayWithSetter () throws Exception {
    String xml = ""<?xml version='1.0'?><LibraryBeanWithArraySetter>"" + ""<books>"" + ""<BookBean author='Martin Fowler' title='Refactoring' publisher='Addision Wesley'/>"" + ""<BookBean author='Ben Laurie' title='Apache' publisher='O&apos;Reilly'/>"" + ""<BookBean author='Kent Beck' title='Test Driven Development' publisher='Addision Wesley'/>"" + ""</books>"" + ""</LibraryBeanWithArraySetter>"";
    BeanReader reader = new BeanReader ();
    reader.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    reader.getBindingConfiguration ().setMapIDs (false);
    reader.registerBeanClass (LibraryBeanWithArraySetter.class);
    LibraryBeanWithArraySetter bean = (LibraryBeanWithArraySetter) reader.parse (new StringReader (xml));
    BookBean [] books = bean.getBooks ();
    assertEquals (""Three books read"", 3, books.length);
    assertEquals (""Book one"", new BookBean (""Martin Fowler"", ""Refactoring"", ""Addision Wesley""), books [0]);
    assertEquals (""Book two"", new BookBean (""Ben Laurie"", ""Apache"", ""O'Reilly""), books [1]);
    assertEquals (""Book three"", new BookBean (""Kent Beck"", ""Test Driven Development"", ""Addision Wesley""), books [2]);
}
",125,147
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestArrays.java,"
public void testIntrospectArrayWithSetter () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    XMLBeanInfo xmlBeanInfo = introspector.introspect (LibraryBeanWithArraySetter.class);
    ElementDescriptor beanDescriptor = xmlBeanInfo.getElementDescriptor ();
    ElementDescriptor [] childDescriptors = beanDescriptor.getElementDescriptors ();
    assertEquals (""Only one child element"", 1, childDescriptors.length);
    ElementDescriptor booksWrapperDescriptor = childDescriptors [0];
    ElementDescriptor [] wrapperChildren = booksWrapperDescriptor.getElementDescriptors ();
    assertEquals (""Only one child element"", 1, childDescriptors.length);
    ElementDescriptor booksDescriptor = wrapperChildren [0];
    assertNotNull (""Updater for property"", booksDescriptor.getUpdater ());
}
",149,164
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/NameBean.java,"
public NameBean () {
}
",29,29
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/NameBean.java,"
public NameBean (String name) {
    setName (name);
}
",31,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/NameBean.java,"
public String getName () {
    return name;
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/NameBean.java,"
public void setName (String name) {
    this.name = name;
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/NameBean.java,"
public String toString () {
    return ""["" + this.getClass ().getName () + "": name="" + name + ""]"";
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/NameBean.java,"
public boolean equals (Object obj) {
    if (obj == null) return false;
    if (obj instanceof NameBean && getName () != null) {
        return getName ().equals (((NameBean) obj).getName ());
    }
    return false;
}
",51,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestCollectionMapping.java,"
public Iterator getElements () {
    return _elements.iterator ();
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestCollectionMapping.java,"
public void addElement (Element element) {
    _elements.add (element);
}
",49,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestCollectionMapping.java,"
public TestCollectionMapping (String testName) {
    super (testName);
}
",103,106
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestCollectionMapping.java,"
public void testRoundTripWithSingleMappingFile () throws IOException, SAXException, IntrospectionException {
    Container container = new Container ();
    container.addElement (new ElementB ());
    container.addElement (new ElementA ());
    StringWriter outputWriter = new StringWriter ();
    outputWriter.write (""<?xml version=\""1.0\"" ?>\n"");
    BeanWriter beanWriter = new BeanWriter (outputWriter);
    beanWriter.setEndOfLine (""\n"");
    beanWriter.enablePrettyPrint ();
    beanWriter.setWriteEmptyElements (true);
    beanWriter.getBindingConfiguration ().setMapIDs (false);
    beanWriter.getXMLIntrospector ().register (new InputSource (new StringReader (MAPPING)));
    beanWriter.setEndOfLine (""\n"");
    beanWriter.write (container);
    String output = outputWriter.toString ();
    assertEquals (EXPECTED, output);
    BeanReader beanReader = new BeanReader ();
    beanReader.registerMultiMapping (new InputSource (new StringReader (MAPPING)));
    StringReader xmlReader = new StringReader (output);
    container = (Container) beanReader.parse (xmlReader);
    Iterator it = container.getElements ();
    assertTrue (it.next () instanceof ElementB);
    assertTrue (it.next () instanceof ElementA);
    assertFalse (it.hasNext ());
}
",108,145
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestCollectionMapping.java,"
public void testInvalidXML () throws IOException, IntrospectionException, SAXException {
    BeanReader beanReader = new BeanReader ();
    beanReader.registerMultiMapping (new InputSource (new StringReader (MAPPING)));
    StringReader xmlReader = new StringReader (INVALID_XML);
    Container container = (Container) beanReader.parse (xmlReader);
    assertFalse (container.getElements ().hasNext ());
}
",147,159
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestDescriptors.java,"
public static void main (String [] args) {
    TestRunner.run (suite ());
}
",32,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestDescriptors.java,"
public static Test suite () {
    return new TestSuite (TestDescriptors.class);
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestDescriptors.java,"
public TestDescriptors (String testName) {
    super (testName);
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestDescriptors.java,"
public void testElementDescriptorLazyInit () {
    ElementDescriptor descriptor = new ElementDescriptor ();
    assertTrue (""Empty descriptor has no children"", ! descriptor.hasChildren ());
    assertTrue (""Empty descriptor has no content"", ! descriptor.hasContent ());
    assertTrue (""Empty descriptor has no attributes"", ! descriptor.hasAttributes ());
    descriptor.addAttributeDescriptor (new AttributeDescriptor (""test:one""));
    assertTrue (""Empty descriptor has no children"", ! descriptor.hasChildren ());
    assertTrue (""Empty descriptor has no content"", ! descriptor.hasContent ());
    assertTrue (""Descriptor has attributes (1)"", descriptor.hasAttributes ());
    descriptor.addElementDescriptor (new ElementDescriptor (""test:two""));
    assertTrue (""Descriptor has children (1)"", descriptor.hasChildren ());
    assertTrue (""Descriptor has content (1)"", descriptor.hasContent ());
    assertTrue (""Descriptor has attributes (2)"", descriptor.hasAttributes ());
    descriptor = new ElementDescriptor ();
    descriptor.addElementDescriptor (new ElementDescriptor (""test:one""));
    assertTrue (""Descriptor has children (2)"", descriptor.hasChildren ());
    assertTrue (""Descriptor has content (2)"", descriptor.hasContent ());
    assertTrue (""Descriptor has no attributes (1)"", ! descriptor.hasAttributes ());
    descriptor.addAttributeDescriptor (new AttributeDescriptor (""test:two""));
    assertTrue (""Descriptor has children (3)"", descriptor.hasChildren ());
    assertTrue (""Descriptor has content (3)"", descriptor.hasContent ());
    assertTrue (""Descriptor has attributes (2)"", descriptor.hasAttributes ());
    descriptor = new ElementDescriptor ();
    descriptor.addContentDescriptor (new AttributeDescriptor (""test:one""));
    assertTrue (""Descriptor has no children (1)"", ! descriptor.hasChildren ());
    assertTrue (""Descriptor has content (3)"", descriptor.hasContent ());
    assertTrue (""Descriptor has no attributes (2)"", ! descriptor.hasAttributes ());
    descriptor.addElementDescriptor (new ElementDescriptor (""test:two""));
    assertTrue (""Descriptor has children (4)"", descriptor.hasChildren ());
    assertTrue (""Descriptor has content (4)"", descriptor.hasContent ());
    assertTrue (""Descriptor has no attributes (3)"", ! descriptor.hasAttributes ());
    descriptor.addAttributeDescriptor (new AttributeDescriptor (""test:three""));
    assertTrue (""Descriptor has children (5)"", descriptor.hasChildren ());
    assertTrue (""Descriptor has content (5)"", descriptor.hasContent ());
    assertTrue (""Descriptor has attributes (3)"", descriptor.hasAttributes ());
}
",47,101
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestDescriptors.java,"
public void testGetElementDescriptorByName () {
    ElementDescriptor descriptor = new ElementDescriptor (""Flintstones"");
    descriptor.addElementDescriptor (new ElementDescriptor (""Freddy""));
    descriptor.addElementDescriptor (new ElementDescriptor (""Wilma""));
    descriptor.addElementDescriptor (new ElementDescriptor (""Pebbles""));
    ElementDescriptor returned = descriptor.getElementDescriptor (""Freddy"");
    assertTrue (""Freddy is a Flintstone"", returned != null);
    assertEquals (""Freddy is the right flintstone"", ""Freddy"", returned.getLocalName ());
    returned = descriptor.getElementDescriptor (""Wilma"");
    assertTrue (""Wilma is a Flintstone"", returned != null);
    assertEquals (""Wilma is the right flintstone"", ""Wilma"", returned.getLocalName ());
    returned = descriptor.getElementDescriptor (""Barney"");
    assertTrue (""Barney is not a Flintstone"", returned == null);
}
",103,120
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestDescriptors.java,"
public void testGetElementDescriptorByNameNullMatch () {
    ElementDescriptor descriptor = new ElementDescriptor (""Flintstones"");
    descriptor.addElementDescriptor (new ElementDescriptor (""Freddy""));
    descriptor.addElementDescriptor (new ElementDescriptor (""Wilma""));
    descriptor.addElementDescriptor (new ElementDescriptor (""Pebbles""));
    descriptor.addElementDescriptor (new ElementDescriptor ());
    ElementDescriptor returned = descriptor.getElementDescriptor (""NotFreddy"");
    assertTrue (""NotFreddy matched"", returned != null);
    assertEquals (""NotFreddy match by null descriptor"", null, returned.getLocalName ());
}
",122,133
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AddressBean.java,"
public AddressBean () {
}
",35,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AddressBean.java,"
public AddressBean (String street, String city, String country, String code) {
    setStreet (street);
    setCity (city);
    setCode (code);
    setCountry (country);
}
",39,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AddressBean.java,"
public String getStreet () {
    return street;
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AddressBean.java,"
public String getCity () {
    return city;
}
",52,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AddressBean.java,"
public String getCode () {
    return code;
}
",57,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AddressBean.java,"
public String getCountry () {
    return country;
}
",62,65
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AddressBean.java,"
public void setStreet (String street) {
    this.street = street;
}
",67,70
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AddressBean.java,"
public void setCity (String city) {
    this.city = city;
}
",72,75
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AddressBean.java,"
public void setCode (String code) {
    this.code = code;
}
",77,80
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AddressBean.java,"
public void setCountry (String country) {
    this.country = country;
}
",82,85
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AddressBean.java,"
public String toString () {
    return ""["" + this.getClass ().getName () + "": street="" + street + "", city="" + city + "", country="" + country + ""]"";
}
",87,91
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AddressBean.java,"
public boolean equals (Object obj) {
    if (obj == null) return false;
    return this.hashCode () == obj.hashCode ();
}
",93,97
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AddressBean.java,"
public int hashCode () {
    return toString ().hashCode ();
}
",99,102
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/SystemProperties.java,"
public static void main (String [] args) throws Exception {
    Object bean = System.getProperties ();
    BeanWriter writer = new BeanWriter ();
    writer.enablePrettyPrint ();
    writer.write (bean);
}
",31,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestMaps.java,"
public TestMaps (String testName) {
    super (testName);
}
",31,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestMaps.java,"
public void testHashMapWriteEmpty () throws Exception {
    Map hash = new Hashtable ();
    hash.put (""one"", ""un"");
    hash.put (""two"", ""deux"");
    hash.put (""three"", ""trois"");
    String expected = ""<?xml version='1.0'?>"" + ""<Hashtable>"" + ""	<empty>false</empty>"" + ""    <entry>"" + ""      <key>two</key>"" + ""      <value>deux</value>"" + ""    </entry>"" + ""   <entry>"" + ""      <key>one</key>"" + ""      <value>un</value>"" + ""    </entry>"" + ""    <entry>"" + ""      <key>three</key>"" + ""      <value>trois</value>"" + ""    </entry>"" + ""  </Hashtable>"";
    StringWriter out = new StringWriter ();
    BeanWriter beanWriter = new BeanWriter (out);
    beanWriter.setEndOfLine (""\n"");
    beanWriter.enablePrettyPrint ();
    beanWriter.setWriteEmptyElements (false);
    beanWriter.getBindingConfiguration ().setMapIDs (false);
    beanWriter.setXMLIntrospector (new XMLIntrospector ());
    beanWriter.write (hash);
    xmlAssertIsomorphic (parseString (expected), parseString (out));
}
",36,72
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestMaps.java,"
public void testHashMapWriteNotEmpty () throws Exception {
    Map hash = new Hashtable ();
    hash.put (""one"", ""un"");
    hash.put (""two"", ""deux"");
    hash.put (""three"", ""trois"");
    String expected = ""<?xml version='1.0'?>"" + ""<Hashtable>"" + ""	<empty>false</empty>"" + ""    <entry>"" + ""      <key>two</key>"" + ""      <value>deux</value>"" + ""    </entry>"" + ""   <entry>"" + ""      <key>one</key>"" + ""      <value>un</value>"" + ""    </entry>"" + ""    <entry>"" + ""      <key>three</key>"" + ""      <value>trois</value>"" + ""    </entry>"" + ""  </Hashtable>"";
    StringWriter out = new StringWriter ();
    BeanWriter beanWriter = new BeanWriter (out);
    beanWriter.setEndOfLine (""\n"");
    beanWriter.enablePrettyPrint ();
    beanWriter.setWriteEmptyElements (true);
    beanWriter.getBindingConfiguration ().setMapIDs (false);
    beanWriter.setXMLIntrospector (new XMLIntrospector ());
    beanWriter.write (hash);
    xmlAssertIsomorphic (parseString (expected), parseString (out));
}
",74,110
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/RSSBeanReader.java,"
public RSSBeanReader (String testName) {
    super (testName);
}
",49,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/RSSBeanReader.java,"
public static void main (String [] args) throws Exception {
    RSSBeanReader sample = new RSSBeanReader (""RSS"");
    sample.run (args);
}
",54,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/RSSBeanReader.java,"
public void run (String [] args) throws Exception {
    BeanReader reader = new BeanReader ();
    reader.registerBeanClass (Channel.class);
    for (int i = 0; i < registrations.length; i += 2) {
        URL url = RSSDigester.class.getResource (registrations [i + 1]);
        if (url != null) {
            reader.register (registrations [i], url.toString ());
        }
    }
    Object bean = null;
    if (args.length > 0) {
        bean = reader.parse (args [0]);
    }
    else {
        InputStream in = new FileInputStream (getTestFile (""src/test/org/apache/commons/betwixt/rss-example.xml""));
        bean = reader.parse (in);
        in.close ();
    }
    write (bean);
}
",60,89
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/RSSBeanReader.java,"
public void write (Object bean) throws Exception {
    if (bean == null) {
        throw new Exception (""No bean read from the XML document!"");
    }
    BeanWriter writer = new BeanWriter ();
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (false);
    writer.enablePrettyPrint ();
    writer.write (bean);
}
",91,101
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PartyBean.java,"
public PartyBean () {
}
",35,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PartyBean.java,"
public PartyBean (String excuse, Date date, int fromHour, AddressBean venue) {
    setExcuse (excuse);
    setDateOfParty (date);
    setVenue (venue);
    setFromHour (fromHour);
}
",37,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PartyBean.java,"
public String getExcuse () {
    return excuse;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PartyBean.java,"
public void setExcuse (String excuse) {
    this.excuse = excuse;
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PartyBean.java,"
public Date getDateOfParty () {
    return dateOfParty;
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PartyBean.java,"
public void setDateOfParty (Date dateOfParty) {
    this.dateOfParty = dateOfParty;
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PartyBean.java,"
public AddressBean getVenue () {
    return venue;
}
",65,68
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PartyBean.java,"
public void setVenue (AddressBean venue) {
    this.venue = venue;
}
",70,73
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PartyBean.java,"
public int getFromHour () {
    return fromHour;
}
",75,78
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PartyBean.java,"
public void setFromHour (int fromHour) {
    this.fromHour = fromHour;
}
",80,83
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestRSSRoundTrip.java,"
public static void main (String [] args) {
    TestRunner.run (suite ());
}
",57,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestRSSRoundTrip.java,"
public static Test suite () {
    return new TestSuite (TestRSSRoundTrip.class);
}
",62,65
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestRSSRoundTrip.java,"
public TestRSSRoundTrip (String testName) {
    super (testName);
}
",67,70
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestRSSRoundTrip.java,"
public void testRoundTrip () throws Exception {
    RSSDigester digester = new RSSDigester ();
    InputStream in = new FileInputStream (getTestFile (""src/test/org/apache/commons/betwixt/rss-example.xml""));
    Object bean = digester.parse (in);
    in.close ();
    StringWriter buffer = new StringWriter ();
    write (bean, buffer);
    String text = buffer.toString ();
    bean = digester.parse (new StringReader (text));
    buffer = new StringWriter ();
    write (bean, buffer);
    String text2 = buffer.toString ();
    assertEquals (""Round trip value should remain unchanged"", text, text2);
}
",74,103
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestRSSRoundTrip.java,"
public void testBeanWriterRoundTrip () throws Exception {
    RSSDigester digester = new RSSDigester ();
    InputStream in = new FileInputStream (getTestFile (""src/test/org/apache/commons/betwixt/rss-example.xml""));
    Object bean = digester.parse (in);
    in.close ();
    StringWriter buffer = new StringWriter ();
    write (bean, buffer);
    BeanReader reader = new BeanReader ();
    reader.registerBeanClass (Channel.class);
    for (int i = 0; i < registrations.length; i += 2) {
        URL url = RSSDigester.class.getResource (registrations [i + 1]);
        if (url != null) {
            reader.register (registrations [i], url.toString ());
        }
    }
    String text = buffer.toString ();
    bean = reader.parse (new StringReader (text));
    buffer = new StringWriter ();
    write (bean, buffer);
    String text2 = buffer.toString ();
    assertEquals (""Round trip value should remain unchanged"", text, text2);
}
",110,154
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestRSSRoundTrip.java,"
public void testRSSRead () throws Exception {
}
",156,188
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestRSSRoundTrip.java,"
protected void write (Object bean, Writer out) throws Exception {
    BeanWriter writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (false);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.setEndOfLine (""\n"");
    writer.enablePrettyPrint ();
    writer.write (bean);
}
",190,199
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/LibraryBeanWithArraySetter.java,"
public BookBean [] getBooks () {
    return books;
}
",30,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/LibraryBeanWithArraySetter.java,"
public void setBooks (BookBean [] books) {
    this.books = books;
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/ArrayListExtender.java,"
public ArrayListExtender () {
}
",29,29
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/ArrayListExtender.java,"
public ArrayListExtender (String another) {
    setAnother (another);
}
",31,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/ArrayListExtender.java,"
public String getAnother () {
    return another;
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/ArrayListExtender.java,"
public void setAnother (String another) {
    this.another = another;
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/Categories.java,"
public int size () {
    return categories.size ();
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/Categories.java,"
public Iterator getCategories () {
    return categories.iterator ();
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/Categories.java,"
public void addCategory (Category category) {
    categories.add (category);
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestClassProperty.java,"
public TestClassProperty (String testName) {
    super (testName);
}
",53,56
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestClassProperty.java,"
public void testHasClassElementWithoutDotBetwixtFile () throws Exception {
    StringWriter buffer = new StringWriter ();
    BeanWriter beanWriter = new BeanWriter (buffer);
    beanWriter.getXMLIntrospector ().getConfiguration ().setPropertySuppressionStrategy (new PropertySuppressionStrategy () {
        public boolean suppressProperty (Class clazz, Class propertyType, String propertyName) {
            return false;
        }
    }
    );
    Object bean = new Locale (""de"", ""de"");
    beanWriter.write (bean);
    assertTrue (buffer.toString ().indexOf (""<class>"" + bean.getClass ().getName () + ""</class>"") > 0);
}
",58,80
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestClassProperty.java,"
public boolean suppressProperty (Class clazz, Class propertyType, String propertyName) {
    return false;
}
",67,71
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestClassProperty.java,"
public void testHasClassElementWithDotBetwixtFile () throws Exception {
    StringWriter buffer = new StringWriter ();
    BeanWriter beanWriter = new BeanWriter (buffer);
    beanWriter.getXMLIntrospector ().getConfiguration ().setPropertySuppressionStrategy (new PropertySuppressionStrategy () {
        public boolean suppressProperty (Class clazz, Class propertyType, String propertyName) {
            return false;
        }
    }
    );
    Object bean = new SimpleClass ();
    beanWriter.write (bean);
    assertTrue (buffer.toString ().indexOf (""<class>"" + bean.getClass ().getName () + ""</class>"") > 0);
}
",82,104
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestClassProperty.java,"
public boolean suppressProperty (Class clazz, Class propertyType, String propertyName) {
    return false;
}
",91,95
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestCollectionMapping2.java,"
public Iterator getElements () {
    return _elements.iterator ();
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestCollectionMapping2.java,"
public void addElement (Element element) {
    _elements.add (element);
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestCollectionMapping2.java,"
public Iterator getSubElements () {
    return _subElements.iterator ();
}
",57,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestCollectionMapping2.java,"
public void addSubElement (SubElement subElement) {
    _subElements.add (subElement);
}
",62,65
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestCollectionMapping2.java,"
public TestCollectionMapping2 (String testName) {
    super (testName);
}
",103,106
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestCollectionMapping2.java,"
public void testInvalidXML () throws IOException, IntrospectionException, SAXException {
    BeanReader beanReader = new BeanReader ();
    beanReader.registerMultiMapping (new InputSource (new StringReader (MAPPING)));
    StringReader xmlReader = new StringReader (INVALID_XML);
    Container database = (Container) beanReader.parse (xmlReader);
    assertFalse (database.getElements ().hasNext ());
}
",108,120
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CyclicBean.java,"
public CyclicBean (String name) {
    this.name = name;
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CyclicBean.java,"
public Vector getLayers () {
    return this.layers;
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CyclicBean.java,"
public void setLayers (Vector vLayers) {
    this.layers = vLayers;
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CyclicBean.java,"
public void addLayer (CyclicLayer aLayer) {
    layers.add (aLayer);
}
",49,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CyclicBean.java,"
public String getName () {
    return name;
}
",53,56
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CyclicBean.java,"
public String toString () {
    return ""[CyclicBean] name="" + name;
}
",58,61
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SimplestBean.java,"
public SimplestBean () {
}
",30,30
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SimplestBean.java,"
public SimplestBean (String name) {
    setName (name);
}
",32,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SimplestBean.java,"
public String getName () {
    return name;
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SimplestBean.java,"
public void setName (String string) {
    name = string;
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestRecursiveBeanSchemaGeneration.java,"
public TestRecursiveBeanSchemaGeneration (String name) {
    super (name);
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestRecursiveBeanSchemaGeneration.java,"
public static void main (String [] args) {
    TestRunner.run (suite ());
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestRecursiveBeanSchemaGeneration.java,"
public static Test suite () {
    return new TestSuite (TestRecursiveBeanSchemaGeneration.class);
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestRecursiveBeanSchemaGeneration.java,"
public void testLoopBeanWithAttributes () throws Exception {
    SchemaTranscriber transcriber = new SchemaTranscriber ();
    transcriber.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    Schema schema = transcriber.generate (LoopBean.class);
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setBindingConfiguration (transcriber.createSchemaBindingConfiguration ());
    writer.getXMLIntrospector ().setConfiguration (transcriber.createSchemaIntrospectionConfiguration ());
    writer.write (schema);
    String xsd = out.getBuffer ().toString ();
    String expected = ""<?xml version='1.0'?><xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>"" + ""<xsd:element name='LoopBean' type='org.apache.commons.betwixt.schema.LoopBean'/>"" + ""<xsd:complexType name='org.apache.commons.betwixt.schema.LoopBean'>"" + ""<xsd:sequence>"" + ""<xsd:element name='friend' type='org.apache.commons.betwixt.schema.LoopBean' minOccurs='0' maxOccurs='1'/>"" + ""</xsd:sequence>"" + ""<xsd:attribute name='name' type='xsd:string'/>"" + ""</xsd:complexType>"" + ""</xsd:schema>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (xsd));
    LoopBean loopBean = new LoopBean (""Harry"");
    loopBean.setFriend (new LoopBean (""Sally""));
    out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    writer.write (loopBean);
    String xml = out.getBuffer ().toString ();
    xmlAssertIsValid (xml, xsd);
}
",52,92
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestRecursiveBeanSchemaGeneration.java,"
public void testCyclicBean () throws Exception {
    SchemaTranscriber transcriber = new SchemaTranscriber ();
    transcriber.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    Schema schema = transcriber.generate (CyclicBean.class);
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setBindingConfiguration (transcriber.createSchemaBindingConfiguration ());
    writer.getXMLIntrospector ().setConfiguration (transcriber.createSchemaIntrospectionConfiguration ());
    writer.write (schema);
    String xsd = out.getBuffer ().toString ();
    String expected = ""<?xml version='1.0'?><xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>"" + ""<xsd:element name='CyclicBean' type='org.apache.commons.betwixt.schema.CyclicBean'/>"" + ""<xsd:complexType name='org.apache.commons.betwixt.schema.CyclicBean'>"" + ""<xsd:sequence>"" + ""<xsd:element name='layers' minOccurs='0' maxOccurs='1'>"" + ""<xsd:complexType>"" + ""<xsd:sequence>"" + ""<xsd:element name='layer' type='org.apache.commons.betwixt.schema.CyclicLayer' minOccurs='0' maxOccurs='unbounded'/>"" + ""</xsd:sequence>"" + ""</xsd:complexType>"" + ""</xsd:element>"" + ""</xsd:sequence>"" + ""<xsd:attribute name='name' type='xsd:string'/>"" + ""</xsd:complexType>"" + ""<xsd:complexType name='org.apache.commons.betwixt.schema.CyclicLayer'>"" + ""<xsd:sequence>"" + ""<xsd:element name='columns' minOccurs='0' maxOccurs='1'>"" + ""<xsd:complexType>"" + ""<xsd:sequence>"" + ""<xsd:element name='column' type='org.apache.commons.betwixt.schema.CyclicColumn' minOccurs='0' maxOccurs='unbounded'/>"" + ""</xsd:sequence>"" + ""</xsd:complexType>"" + ""</xsd:element>"" + ""</xsd:sequence>"" + ""<xsd:attribute name='name' type='xsd:string'/>"" + ""</xsd:complexType>"" + ""<xsd:complexType name='org.apache.commons.betwixt.schema.CyclicColumn'>"" + ""<xsd:sequence>"" + ""<xsd:element name='bean' type='org.apache.commons.betwixt.schema.CyclicBean' minOccurs='0' maxOccurs='1'/>"" + ""</xsd:sequence>"" + ""<xsd:attribute name='name' type='xsd:string'/>"" + ""</xsd:complexType>"" + ""</xsd:schema>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (xsd));
}
",94,145
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/Dbid.java,"
public Dbid () {
    dbDataTypeCollection = new ArrayList ();
}
",31,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/Dbid.java,"
public void addDbDataType (DbDataType dbDataType) {
    dbDataTypeCollection.add (dbDataType);
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/Dbid.java,"
public List getDbDataTypes () {
    return dbDataTypeCollection;
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/Dbid.java,"
public boolean equals (Object object) {
    if (object == null) {
        return false;
    }
    if (object instanceof Dbid) {
        Dbid dbid = (Dbid) object;
        if (dbid.getDbDataTypes ().equals (this.getDbDataTypes ())) {
            return true;
        }
    }
    return false;
}
",46,62
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/DbDataType.java,"
public DbDataType () {
}
",28,30
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/DbDataType.java,"
public void setName (String name) {
    this.name = name;
}
",32,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/DbDataType.java,"
public String getName () {
    return this.name;
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/DbDataType.java,"
public String toString () {
    return getName ();
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/DbDataType.java,"
public boolean equals (Object object) {
    if (object == null) {
        return false;
    }
    if (object instanceof DbDataType) {
        if (object.toString ().equals (this.toString ())) {
            return true;
        }
    }
    return false;
}
",47,62
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestDataTypeMapper.java,"
public TestDataTypeMapper (String testName) {
    super (testName);
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestDataTypeMapper.java,"
public void testDefaultDataTypeMapping () throws Exception {
    DefaultDataTypeMapper mapper = new DefaultDataTypeMapper ();
    assertEquals (""java.lang.String"", ""xsd:string"", mapper.toXMLSchemaDataType (String.class));
    assertEquals (""java.math.BigInteger"", ""xsd:integer"", mapper.toXMLSchemaDataType (BigInteger.class));
    assertEquals (""java.math.BigDecimal"", ""xsd:decimal"", mapper.toXMLSchemaDataType (BigDecimal.class));
    assertEquals (""Integer"", ""xsd:int"", mapper.toXMLSchemaDataType (Integer.TYPE));
    assertEquals (""int"", ""xsd:int"", mapper.toXMLSchemaDataType (Integer.class));
    assertEquals (""Long"", ""xsd:long"", mapper.toXMLSchemaDataType (Long.TYPE));
    assertEquals (""long"", ""xsd:long"", mapper.toXMLSchemaDataType (Long.class));
    assertEquals (""Short"", ""xsd:short"", mapper.toXMLSchemaDataType (Short.TYPE));
    assertEquals (""short"", ""xsd:short"", mapper.toXMLSchemaDataType (Short.class));
    assertEquals (""Float"", ""xsd:float"", mapper.toXMLSchemaDataType (Float.TYPE));
    assertEquals (""float"", ""xsd:float"", mapper.toXMLSchemaDataType (Float.class));
    assertEquals (""Double"", ""xsd:double"", mapper.toXMLSchemaDataType (Double.TYPE));
    assertEquals (""double"", ""xsd:double"", mapper.toXMLSchemaDataType (Double.class));
    assertEquals (""Boolean"", ""xsd:boolean"", mapper.toXMLSchemaDataType (Boolean.TYPE));
    assertEquals (""boolean"", ""xsd:boolean"", mapper.toXMLSchemaDataType (Boolean.class));
    assertEquals (""Byte"", ""xsd:byte"", mapper.toXMLSchemaDataType (Byte.TYPE));
    assertEquals (""byte"", ""xsd:byte"", mapper.toXMLSchemaDataType (byte.class));
    assertEquals (""java.util.Date"", ""xsd:dateTime"", mapper.toXMLSchemaDataType (java.util.Date.class));
    assertEquals (""java.sql.Date"", ""xsd:date"", mapper.toXMLSchemaDataType (java.sql.Date.class));
    assertEquals (""java.sql.Time"", ""xsd:time"", mapper.toXMLSchemaDataType (java.sql.Time.class));
}
",40,63
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestDataTypeMapper.java,"
public void testDefaultDataTypeTransciption () throws Exception {
    Schema expected = new Schema ();
    GlobalComplexType allSimplesBeanType = new GlobalComplexType ();
    allSimplesBeanType.setName (""org.apache.commons.betwixt.schema.AllSimplesBean"");
    allSimplesBeanType.addElement (new SimpleLocalElement (""string"", ""xsd:string""));
    allSimplesBeanType.addElement (new SimpleLocalElement (""bigInteger"", ""xsd:integer""));
    allSimplesBeanType.addElement (new SimpleLocalElement (""primitiveInt"", ""xsd:int""));
    allSimplesBeanType.addElement (new SimpleLocalElement (""objectInt"", ""xsd:int""));
    allSimplesBeanType.addElement (new SimpleLocalElement (""primitiveLong"", ""xsd:long""));
    allSimplesBeanType.addElement (new SimpleLocalElement (""objectLong"", ""xsd:long""));
    allSimplesBeanType.addElement (new SimpleLocalElement (""primitiveShort"", ""xsd:short""));
    allSimplesBeanType.addElement (new SimpleLocalElement (""objectShort"", ""xsd:short""));
    allSimplesBeanType.addElement (new SimpleLocalElement (""bigDecimal"", ""xsd:decimal""));
    allSimplesBeanType.addElement (new SimpleLocalElement (""primitiveFloat"", ""xsd:float""));
    allSimplesBeanType.addElement (new SimpleLocalElement (""objectFloat"", ""xsd:float""));
    allSimplesBeanType.addElement (new SimpleLocalElement (""primitiveDouble"", ""xsd:double""));
    allSimplesBeanType.addElement (new SimpleLocalElement (""objectDouble"", ""xsd:double""));
    allSimplesBeanType.addElement (new SimpleLocalElement (""primitiveBoolean"", ""xsd:boolean""));
    allSimplesBeanType.addElement (new SimpleLocalElement (""objectBoolean"", ""xsd:boolean""));
    allSimplesBeanType.addElement (new SimpleLocalElement (""primitiveByte"", ""xsd:byte""));
    allSimplesBeanType.addElement (new SimpleLocalElement (""objectByte"", ""xsd:byte""));
    allSimplesBeanType.addElement (new SimpleLocalElement (""utilDate"", ""xsd:dateTime""));
    allSimplesBeanType.addElement (new SimpleLocalElement (""sqlDate"", ""xsd:date""));
    allSimplesBeanType.addElement (new SimpleLocalElement (""sqlTime"", ""xsd:time""));
    GlobalElement root = new GlobalElement (""AllSimplesBean"", ""org.apache.commons.betwixt.schema.AllSimplesBean"");
    expected.addComplexType (allSimplesBeanType);
    expected.addElement (root);
    SchemaTranscriber transcriber = new SchemaTranscriber ();
    transcriber.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (false);
    Schema out = transcriber.generate (AllSimplesBean.class);
    assertEquals (""AllSimplesBean schema"", expected, out);
}
",65,101
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SimpleBean.java,"
public SimpleBean () {
}
",34,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SimpleBean.java,"
public SimpleBean (String one, String two, String three, String four) {
    setOne (one);
    setTwo (two);
    setThree (three);
    setFour (four);
}
",36,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SimpleBean.java,"
public String getOne () {
    return one;
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SimpleBean.java,"
public void setOne (String string) {
    one = string;
}
",49,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SimpleBean.java,"
public String getTwo () {
    return two;
}
",54,57
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SimpleBean.java,"
public void setTwo (String string) {
    two = string;
}
",59,62
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SimpleBean.java,"
public String getThree () {
    return three;
}
",64,67
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SimpleBean.java,"
public void setThree (String string) {
    three = string;
}
",69,72
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SimpleBean.java,"
public String getFour () {
    return four;
}
",74,77
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SimpleBean.java,"
public void setFour (String string) {
    four = string;
}
",79,82
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SchemaDiff.java,"
public SchemaDiff () {
    this (System.err);
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SchemaDiff.java,"
public SchemaDiff (PrintStream out) {
    this.out = out;
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SchemaDiff.java,"
public void printDifferences (Schema one, Schema two) {
    for (Iterator it = one.getComplexTypes ().iterator (); it.hasNext ();) {
        GlobalComplexType complexType = (GlobalComplexType) it.next ();
        if (! two.getComplexTypes ().contains (complexType)) {
            boolean matched = false;
            for (Iterator otherIter = two.getComplexTypes ().iterator (); it.hasNext ();) {
                GlobalComplexType otherType = (GlobalComplexType) otherIter.next ();
                if (otherType.getName ().equals (complexType.getName ())) {
                    printDifferences (complexType, otherType);
                    matched = true;
                    break;
                }
            }
            if (! matched) {
                out.println (""Missing Complex type: "" + complexType);
            }
        }
    }
}
",45,70
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SchemaDiff.java,"
public void printDifferences (GlobalComplexType one, GlobalComplexType two) {
    out.println (""Type "" + one + "" is not equal to "" + two);
    for (Iterator it = one.getElements ().iterator (); it.hasNext ();) {
        Element elementOne = (Element) it.next ();
        if (! two.getElements ().contains (elementOne)) {
            boolean matched = false;
            for (Iterator otherIter = two.getElements ().iterator (); it.hasNext ();) {
                Element elementTwo = (Element) otherIter.next ();
                if (elementOne.getName ().equals (elementTwo.getName ())) {
                    printDifferences (elementOne, elementTwo);
                    matched = true;
                    break;
                }
            }
            if (! matched) {
                out.println (""Missing Element: "" + elementOne);
            }
        }
    }
    for (Iterator it = one.getAttributes ().iterator (); it.hasNext ();) {
        Attribute attributeOne = (Attribute) it.next ();
        if (! two.getAttributes ().contains (attributeOne)) {
            boolean matched = false;
            for (Iterator otherIter = two.getAttributes ().iterator (); it.hasNext ();) {
                Attribute attributeTwo = (Attribute) otherIter.next ();
                if (attributeTwo.getName ().equals (attributeTwo.getName ())) {
                    printDifferences (attributeOne, attributeTwo);
                    matched = true;
                    break;
                }
            }
            if (! matched) {
                out.println (""Missing Attribute: "" + attributeOne);
            }
        }
    }
}
",72,119
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SchemaDiff.java,"
private void printDifferences (Attribute one, Attribute two) {
    out.println (""Attribute "" + one + "" is not equals to "" + two);
}
",121,124
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SchemaDiff.java,"
private void printDifferences (Element one, Element two) {
    out.println (""Element "" + one + "" is not equals to "" + two);
}
",126,129
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/ParentColumn.java,"
public ParentColumn (String name) {
    this.name = name;
}
",30,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/ParentColumn.java,"
public String getName () {
    return name;
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/ParentColumn.java,"
public String toString () {
    return ""[ParentColumn] name="" + name;
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaGeneration.java,"
public TestSchemaGeneration (String name) {
    super (name);
}
",38,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaGeneration.java,"
public void testSimplestBeanWithAttributes () throws Exception {
    SchemaTranscriber transcriber = new SchemaTranscriber ();
    transcriber.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    Schema schema = transcriber.generate (SimplestBean.class);
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setBindingConfiguration (transcriber.createSchemaBindingConfiguration ());
    writer.getXMLIntrospector ().setConfiguration (transcriber.createSchemaIntrospectionConfiguration ());
    writer.write (schema);
    String xsd = out.getBuffer ().toString ();
    String expected = ""<?xml version='1.0'?><xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>"" + ""<xsd:element name='SimplestBean' type='org.apache.commons.betwixt.schema.SimplestBean'/>"" + ""<xsd:complexType name='org.apache.commons.betwixt.schema.SimplestBean'>"" + ""<xsd:sequence/>"" + ""<xsd:attribute name='name' type='xsd:string'/>"" + ""</xsd:complexType>"" + ""</xsd:schema>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (xsd));
}
",43,67
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaGeneration.java,"
public void testSimplestBeanWithElement () throws Exception {
    SchemaTranscriber transcriber = new SchemaTranscriber ();
    transcriber.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    Schema schema = transcriber.generate (SimplestElementBean.class);
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setBindingConfiguration (transcriber.createSchemaBindingConfiguration ());
    writer.getXMLIntrospector ().setConfiguration (transcriber.createSchemaIntrospectionConfiguration ());
    writer.write (schema);
    String xsd = out.getBuffer ().toString ();
    String expected = ""<?xml version='1.0'?><xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>"" + ""<xsd:element name='SimplestBean' type='org.apache.commons.betwixt.schema.SimplestElementBean'/>"" + ""<xsd:complexType name='org.apache.commons.betwixt.schema.SimplestElementBean'>"" + ""<xsd:sequence>"" + ""<xsd:element name='name' type='xsd:string' minOccurs='0' maxOccurs='1'/>"" + ""</xsd:sequence>"" + ""</xsd:complexType>"" + ""</xsd:schema>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (xsd));
}
",70,95
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaGeneration.java,"
public void testSimpleBean () throws Exception {
    SchemaTranscriber transcriber = new SchemaTranscriber ();
    Schema schema = transcriber.generate (SimpleBean.class);
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setBindingConfiguration (transcriber.createSchemaBindingConfiguration ());
    writer.getXMLIntrospector ().setConfiguration (transcriber.createSchemaIntrospectionConfiguration ());
    writer.write (schema);
    String xsd = out.getBuffer ().toString ();
    String expected = ""<?xml version='1.0'?><xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>"" + ""<xsd:element name='simple' type='org.apache.commons.betwixt.schema.SimpleBean'/>"" + ""<xsd:complexType name='org.apache.commons.betwixt.schema.SimpleBean'>"" + ""<xsd:sequence>"" + ""<xsd:element name='three' type='xsd:string' minOccurs='0' maxOccurs='1'/>"" + ""<xsd:element name='four' type='xsd:string' minOccurs='0' maxOccurs='1'/>"" + ""</xsd:sequence>"" + ""<xsd:attribute name='one' type='xsd:string'/>"" + ""<xsd:attribute name='two' type='xsd:string'/>"" + ""</xsd:complexType>"" + ""</xsd:schema>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (xsd));
}
",97,124
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaGeneration.java,"
public void testOrderLineBean () throws Exception {
    SchemaTranscriber transcriber = new SchemaTranscriber ();
    transcriber.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    transcriber.getXMLIntrospector ().getConfiguration ().setAttributeNameMapper (new HyphenatedNameMapper ());
    Schema schema = transcriber.generate (OrderLineBean.class);
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setBindingConfiguration (transcriber.createSchemaBindingConfiguration ());
    writer.getXMLIntrospector ().setConfiguration (transcriber.createSchemaIntrospectionConfiguration ());
    writer.write (schema);
    String xsd = out.getBuffer ().toString ();
    StringBuffer buffer = new StringBuffer (""<?xml version='1.0'?><xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>"" + ""<xsd:element name='OrderLineBean' type='org.apache.commons.betwixt.schema.OrderLineBean'/>"" + ""<xsd:complexType name='org.apache.commons.betwixt.schema.OrderLineBean'>"" + ""<xsd:sequence>"" + ""<xsd:element name='product' type='org.apache.commons.betwixt.schema.ProductBean' minOccurs='0' maxOccurs='1'/>"" + ""</xsd:sequence>"" + ""<xsd:attribute name='quantity' type='xsd:string'/>"" + ""</xsd:complexType>"" + ""<xsd:complexType name='org.apache.commons.betwixt.schema.ProductBean'>"" + ""<xsd:sequence/>"");
    PropertyDescriptor [] propertyDescriptors = Introspector.getBeanInfo (ProductBean.class).getPropertyDescriptors ();
    for (int i = 0; i < propertyDescriptors.length; i ++) {
        PropertyDescriptor propertyDescriptor = propertyDescriptors [i];
        if (""barcode"".equals (propertyDescriptor.getName ())) {
            buffer.append (""<xsd:attribute name='barcode' type='xsd:string'/>"");
        }
        else if (""code"".equals (propertyDescriptor.getName ())) {
            buffer.append (""<xsd:attribute name='code' type='xsd:string'/>"");
        }
        else if (""displayName"".equals (propertyDescriptor.getName ())) {
            buffer.append (""<xsd:attribute name='display-name' type='xsd:string'/>"");
        }
        else if (""name"".equals (propertyDescriptor.getName ())) {
            buffer.append (""<xsd:attribute name='name' type='xsd:string'/>"");
        }
    }
    buffer.append (""</xsd:complexType>"" + ""</xsd:schema>"");
    String expected = buffer.toString ();
    xmlAssertIsomorphicContent (parseString (expected), parseString (xsd), true);
}
",127,182
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaGeneration.java,"
public void testOrder () throws Exception {
    SchemaTranscriber transcriber = new SchemaTranscriber ();
    transcriber.getXMLIntrospector ().getConfiguration ().setElementNameMapper (new HyphenatedNameMapper ());
    transcriber.getXMLIntrospector ().getConfiguration ().setAttributeNameMapper (new HyphenatedNameMapper ());
    transcriber.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    transcriber.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (false);
    Schema schema = transcriber.generate (OrderBean.class);
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setBindingConfiguration (transcriber.createSchemaBindingConfiguration ());
    writer.getXMLIntrospector ().setConfiguration (transcriber.createSchemaIntrospectionConfiguration ());
    writer.write (schema);
    String xsd = out.getBuffer ().toString ();
    PropertyDescriptor [] propertyDescriptors = Introspector.getBeanInfo (OrderBean.class).getPropertyDescriptors ();
    boolean linesFirst = false;
    for (int i = 0; i < propertyDescriptors.length; i ++) {
        PropertyDescriptor propertyDescriptor = propertyDescriptors [i];
        if (""lines"".equals (propertyDescriptor.getName ())) {
            linesFirst = true;
            break;
        }
        else if (""customer"".equals (propertyDescriptor.getName ())) {
            linesFirst = false;
            break;
        }
    }
    StringBuffer buffer = new StringBuffer (""<?xml version='1.0'?><xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>"" + ""<xsd:element name='order-bean' type='org.apache.commons.betwixt.schema.OrderBean'/>"" + """" + ""<xsd:complexType name='org.apache.commons.betwixt.schema.OrderBean'>"" + ""	<xsd:sequence>"");
    if (linesFirst) {
        buffer.append (""     <xsd:element name='line' type='org.apache.commons.betwixt.schema.OrderLineBean' minOccurs='0' maxOccurs='unbounded'/>"");
        buffer.append (""        <xsd:element name='customer' type='org.apache.commons.betwixt.schema.CustomerBean' minOccurs='0' maxOccurs='1'/>"");
    }
    else {
        buffer.append (""        <xsd:element name='customer' type='org.apache.commons.betwixt.schema.CustomerBean' minOccurs='0' maxOccurs='1'/>"");
        buffer.append (""     <xsd:element name='line' type='org.apache.commons.betwixt.schema.OrderLineBean' minOccurs='0' maxOccurs='unbounded'/>"");
    }
    buffer.append (""	</xsd:sequence>"" + ""	<xsd:attribute name='code' type='xsd:string'/>"" + ""</xsd:complexType>"" + """");
    if (linesFirst) {
        writeExpectedOrderLineBeanType (buffer);
        writeExpectedCustomerBeanType (buffer);
    }
    else {
        writeExpectedCustomerBeanType (buffer);
        writeExpectedOrderLineBeanType (buffer);
    }
    buffer.append (""</xsd:schema>"");
    String expected = buffer.toString ();
    xmlAssertIsomorphicContent (parseString (xsd), parseString (expected), true);
}
",184,266
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaGeneration.java,"
private void writeExpectedOrderLineBeanType (StringBuffer buffer) throws IntrospectionException {
    PropertyDescriptor [] propertyDescriptors;
    buffer.append (""<xsd:complexType name='org.apache.commons.betwixt.schema.OrderLineBean'>"" + ""	<xsd:sequence>"" + ""		<xsd:element name='product' type='org.apache.commons.betwixt.schema.ProductBean' minOccurs='0' maxOccurs='1'/>"" + ""	</xsd:sequence>"" + ""	<xsd:attribute name='quantity' type='xsd:string'/>"" + ""</xsd:complexType>"" + """" + ""<xsd:complexType name='org.apache.commons.betwixt.schema.ProductBean'>"" + ""	<xsd:sequence/>"");
    propertyDescriptors = Introspector.getBeanInfo (ProductBean.class).getPropertyDescriptors ();
    for (int i = 0; i < propertyDescriptors.length; i ++) {
        PropertyDescriptor propertyDescriptor = propertyDescriptors [i];
        if (""barcode"".equals (propertyDescriptor.getName ())) {
            buffer.append (""<xsd:attribute name='barcode' type='xsd:string'/>"");
        }
        else if (""code"".equals (propertyDescriptor.getName ())) {
            buffer.append (""<xsd:attribute name='code' type='xsd:string'/>"");
        }
        else if (""displayName"".equals (propertyDescriptor.getName ())) {
            buffer.append (""<xsd:attribute name='display-name' type='xsd:string'/>"");
        }
        else if (""name"".equals (propertyDescriptor.getName ())) {
            buffer.append (""<xsd:attribute name='name' type='xsd:string'/>"");
        }
    }
    buffer.append (""	</xsd:complexType>"");
}
",272,310
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaGeneration.java,"
private void writeExpectedCustomerBeanType (StringBuffer buffer) throws IntrospectionException {
    PropertyDescriptor [] propertyDescriptors;
    buffer.append (""<xsd:complexType name='org.apache.commons.betwixt.schema.CustomerBean'>"" + ""	<xsd:sequence/>"");
    propertyDescriptors = Introspector.getBeanInfo (CustomerBean.class).getPropertyDescriptors ();
    for (int i = 0; i < propertyDescriptors.length; i ++) {
        PropertyDescriptor propertyDescriptor = propertyDescriptors [i];
        if (""code"".equals (propertyDescriptor.getName ())) {
            buffer.append (""<xsd:attribute name='code' type='xsd:string'/>"");
        }
        else if (""country"".equals (propertyDescriptor.getName ())) {
            buffer.append (""<xsd:attribute name='country' type='xsd:string'/>"");
        }
        else if (""name"".equals (propertyDescriptor.getName ())) {
            buffer.append (""<xsd:attribute name='name' type='xsd:string'/>"");
        }
        else if (""postcode"".equals (propertyDescriptor.getName ())) {
            buffer.append (""<xsd:attribute name='postcode' type='xsd:string'/>"");
        }
        else if (""street"".equals (propertyDescriptor.getName ())) {
            buffer.append (""<xsd:attribute name='street' type='xsd:string'/>"");
        }
        else if (""town"".equals (propertyDescriptor.getName ())) {
            buffer.append (""<xsd:attribute name='town' type='xsd:string'/>"");
        }
    }
    buffer.append (""</xsd:complexType>"" + """");
}
",316,358
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/ProductBean.java,"
public ProductBean () {
}
",32,32
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/ProductBean.java,"
public ProductBean (String barcode, String code, String name, String displayName) {
    setBarcode (barcode);
    setCode (code);
    setName (name);
    setDisplayName (displayName);
}
",33,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/ProductBean.java,"
public String getBarcode () {
    return barcode;
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/ProductBean.java,"
public String getCode () {
    return code;
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/ProductBean.java,"
public String getDisplayName () {
    return displayName;
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/ProductBean.java,"
public String getName () {
    return name;
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/ProductBean.java,"
public void setBarcode (String string) {
    barcode = string;
}
",61,64
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/ProductBean.java,"
public void setCode (String string) {
    code = string;
}
",66,69
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/ProductBean.java,"
public void setDisplayName (String string) {
    displayName = string;
}
",71,74
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/ProductBean.java,"
public void setName (String string) {
    name = string;
}
",76,79
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SimplestElementBean.java,"
public SimplestElementBean () {
}
",29,29
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/SimplestElementBean.java,"
public SimplestElementBean (String name) {
    super (name);
}
",31,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/OrderLineBean.java,"
public OrderLineBean () {
}
",31,31
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/OrderLineBean.java,"
public OrderLineBean (int quantity, ProductBean product) {
    setQuantity (quantity);
    setProduct (product);
}
",32,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/OrderLineBean.java,"
public ProductBean getProduct () {
    return product;
}
",38,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/OrderLineBean.java,"
public int getQuantity () {
    return quantity;
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/OrderLineBean.java,"
public void setProduct (ProductBean product) {
    this.product = product;
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/OrderLineBean.java,"
public void setQuantity (int i) {
    quantity = i;
}
",53,56
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaValidity.java,"
public TestSchemaValidity (String name) {
    super (name);
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaValidity.java,"
private String generateSchema (Class clazz) throws Exception {
    SchemaTranscriber transcriber = new SchemaTranscriber ();
    transcriber.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    Schema schema = transcriber.generate (clazz);
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setBindingConfiguration (transcriber.createSchemaBindingConfiguration ());
    writer.getXMLIntrospector ().setConfiguration (transcriber.createSchemaIntrospectionConfiguration ());
    writer.write (schema);
    String xsd = out.getBuffer ().toString ();
    return xsd;
}
",46,61
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaValidity.java,"
public void testSimplestBeanWithAttributes () throws Exception {
    String xsd = generateSchema (SimplestBean.class);
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    writer.getXMLIntrospector ().getConfiguration ().getPrefixMapper ().setPrefix (SchemaTranscriber.W3C_SCHEMA_INSTANCE_URI, ""xsi"");
    writer.getBindingConfiguration ().setMapIDs (false);
    SimplestBean bean = new SimplestBean (""Simon"");
    writer.write (bean);
    String xml = out.getBuffer ().toString ();
    xmlAssertIsValid (new InputSource (new StringReader (xml)), new InputSource (new StringReader (xsd)));
}
",63,79
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaValidity.java,"
public void testSimplestBeanWithElements () throws Exception {
    String xsd = generateSchema (SimplestElementBean.class);
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    writer.getXMLIntrospector ().getConfiguration ().getPrefixMapper ().setPrefix (SchemaTranscriber.W3C_SCHEMA_INSTANCE_URI, ""xsi"");
    writer.getBindingConfiguration ().setMapIDs (false);
    SimplestElementBean bean = new SimplestElementBean (""Simon"");
    writer.write (bean);
    String xml = out.getBuffer ().toString ();
    xmlAssertIsValid (new InputSource (new StringReader (xml)), new InputSource (new StringReader (xsd)));
}
",82,98
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaValidity.java,"
public void testSimpleBean () throws Exception {
    String xsd = generateSchema (SimpleBean.class);
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    writer.getXMLIntrospector ().getConfiguration ().getPrefixMapper ().setPrefix (SchemaTranscriber.W3C_SCHEMA_INSTANCE_URI, ""xsi"");
    writer.getBindingConfiguration ().setMapIDs (false);
    SimpleBean bean = new SimpleBean (""One"", ""Two"", ""A"", ""One, Two, Three, Four"");
    writer.write (bean);
    String xml = out.getBuffer ().toString ();
    xmlAssertIsValid (new InputSource (new StringReader (xml)), new InputSource (new StringReader (xsd)));
}
",101,117
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaValidity.java,"
private String generateOrderLineSchema () throws Exception {
    SchemaTranscriber transcriber = new SchemaTranscriber ();
    transcriber.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    transcriber.getXMLIntrospector ().getConfiguration ().setAttributeNameMapper (new HyphenatedNameMapper ());
    Schema schema = transcriber.generate (OrderLineBean.class);
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setBindingConfiguration (transcriber.createSchemaBindingConfiguration ());
    writer.getXMLIntrospector ().setConfiguration (transcriber.createSchemaIntrospectionConfiguration ());
    writer.write (schema);
    String xsd = out.getBuffer ().toString ();
    return xsd;
}
",119,135
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaValidity.java,"
public void testOrderLine () throws Exception {
    String xsd = generateOrderLineSchema ();
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    writer.getXMLIntrospector ().getConfiguration ().setAttributeNameMapper (new HyphenatedNameMapper ());
    writer.getXMLIntrospector ().getConfiguration ().getPrefixMapper ().setPrefix (SchemaTranscriber.W3C_SCHEMA_INSTANCE_URI, ""xsi"");
    writer.getBindingConfiguration ().setMapIDs (false);
    OrderLineBean bean = new OrderLineBean (3, new ProductBean (""00112234"", ""A11"", ""Fat Fish"", ""A Fat Fish""));
    writer.write (bean);
    String xml = out.getBuffer ().toString ();
    xmlAssertIsValid (new InputSource (new StringReader (xml)), new InputSource (new StringReader (xsd)));
}
",137,154
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaValidity.java,"
private String generateOrderSchema () throws Exception {
    SchemaTranscriber transcriber = new SchemaTranscriber ();
    transcriber.getXMLIntrospector ().getConfiguration ().setElementNameMapper (new HyphenatedNameMapper ());
    transcriber.getXMLIntrospector ().getConfiguration ().setAttributeNameMapper (new HyphenatedNameMapper ());
    transcriber.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    transcriber.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (false);
    Schema schema = transcriber.generate (OrderBean.class);
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setBindingConfiguration (transcriber.createSchemaBindingConfiguration ());
    writer.getXMLIntrospector ().setConfiguration (transcriber.createSchemaIntrospectionConfiguration ());
    writer.write (schema);
    String xsd = out.getBuffer ().toString ();
    return xsd;
}
",156,174
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaValidity.java,"
public void testOrder () throws Exception {
    String xsd = generateOrderSchema ();
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getXMLIntrospector ().getConfiguration ().setElementNameMapper (new HyphenatedNameMapper ());
    writer.getXMLIntrospector ().getConfiguration ().setAttributeNameMapper (new HyphenatedNameMapper ());
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    writer.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (false);
    writer.getBindingConfiguration ().setMapIDs (false);
    OrderBean bean = new OrderBean (""XA-2231"", new CustomerBean (""PB34"", ""Mr Abbot"", ""1, Skipton Road"", ""Shipley"", ""Merry England"", ""BD4 8KL""));
    bean.addLine (new OrderLineBean (4, new ProductBean (""00112234"", ""A11"", ""Taylor's Landlord"", ""Taylor's Landlord"")));
    bean.addLine (new OrderLineBean (5, new ProductBean (""00112235"", ""A13"", ""Black Sheep Special"", ""Black Sheep Special"")));
    writer.write (bean);
    String xml = out.getBuffer ().toString ();
    xmlAssertIsValid (new InputSource (new StringReader (xml)), new InputSource (new StringReader (xsd)));
}
",176,200
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaValidity.java,"
private String generateRSSSchema () throws Exception {
    SchemaTranscriber transcriber = new SchemaTranscriber ();
    Schema schema = transcriber.generate (Channel.class);
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setBindingConfiguration (transcriber.createSchemaBindingConfiguration ());
    writer.getXMLIntrospector ().setConfiguration (transcriber.createSchemaIntrospectionConfiguration ());
    writer.write (schema);
    String xsd = out.getBuffer ().toString ();
    return xsd;
}
",203,217
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaValidity.java,"
public void testRSS () throws Exception {
    String xsd = generateRSSSchema ();
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    Channel channel = new Channel ();
    channel.setTitle (""Betwixt News"");
    channel.setLink (""http://jakarta.apache.org/commons/betwixt"");
    channel.setDescription (""Example feed themed on Betwixt news."");
    channel.setRating (""(PICS-1.1 'http://www.rsac.org/ratingsv01.html'"" + "" 2 gen true comment 'RSACi North America Server'"" + "" for 'http://www.rsac.org' on '1996.04.16T08:15-0500'"" + "" r (n 0 s 0 v 0 l 0))"");
    channel.setLanguage (""en-UK"");
    Image image = new Image ();
    image.setTitle (""Apache Feather"");
    image.setURL (""http://www.apache.org/images/asf_logo_wide.gif"");
    image.setLink (""http://www.apache.org"");
    image.setWidth (100);
    image.setHeight (30);
    image.setDescription (""Example image"");
    channel.setImage (image);
    Item itemOne = new Item ();
    itemOne.setTitle (""Betwixt now generates w3c schema!"");
    itemOne.setLink (""http://jakarta.apache.org/commons/betwixt"");
    itemOne.setDescription (""Example description"");
    channel.addItem (itemOne);
    Item itemTwo = new Item ();
    itemTwo.setTitle (""Another News Item"");
    itemTwo.setLink (""http://jakarta.apache.org/commons/betwixt"");
    itemTwo.setDescription (""Blah Blah Blah"");
    channel.addItem (itemTwo);
    TextInput textInput = new TextInput ();
    textInput.setTitle (""Send"");
    textInput.setDescription (""Comments about Betwixt news"");
    textInput.setName (""Response text"");
    textInput.setLink (""http://jakarta.apache.org/commons/betwixt"");
    channel.setTextInput (textInput);
    writer.write (channel);
    String xml = out.getBuffer ().toString ();
    xmlAssertIsValid (new InputSource (new StringReader (xml)), new InputSource (new StringReader (xsd)));
}
",219,271
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/LoopBean.java,"
public LoopBean (String name) {
    this.name = name;
}
",32,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/LoopBean.java,"
public LoopBean getFriend () {
    if (++ count > max_count) {
        throw new RuntimeException (""Looping!"");
    }
    return friend;
}
",37,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/LoopBean.java,"
public void setFriend (LoopBean friend) {
    this.friend = friend;
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/LoopBean.java,"
public String getName () {
    return name;
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/LoopBean.java,"
public String toString () {
    return ""[LoopBean] name="" + name;
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CyclicLayer.java,"
public CyclicLayer (String name) {
    this.name = name;
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CyclicLayer.java,"
public Vector getColumns () {
    return this.columns;
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CyclicLayer.java,"
public void setColumns (Vector vColumns) {
    this.columns = vColumns;
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CyclicLayer.java,"
public void addColumn (CyclicColumn aColumn) {
    columns.add (aColumn);
}
",49,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CyclicLayer.java,"
public String getName () {
    return name;
}
",53,56
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CyclicLayer.java,"
public String toString () {
    return ""[CyclicLayer] name="" + name;
}
",58,61
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/Dbms.java,"
public Dbms () {
    dbidCollection = new ArrayList ();
}
",33,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/Dbms.java,"
public Dbms (String kind) {
    System.out.println (""kind constructor called"");
    setKind (kind);
}
",38,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/Dbms.java,"
public void addDbid (Dbid dbid) {
    dbidCollection.add (dbid);
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/Dbms.java,"
public List getDbids () {
    return this.dbidCollection;
}
",49,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/Dbms.java,"
public void setKind (String kind) {
    this.kind = kind;
}
",54,57
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/Dbms.java,"
public String getKind () {
    return this.kind;
}
",59,62
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/Dbms.java,"
public boolean equals (Object object) {
    if (object == null) {
        return false;
    }
    if (object instanceof Dbms) {
        Dbms dbms = (Dbms) object;
        if (dbms.getKind ().equals (this.getKind ())) {
            int count = 0;
            Iterator it = dbms.getDbids ().iterator ();
            while (it.hasNext ()) {
                if (count >= dbidCollection.size ()) {
                    return false;
                }
                if (! it.next ().equals (dbidCollection.get (count ++))) {
                    return false;
                }
            }
            return true;
        }
    }
    return false;
}
",64,94
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/Dbms.java,"
public String toString () {
    return ""[DBMS: name='"" + getKind () + ""']"";
}
",96,99
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CyclicColumn.java,"
public CyclicColumn (String name) {
    super (name);
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CyclicColumn.java,"
public CyclicBean getBean () {
    if (++ count > max_count) {
        throw new RuntimeException (""Cyclic Reference!"");
    }
    return bean;
}
",39,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CyclicColumn.java,"
public void setBean (CyclicBean aBean) {
    this.bean = aBean;
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CyclicColumn.java,"
public String toString () {
    return ""[CyclicColumn] name="" + getName ();
}
",53,56
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CustomerBean.java,"
public CustomerBean () {
}
",35,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CustomerBean.java,"
public CustomerBean (String code, String name, String street, String town, String country, String postcode) {
    setCode (code);
    setName (name);
    setStreet (street);
    setTown (town);
    setPostcode (postcode);
    setCountry (country);
}
",37,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CustomerBean.java,"
public String getCode () {
    return code;
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CustomerBean.java,"
public String getCountry () {
    return country;
}
",54,57
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CustomerBean.java,"
public String getName () {
    return name;
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CustomerBean.java,"
public String getPostcode () {
    return postcode;
}
",65,68
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CustomerBean.java,"
public String getStreet () {
    return street;
}
",70,73
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CustomerBean.java,"
public String getTown () {
    return town;
}
",75,78
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CustomerBean.java,"
public void setCode (String string) {
    code = string;
}
",80,83
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CustomerBean.java,"
public void setCountry (String string) {
    country = string;
}
",85,88
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CustomerBean.java,"
public void setName (String string) {
    name = string;
}
",90,93
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CustomerBean.java,"
public void setPostcode (String string) {
    postcode = string;
}
",95,98
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CustomerBean.java,"
public void setStreet (String string) {
    street = string;
}
",100,103
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/CustomerBean.java,"
public void setTown (String string) {
    town = string;
}
",105,108
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaTranscriber.java,"
public TestSchemaTranscriber (String testName) {
    super (testName);
}
",32,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaTranscriber.java,"
public void testEmpty () {
}
",37,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaTranscriber.java,"
public void testSimplestBeanAttribute () throws Exception {
    Schema expected = new Schema ();
    GlobalComplexType simplestBeanType = new GlobalComplexType ();
    simplestBeanType.setName (""org.apache.commons.betwixt.schema.SimplestBean"");
    simplestBeanType.addAttribute (new Attribute (""name"", ""xsd:string""));
    GlobalElement root = new GlobalElement (""SimplestBean"", ""org.apache.commons.betwixt.schema.SimplestBean"");
    expected.addComplexType (simplestBeanType);
    expected.addElement (root);
    SchemaTranscriber transcriber = new SchemaTranscriber ();
    transcriber.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    Schema out = transcriber.generate (SimplestBean.class);
    assertEquals (""Simplest bean schema"", expected, out);
}
",39,56
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaTranscriber.java,"
public void testSimplestBeanElement () throws Exception {
    Schema expected = new Schema ();
    GlobalComplexType simplestBeanType = new GlobalComplexType ();
    simplestBeanType.setName (""org.apache.commons.betwixt.schema.SimplestElementBean"");
    simplestBeanType.addElement (new SimpleLocalElement (""name"", ""xsd:string""));
    GlobalElement root = new GlobalElement (""SimplestBean"", ""org.apache.commons.betwixt.schema.SimplestElementBean"");
    expected.addComplexType (simplestBeanType);
    expected.addElement (root);
    SchemaTranscriber transcriber = new SchemaTranscriber ();
    transcriber.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (false);
    Schema out = transcriber.generate (SimplestElementBean.class);
    assertEquals (""Simplest bean schema"", expected, out);
}
",58,75
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaTranscriber.java,"
public void testSimpleBean () throws Exception {
    SchemaTranscriber transcriber = new SchemaTranscriber ();
    Schema out = transcriber.generate (SimpleBean.class);
    Schema expected = new Schema ();
    GlobalComplexType simpleBeanType = new GlobalComplexType ();
    simpleBeanType.setName (""org.apache.commons.betwixt.schema.SimpleBean"");
    simpleBeanType.addAttribute (new Attribute (""one"", ""xsd:string""));
    simpleBeanType.addAttribute (new Attribute (""two"", ""xsd:string""));
    simpleBeanType.addElement (new SimpleLocalElement (""three"", ""xsd:string""));
    simpleBeanType.addElement (new SimpleLocalElement (""four"", ""xsd:string""));
    expected.addComplexType (simpleBeanType);
    expected.addElement (new GlobalElement (""simple"", ""org.apache.commons.betwixt.schema.SimpleBean""));
    assertEquals (""Simple bean schema"", expected, out);
}
",77,94
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaTranscriber.java,"
public void testOrderLine () throws Exception {
    SchemaTranscriber transcriber = new SchemaTranscriber ();
    transcriber.getXMLIntrospector ().getConfiguration ().setAttributeNameMapper (new HyphenatedNameMapper ());
    transcriber.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    Schema out = transcriber.generate (OrderLineBean.class);
    Schema expected = new Schema ();
    GlobalComplexType productBeanType = new GlobalComplexType ();
    productBeanType.setName (ProductBean.class.getName ());
    productBeanType.addAttribute (new Attribute (""barcode"", ""xsd:string""));
    productBeanType.addAttribute (new Attribute (""code"", ""xsd:string""));
    productBeanType.addAttribute (new Attribute (""name"", ""xsd:string""));
    productBeanType.addAttribute (new Attribute (""display-name"", ""xsd:string""));
    expected.addComplexType (productBeanType);
    GlobalComplexType orderLineType = new GlobalComplexType ();
    orderLineType.setName (OrderLineBean.class.getName ());
    orderLineType.addAttribute (new Attribute (""quantity"", ""xsd:string""));
    orderLineType.addElement (new ElementReference (""product"", productBeanType));
    expected.addComplexType (orderLineType);
    expected.addElement (new GlobalElement (""OrderLineBean"", OrderLineBean.class.getName ()));
    assertEquals (""Transcriber schema"", expected, out);
}
",96,121
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchemaTranscriber.java,"
public void testOrder () throws Exception {
    SchemaTranscriber transcriber = new SchemaTranscriber ();
    transcriber.getXMLIntrospector ().getConfiguration ().setElementNameMapper (new HyphenatedNameMapper ());
    transcriber.getXMLIntrospector ().getConfiguration ().setAttributeNameMapper (new HyphenatedNameMapper ());
    transcriber.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    transcriber.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (false);
    Schema out = transcriber.generate (OrderBean.class);
    Schema expected = new Schema ();
    GlobalComplexType customerBeanType = new GlobalComplexType ();
    customerBeanType.setName (CustomerBean.class.getName ());
    customerBeanType.addAttribute (new Attribute (""code"", ""xsd:string""));
    customerBeanType.addAttribute (new Attribute (""name"", ""xsd:string""));
    customerBeanType.addAttribute (new Attribute (""street"", ""xsd:string""));
    customerBeanType.addAttribute (new Attribute (""town"", ""xsd:string""));
    customerBeanType.addAttribute (new Attribute (""country"", ""xsd:string""));
    customerBeanType.addAttribute (new Attribute (""postcode"", ""xsd:string""));
    expected.addComplexType (customerBeanType);
    GlobalComplexType productBeanType = new GlobalComplexType ();
    productBeanType.setName (ProductBean.class.getName ());
    productBeanType.addAttribute (new Attribute (""barcode"", ""xsd:string""));
    productBeanType.addAttribute (new Attribute (""code"", ""xsd:string""));
    productBeanType.addAttribute (new Attribute (""name"", ""xsd:string""));
    productBeanType.addAttribute (new Attribute (""display-name"", ""xsd:string""));
    expected.addComplexType (productBeanType);
    GlobalComplexType orderLineType = new GlobalComplexType ();
    orderLineType.setName (OrderLineBean.class.getName ());
    orderLineType.addAttribute (new Attribute (""quantity"", ""xsd:string""));
    orderLineType.addElement (new ElementReference (""product"", productBeanType));
    expected.addComplexType (orderLineType);
    GlobalComplexType orderType = new GlobalComplexType ();
    orderType.setName (OrderBean.class.getName ());
    orderType.addAttribute (new Attribute (""code"", ""xsd:string""));
    orderType.addElement (new ElementReference (""customer"", customerBeanType));
    orderType.addElement (new ElementReference (""line"", orderLineType));
    expected.addComplexType (orderType);
    expected.addElement (new GlobalElement (""order-bean"", OrderBean.class.getName ()));
    assertEquals (""Transcriber schema"", expected, out);
}
",124,169
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public BigDecimal getBigDecimal () {
    return bigDecimal;
}
",52,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public BigInteger getBigInteger () {
    return bigInteger;
}
",57,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public Boolean getObjectBoolean () {
    return objectBoolean;
}
",62,65
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public Byte getObjectByte () {
    return objectByte;
}
",67,70
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public Double getObjectDouble () {
    return objectDouble;
}
",72,75
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public Float getObjectFloat () {
    return objectFloat;
}
",77,80
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public Integer getObjectInt () {
    return objectInt;
}
",82,85
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public Long getObjectLong () {
    return objectLong;
}
",87,90
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public Short getObjectShort () {
    return objectShort;
}
",92,95
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public boolean isPrimitiveBoolean () {
    return primitiveBoolean;
}
",97,100
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public byte getPrimitiveByte () {
    return primitiveByte;
}
",102,105
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public double getPrimitiveDouble () {
    return primitiveDouble;
}
",107,110
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public float getPrimitiveFloat () {
    return primitiveFloat;
}
",112,115
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public int getPrimitiveInt () {
    return primitiveInt;
}
",117,120
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public long getPrimitiveLong () {
    return primitiveLong;
}
",122,125
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public short getPrimitiveShort () {
    return primitiveShort;
}
",127,130
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public java.sql.Date getSqlDate () {
    return sqlDate;
}
",132,135
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public java.sql.Time getSqlTime () {
    return sqlTime;
}
",137,140
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public String getString () {
    return string;
}
",142,145
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public java.util.Date getUtilDate () {
    return utilDate;
}
",147,150
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public void setBigDecimal (BigDecimal decimal) {
    bigDecimal = decimal;
}
",152,155
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public void setBigInteger (BigInteger integer) {
    bigInteger = integer;
}
",157,160
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public void setObjectBoolean (Boolean boolean1) {
    objectBoolean = boolean1;
}
",162,165
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public void setObjectByte (Byte byte1) {
    objectByte = byte1;
}
",167,170
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public void setObjectDouble (Double double1) {
    objectDouble = double1;
}
",172,175
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public void setObjectFloat (Float float1) {
    objectFloat = float1;
}
",177,180
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public void setObjectInt (Integer integer) {
    objectInt = integer;
}
",182,185
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public void setObjectLong (Long long1) {
    objectLong = long1;
}
",187,190
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public void setObjectShort (Short short1) {
    objectShort = short1;
}
",192,195
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public void setPrimitiveBoolean (boolean b) {
    primitiveBoolean = b;
}
",197,200
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public void setPrimitiveByte (byte b) {
    primitiveByte = b;
}
",202,205
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public void setPrimitiveDouble (double d) {
    primitiveDouble = d;
}
",207,210
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public void setPrimitiveFloat (float f) {
    primitiveFloat = f;
}
",212,215
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public void setPrimitiveInt (int i) {
    primitiveInt = i;
}
",217,220
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public void setPrimitiveLong (long l) {
    primitiveLong = l;
}
",222,225
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public void setPrimitiveShort (short s) {
    primitiveShort = s;
}
",227,230
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public void setSqlDate (java.sql.Date date) {
    sqlDate = date;
}
",232,235
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public void setSqlTime (java.sql.Time time) {
    sqlTime = time;
}
",237,240
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public void setString (String string) {
    this.string = string;
}
",242,245
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/AllSimplesBean.java,"
public void setUtilDate (java.util.Date date) {
    utilDate = date;
}
",247,250
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchema.java,"
public static Test suite () {
    return new TestSuite (TestSchema.class);
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchema.java,"
public TestSchema (String testName) {
    super (testName);
}
",54,57
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchema.java,"
public void testCombinedRoundTrip () throws Exception {
    BeanReader reader = createBeanReader ();
    PhysicalSchema schema = (PhysicalSchema) reader.parse (getTestFileURL (""src/test/org/apache/commons/betwixt/schema/schema.xml""));
    StringWriter buffer = new StringWriter ();
    write (schema, buffer, true);
    StringReader in = new StringReader (buffer.getBuffer ().toString ());
    reader = createBeanReader ();
    XMLIntrospector intro = createXMLIntrospector ();
    DefaultXMLBeanInfoRegistry registry = new DefaultXMLBeanInfoRegistry ();
    intro.setRegistry (registry);
    intro.getConfiguration ().setWrapCollectionsInElement (true);
    registry.flush ();
    reader.setXMLIntrospector (intro);
    reader.deregisterBeanClass (PhysicalSchema.class);
    reader.getRules ().clear ();
    reader.registerBeanClass (PhysicalSchema.class);
    PhysicalSchema schemaSecond = (PhysicalSchema) reader.parse (in);
    buffer.close ();
    write (schema, buffer, true);
    assertEquals (schema, schemaSecond);
}
",65,105
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchema.java,"
public void testRoundTripWithoutCollectionElement () throws Exception {
    BeanReader reader = createBeanReader ();
    PhysicalSchema schema = (PhysicalSchema) reader.parse (getTestFileURL (""src/test/org/apache/commons/betwixt/schema/schema.xml""));
    StringWriter buffer = new StringWriter ();
    write (schema, buffer, false);
    StringReader in = new StringReader (buffer.getBuffer ().toString ());
    PhysicalSchema schemaSecond = (PhysicalSchema) reader.parse (in);
    assertEquals (schemaSecond, schema);
}
",112,123
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchema.java,"
protected BeanReader createBeanReader () throws Exception {
    BeanReader reader = new BeanReader ();
    reader.setXMLIntrospector (createXMLIntrospector ());
    reader.registerBeanClass (PhysicalSchema.class);
    return reader;
}
",128,137
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchema.java,"
protected XMLIntrospector createXMLIntrospector () {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setAttributesForPrimitives (true);
    introspector.getConfiguration ().setWrapCollectionsInElement (false);
    introspector.getConfiguration ().setElementNameMapper (new HyphenatedNameMapper (true, ""_""));
    introspector.getConfiguration ().setAttributeNameMapper (new DecapitalizeNameMapper ());
    return introspector;
}
",142,167
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/TestSchema.java,"
private void write (Object bean, Writer out, boolean wrapCollectionsInElement) throws Exception {
    BeanWriter writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.setXMLIntrospector (createXMLIntrospector ());
    writer.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (wrapCollectionsInElement);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.setIndent (""  "");
    writer.setEndOfLine (""\n"");
    writer.write (bean);
}
",173,188
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/PhysicalSchema.java,"
public PhysicalSchema () {
    dbmsCollection = new ArrayList ();
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/PhysicalSchema.java,"
public PhysicalSchema (String autoCreate) {
    this.autoCreate = autoCreate.equalsIgnoreCase (""yes"");
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/PhysicalSchema.java,"
public void setAutocreate (String autoCreate) {
    this.autoCreate = (autoCreate.equalsIgnoreCase (""yes""));
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/PhysicalSchema.java,"
public String getAutocreate () {
    return this.autoCreate ? ""yes"" : ""no"";
}
",49,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/PhysicalSchema.java,"
public void addDbms (Dbms dbms) {
    dbmsCollection.add (dbms);
}
",54,57
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/PhysicalSchema.java,"
public List getDbmss () {
    return dbmsCollection;
}
",59,62
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/PhysicalSchema.java,"
public boolean equals (Object object) {
    if (object == null) {
        return false;
    }
    if (object instanceof PhysicalSchema) {
        PhysicalSchema schema = (PhysicalSchema) object;
        if (schema.getAutocreate ().equals (this.getAutocreate ())) {
            int count = 0;
            Iterator it = schema.getDbmss ().iterator ();
            while (it.hasNext ()) {
                if (count >= dbmsCollection.size ()) {
                    return false;
                }
                if (! it.next ().equals (dbmsCollection.get (count ++))) {
                    return false;
                }
            }
            return true;
        }
    }
    return false;
}
",64,93
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/PhysicalSchema.java,"
public String toString () {
    return ""[PhysicalSchema] autocreate="" + getAutocreate () + "" dbmass="" + getDbmss ();
}
",95,98
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/OrderBean.java,"
public OrderBean () {
}
",36,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/OrderBean.java,"
public OrderBean (String code, CustomerBean customer) {
    this.customer = customer;
    this.code = code;
}
",38,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/OrderBean.java,"
public String getCode () {
    return code;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/OrderBean.java,"
public CustomerBean getCustomer () {
    return customer;
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/OrderBean.java,"
public Iterator getLines () {
    return lines.iterator ();
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/OrderBean.java,"
public void setCode (String string) {
    code = string;
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/OrderBean.java,"
public void setCustomer (CustomerBean bean) {
    customer = bean;
}
",65,68
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/schema/OrderBean.java,"
public void addLine (OrderLineBean line) {
    lines.add (line);
}
",70,73
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/AlphaTwoImpl.java,"
public String alpha () {
    return getTwo ();
}
",22,25
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/AlphaTwoImpl.java,"
public String getTwo () {
    return two;
}
",29,32
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/AlphaTwoImpl.java,"
public void setTwo (String two) {
    this.two = two;
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/AlphaTwoImpl.java,"
public AlphaTwoImpl (String two) {
    super ();
    setTwo (two);
}
",40,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/AlphaTwoImpl.java,"
public AlphaTwoImpl () {
    super ();
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/TestPolyList.java,"
public TestPolyList (String testName) {
    super (testName);
    log.info (""Mapping:\n"" + MAPPING);
}
",40,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/TestPolyList.java,"
public void testWrite () throws Exception {
    AlphaList bean = new AlphaList ();
    AlphaOneImpl one = new AlphaOneImpl (""1"");
    bean.add (one);
    AlphaTwoImpl two = new AlphaTwoImpl (""2"");
    bean.add (two);
    StringWriter out = new StringWriter ();
    BeanWriter writer = new BeanWriter (out);
    StringReader mapping = new StringReader (MAPPING);
    writer.getXMLIntrospector ().register (new InputSource (mapping));
    configure (writer.getBindingConfiguration ());
    writer.write (bean);
    String written = out.getBuffer ().toString ();
    log.info (""Written:\n"" + written);
    xmlAssertIsomorphicContent (parseString (XML), parseString (written), true);
}
",63,85
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/TestPolyList.java,"
public void testRead () throws Exception {
    StringReader in = new StringReader (XML);
    BeanReader reader = new BeanReader ();
    StringReader mapping = new StringReader (MAPPING);
    reader.registerMultiMapping (new InputSource (mapping));
    reader.registerBeanClass (AlphaList.class);
    configure (reader.getBindingConfiguration ());
    Object bean = reader.parse (in);
    assertTrue (bean instanceof AlphaList);
    AlphaList list = (AlphaList) bean;
    assertEquals (2, list.size ());
    assertTrue (list.get (0) instanceof AlphaOneImpl);
    AlphaOneImpl one = (AlphaOneImpl) list.get (0);
    assertEquals (""1"", one.alpha ());
    assertTrue (list.get (1) instanceof AlphaTwoImpl);
    AlphaTwoImpl two = (AlphaTwoImpl) list.get (1);
    assertEquals (""2"", two.alpha ());
}
",87,107
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/TestPolyList.java,"
public void testIntrospection () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    XMLBeanInfo beanInfo = introspector.introspect (AlphaList.class);
    ElementDescriptor [] descriptors = beanInfo.getElementDescriptor ().getElementDescriptors ();
    assertEquals (""One descriptor"", 1, descriptors.length);
    assertTrue (descriptors [0].isHollow ());
    assertNotNull (descriptors [0].getContextExpression ());
    assertNotNull (descriptors [0].getUpdater ());
    assertEquals (""A list can contain any object"", Object.class, descriptors [0].getSingularPropertyType ());
}
",109,119
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/TestPolyList.java,"
private void configure (BindingConfiguration configuration) {
    configuration.setMapIDs (false);
}
",121,124
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/AlphaListHolder.java,"
public AlphaList getAlphaList () {
    return alphaList;
}
",23,26
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/AlphaListHolder.java,"
public void setAlphaList (AlphaList alphaList) {
    this.alphaList = (AlphaList) alphaList;
}
",28,31
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/TestPolyListHolder.java,"
public TestPolyListHolder (String testName) {
    super (testName);
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/TestPolyListHolder.java,"
public void testWrite () throws Exception {
    AlphaList list = new AlphaList ();
    AlphaOneImpl one = new AlphaOneImpl (""1"");
    list.add (one);
    AlphaTwoImpl two = new AlphaTwoImpl (""2"");
    list.add (two);
    AlphaListHolder bean = new AlphaListHolder ();
    bean.setAlphaList (list);
    StringWriter out = new StringWriter ();
    BeanWriter writer = new BeanWriter (out);
    StringReader mapping = new StringReader (MAPPING);
    writer.getXMLIntrospector ().register (new InputSource (mapping));
    configure (writer.getBindingConfiguration ());
    writer.write (bean);
    String written = out.getBuffer ().toString ();
    xmlAssertIsomorphicContent (parseString (XML), parseString (written), true);
}
",70,94
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/TestPolyListHolder.java,"
public void testRead () throws Exception {
    StringReader in = new StringReader (XML);
    BeanReader reader = new BeanReader ();
    StringReader mapping = new StringReader (MAPPING);
    reader.registerMultiMapping (new InputSource (mapping));
    reader.registerBeanClass (AlphaList.class);
    configure (reader.getBindingConfiguration ());
    Object bean = reader.parse (in);
    assertTrue (bean instanceof AlphaListHolder);
    AlphaListHolder holder = (AlphaListHolder) bean;
    AlphaList list = holder.getAlphaList ();
    assertNotNull (list);
    assertEquals (2, list.size ());
    assertTrue (list.get (0) instanceof AlphaOneImpl);
    AlphaOneImpl one = (AlphaOneImpl) list.get (0);
    assertEquals (""1"", one.alpha ());
    assertTrue (list.get (1) instanceof AlphaTwoImpl);
    AlphaTwoImpl two = (AlphaTwoImpl) list.get (1);
    assertEquals (""2"", two.alpha ());
}
",96,122
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/TestPolyListHolder.java,"
private void configure (BindingConfiguration configuration) {
    configuration.setMapIDs (false);
}
",124,127
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/TestPolyListHolder.java,"
public void testIntrospection () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    StringReader mapping = new StringReader (MAPPING);
    introspector.register (new InputSource (mapping));
    XMLBeanInfo beanInfo = introspector.introspect (AlphaListHolder.class);
    ElementDescriptor descriptor = beanInfo.getElementDescriptor ();
    assertNotNull (descriptor);
    ElementDescriptor [] descriptors = descriptor.getElementDescriptors ();
    assertNotNull (descriptors);
    assertEquals (""Only one descriptor"", 1, descriptors.length);
    assertNotNull (""Expected updater"", descriptors [0].getUpdater ());
}
",130,144
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/AlphaOneImpl.java,"
public String alpha () {
    return getOne ();
}
",22,25
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/AlphaOneImpl.java,"
public String getOne () {
    return one;
}
",29,32
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/AlphaOneImpl.java,"
public void setOne (String one) {
    this.one = one;
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/AlphaOneImpl.java,"
public AlphaOneImpl (final String one) {
    setOne (one);
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/poly/AlphaOneImpl.java,"
public AlphaOneImpl () {
    super ();
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DynaWithDotBetwixt.java,"
public DynaWithDotBetwixt () {
    this (""DEFAUL_NOT_DYNA"", ""DEFAULT_DYNA"");
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DynaWithDotBetwixt.java,"
public DynaWithDotBetwixt (String notDynaProperty, String dynaProperty) {
    this.notDynaProperty = notDynaProperty;
    this.dynaProperty = dynaProperty;
}
",42,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DynaWithDotBetwixt.java,"
public String getNotDynaProperty () {
    return notDynaProperty;
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DynaWithDotBetwixt.java,"
public String fiddleDyna () {
    return dynaProperty;
}
",53,56
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DynaWithDotBetwixt.java,"
public boolean contains (String name, String key) {
    return false;
}
",58,61
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DynaWithDotBetwixt.java,"
public Object get (String name) {
    return dynaProperty;
}
",63,66
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DynaWithDotBetwixt.java,"
public Object get (String name, int index) {
    return dynaProperty;
}
",68,71
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DynaWithDotBetwixt.java,"
public Object get (String name, String key) {
    return dynaProperty;
}
",73,76
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DynaWithDotBetwixt.java,"
public DynaClass getDynaClass () {
    return new DynaClass () {
        public DynaProperty [] getDynaProperties () {
            DynaProperty [] properties = {new DynaProperty (""DynaProp"", String.class)};
            return properties;
        } public String getName () {
            return ""DynaWithDotBetwixtClass"";
        } public DynaBean newInstance () {
            return new DynaWithDotBetwixt ();
        } public DynaProperty getDynaProperty (String name) {
            if (""DynaProp"".equals (name)) {
                return new DynaProperty (""DynaProp"", String.class);
            }
            return null;
        }
    }
    ;
}
",78,107
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DynaWithDotBetwixt.java,"
public DynaProperty [] getDynaProperties () {
    DynaProperty [] properties = {new DynaProperty (""DynaProp"", String.class)};
    return properties;
}
",82,86
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DynaWithDotBetwixt.java,"
public String getName () {
    return ""DynaWithDotBetwixtClass"";
}
",88,91
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DynaWithDotBetwixt.java,"
public DynaBean newInstance () {
    return new DynaWithDotBetwixt ();
}
",93,96
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DynaWithDotBetwixt.java,"
public DynaProperty getDynaProperty (String name) {
    if (""DynaProp"".equals (name)) {
        return new DynaProperty (""DynaProp"", String.class);
    }
    return null;
}
",98,105
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DynaWithDotBetwixt.java,"
public void remove (String name, String key) {
}
",109,109
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DynaWithDotBetwixt.java,"
public void set (String name, Object value) {
}
",111,111
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DynaWithDotBetwixt.java,"
public void set (String name, int index, Object value) {
}
",113,113
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DynaWithDotBetwixt.java,"
public void set (String name, String key, Object value) {
}
",115,115
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestDecapitalizeNameMapper.java,"
public static Test suite () {
    return new TestSuite (TestDecapitalizeNameMapper.class);
}
",33,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestDecapitalizeNameMapper.java,"
public TestDecapitalizeNameMapper (String testName) {
    super (testName);
}
",38,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestDecapitalizeNameMapper.java,"
public void testDecapitalize () {
    DecapitalizeNameMapper mapper = new DecapitalizeNameMapper ();
    String result = mapper.mapTypeToElementName (""FOOBAR"");
    assertEquals (""FOOBAR"", result);
    result = mapper.mapTypeToElementName (""FooBar"");
    assertEquals (""fooBar"", result);
    result = mapper.mapTypeToElementName (""FOOBar"");
    assertEquals (""FOOBar"", result);
}
",43,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/Testi18nObjectStringConversion.java,"
public static Test suite () {
    return new TestSuite (Testi18nObjectStringConversion.class);
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/Testi18nObjectStringConversion.java,"
public Testi18nObjectStringConversion (String testName) {
    super (testName);
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/Testi18nObjectStringConversion.java,"
public void testFrenchDefaultLocale () throws Exception {
    SimpleDateFormat format = new SimpleDateFormat (""EEE MMM dd HH:mm:sss yyyy"");
    Calendar calendar = Calendar.getInstance ();
    calendar.set (1980, 11, 9, 5, 0, 0);
    java.util.Date date = calendar.getTime ();
    String formatted = format.format (date);
    assertEquals (""Locale dependent conversions"", ""mar. d\u00E9c. 09 05:00:000 1980"", formatted);
}
",50,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/alt/Element.java,"
public Element () {
}
",31,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/alt/Element.java,"
public Element (String value) {
    this.value = value;
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/alt/Element.java,"
public String getValue () {
    return value;
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/alt/Element.java,"
public void setValue (String value) {
    this.value = value;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/alt/Elements.java,"
public Elements () {
}
",35,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/alt/Elements.java,"
public void addElement (Element element) {
    elements.put (element.getValue (), element);
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/alt/Elements.java,"
public Iterator getElements () {
    return elements.values ().iterator ();
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/alt/Elements.java,"
public Element getElement (String name) {
    return (Element) elements.get (name);
}
",49,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/alt/TestElementsAlt.java,"
public TestElementsAlt (String name) {
    super (name);
}
",49,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/alt/TestElementsAlt.java,"
public void testCapitalizeNameMapper () throws Exception {
    doTest (new CapitalizeNameMapper (), ""capitalize name mapper"");
}
",56,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/alt/TestElementsAlt.java,"
public void testDecapitalizeNameMapper () throws Exception {
    doTest (new DecapitalizeNameMapper (), ""decapitalize name mapper"");
}
",62,66
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/alt/TestElementsAlt.java,"
public void testDefaultElementMapper () throws Exception {
    doTest (new DefaultNameMapper (), ""default name mapper"");
}
",68,72
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/alt/TestElementsAlt.java,"
public void testHyphenatedNameMapper () throws Exception {
    doTest (new HyphenatedNameMapper (), ""hyphenated name mapper"");
}
",74,78
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/alt/TestElementsAlt.java,"
private void doTest (NameMapper mapper, String testName) throws Exception {
    Elements elements = new Elements ();
    elements.addElement (new Element (""a""));
    elements.addElement (new Element (""b""));
    elements.addElement (new Element (""c""));
    StringWriter out = new StringWriter ();
    BeanWriter writer = newBeanWriter (out, mapper);
    writer.setWriteEmptyElements (true);
    writer.write (elements);
    writer.flush ();
    String xmlOut = out.toString ();
    StringReader in = new StringReader (xmlOut);
    BeanReader reader = new BeanReader ();
    reader.setXMLIntrospector (newXMLIntrospector (mapper));
    reader.registerBeanClass (Elements.class);
    Elements result = (Elements) reader.parse (in);
    assertNotNull (""Element 'a' is null ("" + testName + "")"", result.getElement (""a""));
    assertNotNull (""Element 'b' is null ("" + testName + "")"", result.getElement (""b""));
    assertNotNull (""Element 'c' is null ("" + testName + "")"", result.getElement (""c""));
}
",80,116
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/alt/TestElementsAlt.java,"
private BeanWriter newBeanWriter (Writer writer, NameMapper mapper) {
    BeanWriter result = new BeanWriter (writer);
    result.setWriteEmptyElements (true);
    result.setXMLIntrospector (newXMLIntrospector (mapper));
    result.setEndOfLine (""\n"");
    result.enablePrettyPrint ();
    result.getBindingConfiguration ().setMapIDs (false);
    return result;
}
",118,128
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/alt/TestElementsAlt.java,"
private XMLIntrospector newXMLIntrospector (NameMapper mapper) {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setAttributesForPrimitives (true);
    introspector.getConfiguration ().setWrapCollectionsInElement (false);
    introspector.getConfiguration ().setElementNameMapper (mapper);
    return introspector;
}
",130,137
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestBadCharacterReplacingNMapper.java,"
public static Test suite () {
    return new TestSuite (TestBadCharacterReplacingNMapper.class);
}
",33,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestBadCharacterReplacingNMapper.java,"
public TestBadCharacterReplacingNMapper (String testName) {
    super (testName);
}
",38,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestBadCharacterReplacingNMapper.java,"
public void testNoReplacementBadFirstNoChainedMapper () {
    String name = ""$LoadsOfMoney"";
    BadCharacterReplacingNMapper mapper = new BadCharacterReplacingNMapper (null);
    String out = mapper.mapTypeToElementName (name);
    assertEquals (""Expected"", ""LoadsOfMoney"", out);
}
",43,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestBadCharacterReplacingNMapper.java,"
public void testNoReplacementBadFirstWithChainedMapper () {
    String name = ""$LOADS£OF$MONEY"";
    BadCharacterReplacingNMapper mapper = new BadCharacterReplacingNMapper (new PlainMapper ());
    String out = mapper.mapTypeToElementName (name);
    assertEquals (""Expected"", ""LOADSOFMONEY"", out);
}
",51,57
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestBadCharacterReplacingNMapper.java,"
public void testNoReplacementGoodFirstNoChainedMapper () {
    String name = ""L$oads%OfMone$y$"";
    BadCharacterReplacingNMapper mapper = new BadCharacterReplacingNMapper (null);
    String out = mapper.mapTypeToElementName (name);
    assertEquals (""Expected"", ""LoadsOfMoney"", out);
}
",59,65
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestBadCharacterReplacingNMapper.java,"
public void testNoReplacementGoodFirstWithChainedMapper () {
    String name = ""LOADSOFMONE$$Y"";
    BadCharacterReplacingNMapper mapper = new BadCharacterReplacingNMapper (new PlainMapper ());
    String out = mapper.mapTypeToElementName (name);
    assertEquals (""Expected"", ""LOADSOFMONEY"", out);
}
",67,73
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestBadCharacterReplacingNMapper.java,"
public void testReplacementBadFirstNoChainedMapper () {
    String name = ""$LoadsOfMoney$"";
    BadCharacterReplacingNMapper mapper = new BadCharacterReplacingNMapper (null);
    mapper.setReplacement (new Character ('_'));
    String out = mapper.mapTypeToElementName (name);
    assertEquals (""Expected"", ""_LoadsOfMoney_"", out);
}
",75,82
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestBadCharacterReplacingNMapper.java,"
public void testReplacementBadFirstWithChainedMapper () {
    String name = ""$LOADS£OF$MONEY"";
    BadCharacterReplacingNMapper mapper = new BadCharacterReplacingNMapper (new PlainMapper ());
    mapper.setReplacement (new Character ('_'));
    String out = mapper.mapTypeToElementName (name);
    assertEquals (""Expected"", ""_LOADS_OF_MONEY"", out);
}
",84,91
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestBadCharacterReplacingNMapper.java,"
public void testReplacementGoodFirstNoChainedMapper () {
    String name = ""L$$$$$oads%OfMone$y$"";
    BadCharacterReplacingNMapper mapper = new BadCharacterReplacingNMapper (null);
    mapper.setReplacement (new Character ('_'));
    String out = mapper.mapTypeToElementName (name);
    assertEquals (""Expected"", ""L_____oads_OfMone_y_"", out);
}
",93,100
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestBadCharacterReplacingNMapper.java,"
public void testReplacementGoodFirstWithChainedMapper () {
    String name = ""L$OADSOFMONE$$$$$Y"";
    BadCharacterReplacingNMapper mapper = new BadCharacterReplacingNMapper (new PlainMapper ());
    mapper.setReplacement (new Character ('_'));
    String out = mapper.mapTypeToElementName (name);
    assertEquals (""Expected"", ""L_OADSOFMONE_____Y"", out);
}
",102,109
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestBadCharacterReplacingNMapper.java,"
public String mapTypeToElementName (String typeName) {
    return typeName;
}
",113,116
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/BetaBean.java,"
public BetaBean () {
}
",26,26
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/BetaBean.java,"
public BetaBean (String name) {
    setName (name);
}
",27,30
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/BetaBean.java,"
public String getName () {
    return name;
}
",32,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/BetaBean.java,"
public void setName (String name) {
    this.name = name;
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ComposerBean.java,"
public ComposerBean () {
}
",32,32
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ComposerBean.java,"
public ComposerBean (String forename, String surname, int born) {
    setForename (forename);
    setSurname (surname);
    setBorn (born);
}
",34,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ComposerBean.java,"
public int getBorn () {
    return born;
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ComposerBean.java,"
public String getForename () {
    return forename;
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ComposerBean.java,"
public String getSurname () {
    return surname;
}
",52,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ComposerBean.java,"
public void setBorn (int i) {
    born = i;
}
",57,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ComposerBean.java,"
public void setForename (String string) {
    forename = string;
}
",62,65
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ComposerBean.java,"
public void setSurname (String string) {
    surname = string;
}
",68,71
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ComposerBean.java,"
public int hashCode () {
    return born;
}
",73,76
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ComposerBean.java,"
public boolean equals (Object obj) {
    boolean result = false;
    if (obj instanceof ComposerBean) {
        ComposerBean composer = (ComposerBean) obj;
        result = born == composer.born && surname.equals (composer.surname) && forename.equals (composer.forename);
    }
    return result;
}
",78,90
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/impl/propertysuppression/TestPackageSuppressor.java,"
public void testExact () throws Exception {
    PackageSuppressor suppressor = new PackageSuppressor (""org.apache.commons.betwixt"");
    assertFalse (""Unrelated class"", suppressor.suppressProperty (String.class, String.class, ""bogus""));
    assertFalse (""Unrelated type"", suppressor.suppressProperty (XMLIntrospector.class, String.class, ""bogus""));
    assertTrue (""Type in package"", suppressor.suppressProperty (String.class, XMLIntrospector.class, ""bogus""));
    assertFalse (""Type in child package"", suppressor.suppressProperty (String.class, BeanWriter.class, ""bogus""));
}
",27,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/impl/propertysuppression/TestPackageSuppressor.java,"
public void testWild () throws Exception {
    PackageSuppressor suppressor = new PackageSuppressor (""org.apache.commons.betwixt.*"");
    assertFalse (""Unrelated class"", suppressor.suppressProperty (String.class, String.class, ""bogus""));
    assertFalse (""Unrelated type"", suppressor.suppressProperty (XMLIntrospector.class, String.class, ""bogus""));
    assertTrue (""Type in package"", suppressor.suppressProperty (String.class, XMLIntrospector.class, ""bogus""));
    assertTrue (""Type in child package"", suppressor.suppressProperty (String.class, BeanWriter.class, ""bogus""));
}
",36,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestDefaultPluralStemmer.java,"
public static Test suite () {
    return new TestSuite (TestDefaultPluralStemmer.class);
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestDefaultPluralStemmer.java,"
public TestDefaultPluralStemmer (String testName) {
    super (testName);
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestDefaultPluralStemmer.java,"
public void testNullMap () {
    DefaultPluralStemmer stemmer = new DefaultPluralStemmer ();
    try {
        stemmer.findPluralDescriptor (""test"", null);
        fail (""Should throw a nullpointer exception, since the map in the stemmer cannot be null"");
    } catch (NullPointerException npe) {
    }
}
",47,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestDefaultPluralStemmer.java,"
public void testFirstMatch () {
    ElementDescriptor des = new ElementDescriptor ();
    des.setQualifiedName (""FooBars"");
    des.setPropertyType (java.util.List.class);
    HashMap map = new HashMap ();
    map.put (""FooBars"", des);
    DefaultPluralStemmer dps = new DefaultPluralStemmer ();
    ElementDescriptor result = dps.findPluralDescriptor (""FooBar"", map);
    assertEquals (des, result);
}
",64,75
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestDefaultPluralStemmer.java,"
public void testSecondMatch () {
    ElementDescriptor des = new ElementDescriptor ();
    des.setQualifiedName (""FooBary"");
    des.setPropertyType (java.util.List.class);
    HashMap map = new HashMap ();
    map.put (""FooBaries"", des);
    DefaultPluralStemmer dps = new DefaultPluralStemmer ();
    ElementDescriptor result = dps.findPluralDescriptor (""FooBary"", map);
    assertEquals (des, result);
}
",80,90
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestDefaultPluralStemmer.java,"
public void testSecondNonMatch () {
    ElementDescriptor des = new ElementDescriptor ();
    des.setQualifiedName (""y"");
    des.setPropertyType (java.util.List.class);
    HashMap map = new HashMap ();
    map.put (""yies"", des);
    DefaultPluralStemmer dps = new DefaultPluralStemmer ();
    ElementDescriptor result = dps.findPluralDescriptor (""y"", map);
    assertNotNull (result);
}
",95,105
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestDefaultPluralStemmer.java,"
public void testThirdMatch () {
    ElementDescriptor des = new ElementDescriptor ();
    des.setQualifiedName (""y"");
    des.setPropertyType (java.util.List.class);
    HashMap map = new HashMap ();
    map.put (""y"", des);
    DefaultPluralStemmer dps = new DefaultPluralStemmer ();
    ElementDescriptor result = dps.findPluralDescriptor (""y"", map);
    assertEquals (des, result);
}
",111,121
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestDefaultPluralStemmer.java,"
public void testMultipleMatches () {
    ElementDescriptor des = new ElementDescriptor ();
    des.setQualifiedName (""y"");
    des.setPropertyType (java.util.List.class);
    ElementDescriptor desyes = new ElementDescriptor ();
    desyes.setQualifiedName (""yes"");
    desyes.setPropertyType (java.util.List.class);
    ElementDescriptor desyesno = new ElementDescriptor ();
    desyesno.setQualifiedName (""yesno"");
    desyesno.setPropertyType (java.util.List.class);
    HashMap map = new HashMap ();
    map.put (""y"", des);
    map.put (""yes"", desyes);
    map.put (""yesno"", desyesno);
    DefaultPluralStemmer dps = new DefaultPluralStemmer ();
    ElementDescriptor result = dps.findPluralDescriptor (""y"", map);
    assertEquals (des, result);
    result = dps.findPluralDescriptor (""yes"", map);
    assertEquals (desyes, result);
    result = dps.findPluralDescriptor (""yesno"", map);
    assertEquals (desyesno, result);
}
",127,149
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestDefaultPluralStemmer.java,"
public void testESPluralEndingMatch () {
    HashMap map = new HashMap ();
    ElementDescriptor index = new ElementDescriptor (""index"", ""index"", """");
    map.put (""index"", index);
    ElementDescriptor indexes = new ElementDescriptor (""indexes"", ""indexes"", """");
    map.put (""indexes"", indexes);
    ElementDescriptor patch = new ElementDescriptor (""patch"", ""patch"", """");
    map.put (""patch"", patch);
    ElementDescriptor patches = new ElementDescriptor (""patches"", ""patches"", """");
    map.put (""patches"", patches);
    DefaultPluralStemmer stemmer = new DefaultPluralStemmer ();
    ElementDescriptor result = stemmer.findPluralDescriptor (""index"", map);
    assertEquals (indexes, result);
    result = stemmer.findPluralDescriptor (""patches"", map);
    assertEquals (patches, result);
}
",154,174
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestDefaultPluralStemmer.java,"
public void testClosestMatch () {
    HashMap map = new HashMap ();
    ElementDescriptor yes1 = new ElementDescriptor (""yes1"", ""yes1"", """");
    map.put (""yes1"", yes1);
    ElementDescriptor yes12 = new ElementDescriptor (""yes12"", ""yes12"", """");
    map.put (""yes12"", yes12);
    ElementDescriptor yes123 = new ElementDescriptor (""yes123"", ""yes123"", """");
    map.put (""yes123"", yes123);
    DefaultPluralStemmer stemmer = new DefaultPluralStemmer ();
    ElementDescriptor result = stemmer.findPluralDescriptor (""yes"", map);
    assertEquals (yes1, result);
}
",179,191
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestBaseMappingStrategy.java,"
public TestBaseMappingStrategy (String testName) {
    super (testName);
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestBaseMappingStrategy.java,"
public void testArrayMapping () throws Exception {
    ReadContext context = new ReadContext (new BindingConfiguration (), new ReadConfiguration ());
    context.pushElement (""LibraryBeanWithArraySetter"");
    context.markClassMap (LibraryBeanWithArraySetter.class);
    context.pushElement (""books"");
    ActionMappingStrategy strategy = ActionMappingStrategy.DEFAULT;
    MappingAction action = strategy.getMappingAction ("""", ""books"", new AttributesImpl (), context);
    assertTrue (""Should be mapped to an array bind action"", action instanceof ArrayBindAction);
}
",41,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestCapitalizeNameMapper.java,"
public static Test suite () {
    return new TestSuite (TestDecapitalizeNameMapper.class);
}
",33,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestCapitalizeNameMapper.java,"
public TestCapitalizeNameMapper (String testName) {
    super (testName);
}
",38,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestCapitalizeNameMapper.java,"
public void testCapitalize () {
    CapitalizeNameMapper mapper = new CapitalizeNameMapper ();
    String result = mapper.mapTypeToElementName (""FOOBAR"");
    assertEquals (""FOOBAR"", result);
    result = mapper.mapTypeToElementName (""fooBar"");
    assertEquals (""FooBar"", result);
    result = mapper.mapTypeToElementName (""foobar"");
    assertEquals (""Foobar"", result);
}
",43,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/AlphaBean.java,"
public BetaBean getBetaBean () {
    return betaBean;
}
",33,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/AlphaBean.java,"
public void setBetaBean (BetaBean betaBean) {
    this.betaBean = betaBean;
}
",38,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/AlphaBean.java,"
public Collection getChildren () {
    return children;
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/AlphaBean.java,"
public void addChild (BetaBean bean) {
    this.children.add (bean);
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/AlphaBean.java,"
public Map getMapped () {
    return mapped;
}
",53,56
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/AlphaBean.java,"
public void put (String key, BetaBean value) {
    this.mapped.put (key, value);
}
",58,61
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/AlphaBean.java,"
public String getName () {
    return name;
}
",63,66
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/AlphaBean.java,"
public void setName (String name) {
    this.name = name;
}
",68,71
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestElementsIO.java,"
public TestElementsIO (String name) {
    super (name);
}
",44,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestElementsIO.java,"
public void testCapitalizeNameMapper () throws Exception {
    doTest (new CapitalizeNameMapper (), ""capitalize name mapper"");
}
",51,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestElementsIO.java,"
public void testDecapitalizeNameMapper () throws Exception {
    doTest (new DecapitalizeNameMapper (), ""decapitalize name mapper"");
}
",57,61
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestElementsIO.java,"
public void testDefaultElementMapper () throws Exception {
    doTest (new DefaultNameMapper (), ""default name mapper"");
}
",63,67
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestElementsIO.java,"
public void testHyphenatedNameMapper () throws Exception {
    doTest (new HyphenatedNameMapper (), ""hyphenated name mapper"");
}
",69,73
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestElementsIO.java,"
private void doTest (NameMapper mapper, String testName) throws Exception {
    Elements elements = new Elements ();
    elements.addElement (new Element (""a""));
    elements.addElement (new Element (""b""));
    elements.addElement (new Element (""c""));
    StringWriter out = new StringWriter ();
    BeanWriter writer = newBeanWriter (out, mapper);
    writer.setWriteEmptyElements (true);
    writer.write (elements);
    writer.flush ();
    String xmlOut = out.toString ();
    StringReader in = new StringReader (xmlOut);
    BeanReader reader = new BeanReader ();
    reader.setXMLIntrospector (newXMLIntrospector (mapper));
    reader.registerBeanClass (Elements.class);
    Elements result = (Elements) reader.parse (in);
    assertNotNull (""Element 'a' is null ("" + testName + "")"", result.getElement (""a""));
    assertNotNull (""Element 'b' is null ("" + testName + "")"", result.getElement (""b""));
    assertNotNull (""Element 'c' is null ("" + testName + "")"", result.getElement (""c""));
}
",75,111
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestElementsIO.java,"
private BeanWriter newBeanWriter (Writer writer, NameMapper mapper) {
    BeanWriter result = new BeanWriter (writer);
    result.setWriteEmptyElements (true);
    result.setXMLIntrospector (newXMLIntrospector (mapper));
    result.setEndOfLine (""\n"");
    result.enablePrettyPrint ();
    result.getBindingConfiguration ().setMapIDs (false);
    return result;
}
",113,123
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestElementsIO.java,"
protected String getParameterTypes (JavaParameter [] parameters) {
    StringBuffer sb = new StringBuffer ();
    for (int i = 0; i < parameters.length; i ++) {
        if (i > 0) {
            sb.append ("","");
        }
        getTransformedQualifiedName (parameters [i].getType ().getJavaClass (), sb);
        for (int j = 0; j < parameters [i].getType ().getDimensions (); j ++) {
            sb.append (""[]"");
        }
    }
    return sb.toString ();
}
",124,141
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestElementsIO.java,"
private XMLIntrospector newXMLIntrospector (NameMapper mapper) {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setAttributesForPrimitives (true);
    introspector.getConfiguration ().setWrapCollectionsInElement (false);
    introspector.getConfiguration ().setElementNameMapper (mapper);
    return introspector;
}
",143,150
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/Element.java,"
public Element () {
}
",31,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/Element.java,"
public Element (String value) {
    this.value = value;
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/Element.java,"
public String getValue () {
    return value;
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/Element.java,"
public void setValue (String value) {
    this.value = value;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ElementsList.java,"
public Iterator getElements () {
    return elements.iterator ();
}
",29,32
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ElementsList.java,"
public void addElement (Element element) {
    elements.add (element);
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ElementsList.java,"
public Element get (int index) {
    return (Element) elements.get (index);
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestSimpleTypeMapper.java,"
public TestSimpleTypeMapper (String name) {
    super (name);
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestSimpleTypeMapper.java,"
public void testDefaultExceptionType () throws Exception {
    assertEquals (TypeBindingStrategy.BindingType.COMPLEX, TypeBindingStrategy.DEFAULT.bindingType (RuntimeException.class));
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestSimpleTypeMapper.java,"
public void testNewStrategy () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setSimpleTypeMapper (new StringsAsElementsSimpleTypeMapper ());
    introspector.getConfiguration ().setWrapCollectionsInElement (true);
    XMLBeanInfo beanInfo = introspector.introspect (TuneBean.class);
    ElementDescriptor tuneBeanDescriptor = beanInfo.getElementDescriptor ();
    AttributeDescriptor [] tuneBeanAttributes = tuneBeanDescriptor.getAttributeDescriptors ();
    assertEquals (""Only expect one attribute"", 1, tuneBeanAttributes.length);
    AttributeDescriptor recordedAttribute = tuneBeanAttributes [0];
    assertEquals (""Expected recorded to be bound as an attribute"", ""recorded"", recordedAttribute.getLocalName ());
    ElementDescriptor [] tuneBeanChildElements = tuneBeanDescriptor.getElementDescriptors ();
    assertEquals (""Expected three child elements"", 3, tuneBeanChildElements.length);
    int bits = 0;
    for (int i = 0, size = tuneBeanChildElements.length; i < size; i ++) {
        String localName = tuneBeanChildElements [i].getLocalName ();
        if (""composers"".equals (localName)) {
            bits = bits | 1;
        }
        if (""artist"".equals (localName)) {
            bits = bits | 2;
        }
        if (""name"".equals (localName)) {
            bits = bits | 4;
        }
    }
    assertEquals (""Every element present"", 7, bits);
}
",53,89
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestSimpleTypeMapper.java,"
public void testWrite () throws Exception {
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getXMLIntrospector ().getConfiguration ().setSimpleTypeMapper (new StringsAsElementsSimpleTypeMapper ());
    writer.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (true);
    writer.getBindingConfiguration ().setMapIDs (false);
    TuneBean bean = new TuneBean (""On The Run"", ""Pink Floyd"", 1972);
    bean.addComposer (new ComposerBean (""David"", ""Gilmour"", 1944));
    bean.addComposer (new ComposerBean (""Roger"", ""Waters"", 1944));
    writer.write (bean);
    String xml = out.getBuffer ().toString ();
    String expected = ""<?xml version='1.0'?>"" + ""<TuneBean recorded='1972'>"" + ""    <name>On The Run</name>"" + ""    <artist>Pink Floyd</artist>"" + ""    <composers>"" + ""       <composer born='1944'>"" + ""           <forename>David</forename>"" + ""           <surname>Gilmour</surname>"" + ""       </composer>"" + ""       <composer born='1944'>"" + ""           <forename>Roger</forename>"" + ""           <surname>Waters</surname>"" + ""       </composer>"" + ""   </composers>"" + ""</TuneBean>"";
    xmlAssertIsomorphicContent (parseString (xml), parseString (expected), true);
}
",91,124
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestSimpleTypeMapper.java,"
public void testRead () throws Exception {
    String xml = ""<?xml version='1.0'?>"" + ""<TuneBean recorded='1972'>"" + ""    <name>On The Run</name>"" + ""    <artist>Pink Floyd</artist>"" + ""    <composers>"" + ""       <composer born='1944'>"" + ""           <forename>David</forename>"" + ""           <surname>Gilmour</surname>"" + ""       </composer>"" + ""       <composer born='1944'>"" + ""           <forename>Roger</forename>"" + ""           <surname>Waters</surname>"" + ""       </composer>"" + ""   </composers>"" + ""</TuneBean>"";
    StringReader in = new StringReader (xml);
    BeanReader reader = new BeanReader ();
    reader.getXMLIntrospector ().getConfiguration ().setSimpleTypeMapper (new StringsAsElementsSimpleTypeMapper ());
    reader.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (true);
    reader.getBindingConfiguration ().setMapIDs (false);
    reader.registerBeanClass (TuneBean.class);
    TuneBean bean = (TuneBean) reader.parse (in);
    assertNotNull (""Parsing failed"", bean);
    assertEquals (""Name value"", ""On The Run"", bean.getName ());
    assertEquals (""Artist value"", ""Pink Floyd"", bean.getArtist ());
    assertEquals (""Recorded value"", 1972, bean.getRecorded ());
    Collection expectedComposers = new ArrayList ();
    expectedComposers.add (new ComposerBean (""David"", ""Gilmour"", 1944));
    expectedComposers.add (new ComposerBean (""Roger"", ""Waters"", 1944));
    assertTrue (""Right composers"", bean.sameComposers (expectedComposers));
}
",126,165
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestSimpleTypeMapper.java,"
public Binding bind (String propertyName, Class propertyType, IntrospectionConfiguration configuration) {
    if (String.class.equals (propertyType)) {
        return SimpleTypeMapper.Binding.ELEMENT;
    }
    return SimpleTypeMapper.Binding.ATTRIBUTE;
}
",174,184
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestHyphenatedNameMapper.java,"
public static Test suite () {
    return new TestSuite (TestHyphenatedNameMapper.class);
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestHyphenatedNameMapper.java,"
public TestHyphenatedNameMapper (String testName) {
    super (testName);
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestHyphenatedNameMapper.java,"
public void testLowerCase () {
    HyphenatedNameMapper mapper = new HyphenatedNameMapper ();
    String result = mapper.mapTypeToElementName (""FooBar"");
    assertEquals (""foo-bar"", result);
}
",49,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestHyphenatedNameMapper.java,"
public void testLowerCaseViaBeanDescriptor () {
    HyphenatedNameMapper mapper = new HyphenatedNameMapper (false, ""_"");
    BeanDescriptor bd = new BeanDescriptor (getClass ());
    String result = mapper.mapTypeToElementName (bd.getName ());
    assertEquals (""test_hyphenated_name_mapper"", result);
}
",56,62
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestHyphenatedNameMapper.java,"
public void testUpperCase () {
    HyphenatedNameMapper mapper = new HyphenatedNameMapper (true, ""_"");
    String result = mapper.mapTypeToElementName (""FooBar"");
    assertEquals (""FOO_BAR"", result);
}
",64,69
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestHyphenatedNameMapper.java,"
public void testUpperCaseViaProperties () {
    HyphenatedNameMapper mapper = new HyphenatedNameMapper ();
    mapper.setUpperCase (true);
    mapper.setSeparator (""_"");
    String result = mapper.mapTypeToElementName (""FooBar"");
    assertEquals (""FOO_BAR"", result);
}
",71,78
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestHyphenatedNameMapper.java,"
public void testUpperCaseLongViaProperties () {
    HyphenatedNameMapper mapper = new HyphenatedNameMapper (true, ""__"");
    String result = mapper.mapTypeToElementName (""FooBarFooBar"");
    assertEquals (""FOO__BAR__FOO__BAR"", result);
}
",83,89
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestHyphenatedNameMapper.java,"
public void testBeanWithAdd () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setElementNameMapper (new HyphenatedNameMapper ());
    introspector.introspect (new ArrayList ());
}
",91,102
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestObjectStringConverters.java,"
public static Test suite () {
    return new TestSuite (TestObjectStringConverters.class);
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestObjectStringConverters.java,"
public TestObjectStringConverters (String testName) {
    super (testName);
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestObjectStringConverters.java,"
public void testBaseConverter () {
    Object test = new Object () {
        public String toString () {
            return ""funciporcini"";
        }
    }
    ;
    ObjectStringConverter converter = new ObjectStringConverter ();
    String stringFromObject = converter.objectToString (null, Object.class, ""raspberry"", dummyContext);
    assertEquals (""Null should return empty string"", """", stringFromObject);
    stringFromObject = converter.objectToString (test, Object.class, ""raspberry"", dummyContext);
    assertEquals (""Object should return toString"", ""funciporcini"", stringFromObject);
    Object objectFromString = converter.stringToObject (""Mungo Jerry"", Object.class, ""strawberry"", dummyContext);
    assertEquals (""String should return itself"", ""Mungo Jerry"", objectFromString);
}
",49,67
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestObjectStringConverters.java,"
public String toString () {
    return ""funciporcini"";
}
",53,56
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestObjectStringConverters.java,"
public void testConvertUtilsConverter () throws Exception {
    ObjectStringConverter converter = new ConvertUtilsObjectStringConverter ();
    commonTestForConvertUtilsConverters (converter);
}
",70,74
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestObjectStringConverters.java,"
private void commonTestForConvertUtilsConverters (ObjectStringConverter objectStringConverter) {
    Converter converter = new Converter () {
        public Object convert (Class type, Object value) {
            if (type == SecurityManager.class) {
                return ""Life, The Universe And Everything"";
            }
            return ""The answer is "" + value.toString ();
        }
    }
    ;
    Long test = new Long (42);
    ConvertUtils.register (converter, Object.class);
    ConvertUtils.register (converter, String.class);
    ConvertUtils.register (converter, SecurityManager.class);
    String stringFromObject = objectStringConverter.objectToString (null, Object.class, ""gooseberry"", dummyContext);
    assertEquals (""Null should return empty string"", """", stringFromObject);
    stringFromObject = objectStringConverter.objectToString (test, Object.class, ""logonberry"", dummyContext);
    assertEquals (""Normal object conversion (1)"", ""The answer is 42"", stringFromObject);
    Object objectFromString = objectStringConverter.stringToObject (""Forty Two"", Object.class, ""damsen"", dummyContext);
    assertEquals (""Normal object conversion (2)"", ""The answer is Forty Two"", objectFromString);
    objectFromString = objectStringConverter.stringToObject (""Trillian"", SecurityManager.class, ""cranberry"", dummyContext);
    assertEquals (""Special object conversion"", ""Life, The Universe And Everything"", objectFromString);
    ConvertUtils.deregister ();
}
",76,110
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestObjectStringConverters.java,"
public Object convert (Class type, Object value) {
    if (type == SecurityManager.class) {
        return ""Life, The Universe And Everything"";
    }
    return ""The answer is "" + value.toString ();
}
",80,87
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestObjectStringConverters.java,"
public void testDefaultOSConverter () {
    ObjectStringConverter converter = new DefaultObjectStringConverter ();
    commonTestForConvertUtilsConverters (converter);
}
",112,116
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestObjectStringConverters.java,"
public void testDefaultOSConverterDates () {
    Converter converter = new Converter () {
        public Object convert (Class type, Object value) {
            return ""Arthur Dent"";
        }
    }
    ;
    ConvertUtils.register (converter, java.sql.Date.class);
    converter = new Converter () {
        public Object convert (Class type, Object value) {
            return ""Ford Prefect"";
        }
    }
    ;
    ConvertUtils.register (converter, String.class);
    converter = new Converter () {
        public Object convert (Class type, Object value) {
            return ""Marvin"";
        }
    }
    ;
    ConvertUtils.register (converter, java.util.Date.class);
    java.util.Date utilNow = new java.util.Date ();
    String nowAsString = utilNow.toString ();
    java.sql.Date sqlNow = new java.sql.Date (System.currentTimeMillis ());
    ObjectStringConverter objectStringConverter = new DefaultObjectStringConverter ();
    String stringFromObject = objectStringConverter.objectToString (utilNow, java.util.Date.class, ""blackcurrent"", dummyContext);
    assertEquals (""String output same as java.util.Date.toString() (1)"", utilNow.toString (), stringFromObject);
    stringFromObject = objectStringConverter.objectToString (sqlNow, java.util.Date.class, ""redcurrent"", dummyContext);
    assertEquals (""String output same as java.util.Date.toString() (2)"", utilNow.toString (), stringFromObject);
    stringFromObject = objectStringConverter.objectToString (utilNow, java.sql.Date.class, ""whitecurrent"", dummyContext);
    assertEquals (""Should use converter (2)"", ""Ford Prefect"", stringFromObject);
    Object objectFromString = objectStringConverter.stringToObject (nowAsString, java.sql.Date.class, ""blackberry"", dummyContext);
    assertEquals (""Should use converter (3)"", ""Ford Prefect"", stringFromObject);
    objectFromString = objectStringConverter.stringToObject (nowAsString, java.util.Date.class, ""tayberry"", dummyContext);
    assertTrue (""Date should be returned"", objectFromString instanceof java.util.Date);
    assertEquals (""Date returned should be the same"", nowAsString, objectFromString.toString ());
    ConvertUtils.deregister ();
}
",118,178
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestObjectStringConverters.java,"
public Object convert (Class type, Object value) {
    return ""Arthur Dent"";
}
",124,127
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestObjectStringConverters.java,"
public Object convert (Class type, Object value) {
    return ""Ford Prefect"";
}
",134,137
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestObjectStringConverters.java,"
public Object convert (Class type, Object value) {
    return ""Marvin"";
}
",144,147
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TuneBean.java,"
public TuneBean () {
}
",38,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TuneBean.java,"
public TuneBean (String name, String artist, int recorded) {
    setName (name);
    setArtist (artist);
    setRecorded (recorded);
}
",39,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TuneBean.java,"
public String getArtist () {
    return artist;
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TuneBean.java,"
public Iterator getComposers () {
    return composers.iterator ();
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TuneBean.java,"
public String getName () {
    return name;
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TuneBean.java,"
public int getRecorded () {
    return recorded;
}
",61,64
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TuneBean.java,"
public void setArtist (String string) {
    artist = string;
}
",66,69
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TuneBean.java,"
public void addComposer (ComposerBean composer) {
    composers.add (composer);
}
",71,74
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TuneBean.java,"
public void setName (String string) {
    name = string;
}
",76,79
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TuneBean.java,"
public void setRecorded (int i) {
    recorded = i;
}
",81,84
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TuneBean.java,"
public boolean sameComposers (Collection otherComposers) {
    if (otherComposers.size () != composers.size ()) {
        return false;
    }
    for (Iterator it = composers.iterator (); it.hasNext ();) {
        Object object = it.next ();
        if (! otherComposers.contains (object)) {
            return false;
        }
    }
    return true;
}
",86,102
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ABCBean.java,"
public ABCBean () {
}
",31,31
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ABCBean.java,"
public ABCBean (String a, String b, String c) {
    setA (a);
    setB (b);
    setC (c);
}
",33,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ABCBean.java,"
public String getA () {
    return a;
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ABCBean.java,"
public String getB () {
    return b;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ABCBean.java,"
public String getC () {
    return c;
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ABCBean.java,"
public void setA (String string) {
    a = string;
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ABCBean.java,"
public void setB (String string) {
    b = string;
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/ABCBean.java,"
public void setC (String string) {
    c = string;
}
",65,68
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestValueSuppressionStrategy.java,"
public void testALLOW_ALL_VALUESStrategy () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setAttributesForPrimitives (true);
    XMLBeanInfo beanInfo = introspector.introspect (AddressBean.class);
    AttributeDescriptor [] descriptors = beanInfo.getElementDescriptor ().getAttributeDescriptors ();
    assertTrue (descriptors.length > 0);
    for (int i = 0; i < descriptors.length; i ++) {
        assertFalse (ValueSuppressionStrategy.ALLOW_ALL_VALUES.suppressAttribute (descriptors [i], ""Arbitrary Value""));
        assertFalse (ValueSuppressionStrategy.ALLOW_ALL_VALUES.suppressAttribute (descriptors [i], """"));
        assertFalse (ValueSuppressionStrategy.ALLOW_ALL_VALUES.suppressAttribute (descriptors [i], null));
    }
}
",29,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestNamespaces.java,"
public TestNamespaces (String name) {
    super (name);
}
",30,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestNamespaces.java,"
public void testNamespacePrefixMapper () {
    NamespacePrefixMapper mapper = new NamespacePrefixMapper ();
    mapper.setPrefix (""http://www.w3.org/2001/XMLSchema"", ""xsd"");
    assertEquals (""Expected prefix set earlier"", ""xsd"", mapper.getPrefix (""http://www.w3.org/2001/XMLSchema""));
}
",35,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestNamespaces.java,"
public void testNamespacePrefixMapperPrefixGeneration () {
    NamespacePrefixMapper mapper = new NamespacePrefixMapper ();
    mapper.setPrefix (""http://www.w3.org/2001/XMLSchema"", ""xsd"");
    assertNotNull (""Expected prefix assigned not to be null"", mapper.getPrefix (""http://jakarta.apache.org/commons/Betwixt""));
}
",42,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestNamespaces.java,"
public void testNamespacePrefixMapperMatchingPrefix () {
    NamespacePrefixMapper mapper = new NamespacePrefixMapper ();
    mapper.setPrefix (""http://www.w3.org/2001/XMLSchema"", ""bt1"");
    String prefix = mapper.getPrefix (""http://jakarta.apache.org/commons/Betwixt"");
    assertFalse (""Generated should not clash"", prefix.equals (mapper.getPrefix (""http://www.w3.org/2001/XMLSchema"")));
}
",49,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/Elements.java,"
public Elements () {
}
",35,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/Elements.java,"
public void addElement (Element element) {
    elements.put (element.getValue (), element);
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/Elements.java,"
public Iterator getElements () {
    return elements.values ().iterator ();
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/Elements.java,"
public Element getElement (String name) {
    return (Element) elements.get (name);
}
",49,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestConversionFlavour.java,"
public TestConversionFlavour (String testName) {
    super (testName);
}
",31,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestConversionFlavour.java,"
public void testRead () throws Exception {
    String xml = ""<alpha>"" + ""        <name>BananasSIX</name>"" + ""        <betaBean>"" + ""            <name>PeachONE</name>"" + ""        </betaBean>"" + ""        <children>"" + ""            <child>"" + ""                <name>PeachTWO</name>"" + ""            </child>"" + ""        </children>"" + ""        <mapped>"" + ""          <entry>"" + ""            <key>Key</key>"" + ""            <value>"" + ""               <name>PeachTHREE</name>"" + ""            </value>"" + ""          </entry>"" + ""        </mapped>"" + ""        </alpha>"";
    StringReader in = new StringReader (xml);
    BeanReader reader = new BeanReader ();
    reader.getBindingConfiguration ().setMapIDs (false);
    reader.getBindingConfiguration ().setObjectStringConverter (new PrependingConverter ());
    reader.registerBeanClass (AlphaBean.class);
    AlphaBean bean = (AlphaBean) reader.parse (in);
    assertNotNull (bean);
    assertEquals (""SIX"", bean.getName ());
    BetaBean betaBean = bean.getBetaBean ();
    assertNotNull (betaBean);
    assertEquals (""ONE"", betaBean.getName ());
    Collection children = bean.getChildren ();
    assertEquals (1, children.size ());
    BetaBean child = (BetaBean) children.iterator ().next ();
    assertEquals (""TWO"", child.getName ());
}
",37,74
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestConversionFlavour.java,"
public void testWrite () throws Exception {
    AlphaBean alphaBean = new AlphaBean ();
    alphaBean.setName (""SIX"");
    BetaBean betaBeanOne = new BetaBean (""ONE"");
    alphaBean.setBetaBean (betaBeanOne);
    BetaBean betaBeanTwo = new BetaBean (""TWO"");
    alphaBean.addChild (betaBeanTwo);
    BetaBean betaBeanThree = new BetaBean (""THREE"");
    alphaBean.put (""Key"", betaBeanThree);
    StringWriter out = new StringWriter ();
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.getBindingConfiguration ().setObjectStringConverter (new PrependingConverter ());
    writer.write (alphaBean);
    String xml = ""<alpha>"" + ""        <name>BananasSIX</name>"" + ""        <betaBean>"" + ""            <name>PeachONE</name>"" + ""        </betaBean>"" + ""        <children>"" + ""            <child>"" + ""                <name>PeachTWO</name>"" + ""            </child>"" + ""        </children>"" + ""        <mapped>"" + ""          <entry>"" + ""            <key>Key</key>"" + ""            <value>"" + ""               <name>PeachTHREE</name>"" + ""            </value>"" + ""          </entry>"" + ""        </mapped>"" + ""        </alpha>"";
    xmlAssertIsomorphicContent (parseString (xml), parseString (out), true);
}
",76,114
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestConversionFlavour.java,"
public String objectToString (Object object, Class type, String flavour, Context context) {
    String result = super.objectToString (object, type, flavour, context);
    if (flavour != null) {
        result = flavour + result;
    }
    return result;
}
",120,129
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestConversionFlavour.java,"
public Object stringToObject (String value, Class type, String flavour, Context context) {
    if (flavour != null) {
        value = value.substring (flavour.length ());
    }
    return super.stringToObject (value, type, flavour, context);
}
",131,139
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestDefaultNameMapper.java,"
public static Test suite () {
    return new TestSuite (TestDefaultNameMapper.class);
}
",33,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestDefaultNameMapper.java,"
public TestDefaultNameMapper (String testName) {
    super (testName);
}
",38,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestDefaultNameMapper.java,"
public void testDefault () {
    String [] values = {""foo"", ""Foo"", ""FooBar"", ""fooBar"", ""FOOBAR"", ""FOOBar"", ""FoOBaR""};
    DefaultNameMapper mapper = new DefaultNameMapper ();
    for (int i = 0; i < values.length; i ++) {
        String result = mapper.mapTypeToElementName (values [i]);
        assertEquals (values [i], result);
    }
}
",47,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestDefaultNameMapper.java,"
public void testBadCharBadFirstOne () {
    String name = ""$LoadsOfMoney"";
    DefaultNameMapper mapper = new DefaultNameMapper ();
    String out = mapper.mapTypeToElementName (name);
    assertEquals (""Expected"", ""LoadsOfMoney"", out);
}
",60,66
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestDefaultNameMapper.java,"
public void testBadCharBadFirstTwo () {
    String name = ""$LOADS£OF$MONEY"";
    DefaultNameMapper mapper = new DefaultNameMapper ();
    String out = mapper.mapTypeToElementName (name);
    assertEquals (""Expected"", ""LOADSOFMONEY"", out);
}
",68,74
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestDefaultNameMapper.java,"
public void testBadCharGoodFirstOne () {
    String name = ""L$oads%OfMone$y$"";
    DefaultNameMapper mapper = new DefaultNameMapper ();
    String out = mapper.mapTypeToElementName (name);
    assertEquals (""Expected"", ""LoadsOfMoney"", out);
}
",76,82
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestDefaultNameMapper.java,"
public void testBadCharGoodFirstTwo () {
    String name = ""LOADSOFMONE$$Y"";
    DefaultNameMapper mapper = new DefaultNameMapper ();
    String out = mapper.mapTypeToElementName (name);
    assertEquals (""Expected"", ""LOADSOFMONEY"", out);
}
",84,90
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestIdStorageStrategy.java,"
public TestIdStorageStrategy (String testName) {
    super (testName);
}
",33,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestIdStorageStrategy.java,"
public void testWrite () throws Exception {
    final Element alpha = new Element (""ONE"");
    Element beta = new Element (""TWO"");
    ElementsList elements = new ElementsList ();
    elements.addElement (alpha);
    elements.addElement (beta);
    IdStoringStrategy storingStrategy = new DefaultIdStoringStrategy () {
        public String getReferenceFor (Context context, Object bean) {
            String result = null;
            if (bean == alpha) {
                result = ""ALPHA"";
            }
            else {
                result = super.getReferenceFor (context, bean);
            }
            return result;
        } public void setReference (Context context, Object bean, String id) {
            if (bean != alpha) {
                super.setReference (context, bean, id);
            }
        }
    }
    ;
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setIdMappingStrategy (storingStrategy);
    writer.write (elements);
    String expected = ""<?xml version='1.0'?>"" + ""<ElementsList id='1'>"" + ""   <elements>"" + ""       <element idref='ALPHA'/>"" + ""       <element id='2'>"" + ""           <value>TWO</value>"" + ""       </element>"" + ""   </elements>"" + ""</ElementsList>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (out));
}
",38,90
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestIdStorageStrategy.java,"
public String getReferenceFor (Context context, Object bean) {
    String result = null;
    if (bean == alpha) {
        result = ""ALPHA"";
    }
    else {
        result = super.getReferenceFor (context, bean);
    }
    return result;
}
",50,62
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestIdStorageStrategy.java,"
public void setReference (Context context, Object bean, String id) {
    if (bean != alpha) {
        super.setReference (context, bean, id);
    }
}
",64,70
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestIdStorageStrategy.java,"
public void testRead () throws Exception {
    String xml = ""<?xml version='1.0'?>"" + ""<ElementsList id='1'>"" + ""   <elements>"" + ""       <element idref='ALPHA'/>"" + ""       <element id='2'>"" + ""           <value>TWO</value>"" + ""       </element>"" + ""   </elements>"" + ""</ElementsList>"";
    final Element alpha = new Element (""ONE"");
    IdStoringStrategy storingStrategy = new DefaultIdStoringStrategy () {
        public void setReference (Context context, Object bean, String id) {
            if (bean != alpha) {
                super.setReference (context, bean, id);
            }
        } public Object getReferenced (Context context, String id) {
            if (""ALPHA"".equals (id)) {
                return alpha;
            }
            return getReferenced (context, id);
        }
    }
    ;
    BeanReader reader = new BeanReader ();
    reader.getBindingConfiguration ().setIdMappingStrategy (storingStrategy);
    reader.registerBeanClass (ElementsList.class);
    ElementsList elements = (ElementsList) reader.parse (new StringReader (xml));
    assertNotNull (elements);
    Element one = elements.get (0);
    assertTrue (one == alpha);
    Element two = elements.get (1);
    assertNotNull (two);
}
",92,138
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestIdStorageStrategy.java,"
public void setReference (Context context, Object bean, String id) {
    if (bean != alpha) {
        super.setReference (context, bean, id);
    }
}
",110,116
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestIdStorageStrategy.java,"
public Object getReferenced (Context context, String id) {
    if (""ALPHA"".equals (id)) {
        return alpha;
    }
    return getReferenced (context, id);
}
",118,125
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestIdStorageStrategy.java,"
public void testWriteWithOptions () throws Exception {
    final Element alpha = new Element (""ONE"");
    Element beta = new Element (""TWO"");
    ElementsList elements = new ElementsList ();
    elements.addElement (alpha);
    elements.addElement (beta);
    String MAPPING = ""<?xml version='1.0'?>"" + ""<betwixt-config>"" + ""  <class name=\"""" + ElementsList.class.getName () + ""\"">"" + ""    <element name=\""ElementsList\"">"" + ""      <option>"" + ""        <name>id-strategy-prefix</name>"" + ""        <value>alice</value>"" + ""      </option>"" + ""      <element name=\""elements\"">"" + ""        <element property=\""elements\"">"" + ""          <option>"" + ""            <name>id-strategy-prefix</name>"" + ""            <value>bob</value>"" + ""          </option>"" + ""        </element>"" + ""      </element>"" + ""    </element>"" + ""  </class>"" + ""</betwixt-config>"";
    IdStoringStrategy storingStrategy = new DefaultIdStoringStrategy () {
        public String getReferenceFor (Context context, Object bean) {
            String result = null;
            if (bean instanceof ElementsList) {
                assertNotNull (context.getOptions ());
                assertEquals (""Checking ElementsList option"", ""alice"", context.getOptions ().getValue (""id-strategy-prefix""));
            }
            if (bean instanceof Element) {
                assertNotNull (context.getOptions ());
                assertEquals (""Checking Element option"", ""bob"", context.getOptions ().getValue (""id-strategy-prefix""));
            }
            if (bean == alpha) {
                result = ""ALPHA"";
            }
            else {
                result = super.getReferenceFor (context, bean);
            }
            return result;
        } public void setReference (Context context, Object bean, String id) {
            if (bean != alpha) {
                super.setReference (context, bean, id);
            }
        }
    }
    ;
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setIdMappingStrategy (storingStrategy);
    writer.getXMLIntrospector ().register (new InputSource (new StringReader (MAPPING)));
    writer.write (elements);
    String expected = ""<?xml version='1.0'?>"" + ""<ElementsList id='1'>"" + ""   <elements>"" + ""       <Element idref='ALPHA'/>"" + ""       <Element id='2'>"" + ""           <value>TWO</value>"" + ""       </Element>"" + ""   </elements>"" + ""</ElementsList>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (out));
}
",141,224
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestIdStorageStrategy.java,"
public String getReferenceFor (Context context, Object bean) {
    String result = null;
    if (bean instanceof ElementsList) {
        assertNotNull (context.getOptions ());
        assertEquals (""Checking ElementsList option"", ""alice"", context.getOptions ().getValue (""id-strategy-prefix""));
    }
    if (bean instanceof Element) {
        assertNotNull (context.getOptions ());
        assertEquals (""Checking Element option"", ""bob"", context.getOptions ().getValue (""id-strategy-prefix""));
    }
    if (bean == alpha) {
        result = ""ALPHA"";
    }
    else {
        result = super.getReferenceFor (context, bean);
    }
    return result;
}
",173,195
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestIdStorageStrategy.java,"
public void setReference (Context context, Object bean, String id) {
    if (bean != alpha) {
        super.setReference (context, bean, id);
    }
}
",197,203
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestIdStorageStrategy.java,"
public void testWriteWithParentOptions () throws Exception {
    AlphaBean alpha = new AlphaBean ();
    alpha.setName (""apple"");
    BetaBean beta = new BetaBean ();
    beta.setName (""banana"");
    alpha.setBetaBean (beta);
    String MAPPING = ""<?xml version='1.0'?>"" + ""<betwixt-config>"" + ""  <class name=\"""" + AlphaBean.class.getName () + ""\"">"" + ""    <element name=\""alpha\"">"" + ""      <element name=\""name\"" property=\""name\"" />"" + ""      <element property=\""betaBean\"">"" + ""        <option>"" + ""          <name>id-strategy-prefix</name>"" + ""          <value>parent</value>"" + ""        </option>"" + ""      </element>"" + ""    </element>"" + ""  </class>"" + ""  <class name=\"""" + BetaBean.class.getName () + ""\"">"" + ""    <element name=\""beta\"">"" + ""      <element name=\""name\"" property=\""name\"" />"" + ""    </element>"" + ""  </class>"" + ""</betwixt-config>"";
    IdStoringStrategy storingStrategy = new DefaultIdStoringStrategy () {
        public String getReferenceFor (Context context, Object bean) {
            if (bean instanceof BetaBean) {
                assertNotNull (context.getOptions ());
                assertEquals (""Checking BetaBean option"", ""parent"", context.getOptions ().getValue (""id-strategy-prefix""));
            }
            return super.getReferenceFor (context, bean);
        }
    }
    ;
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setIdMappingStrategy (storingStrategy);
    writer.getXMLIntrospector ().register (new InputSource (new StringReader (MAPPING)));
    writer.write (alpha);
    String expected = ""<?xml version='1.0'?>"" + ""<alpha id=\""1\"">"" + ""  <name>apple</name>"" + ""  <beta id=\""2\"">"" + ""    <name>banana</name>"" + ""  </beta>"" + ""</alpha>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (out));
}
",226,284
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestIdStorageStrategy.java,"
public String getReferenceFor (Context context, Object bean) {
    if (bean instanceof BetaBean) {
        assertNotNull (context.getOptions ());
        assertEquals (""Checking BetaBean option"", ""parent"", context.getOptions ().getValue (""id-strategy-prefix""));
    }
    return super.getReferenceFor (context, bean);
}
",257,265
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestIdStorageStrategy.java,"
public void testWriteWithTargetOptions () throws Exception {
    AlphaBean alpha = new AlphaBean ();
    alpha.setName (""apple"");
    BetaBean beta = new BetaBean ();
    beta.setName (""banana"");
    alpha.setBetaBean (beta);
    String MAPPING = ""<?xml version='1.0'?>"" + ""<betwixt-config>"" + ""  <class name=\"""" + AlphaBean.class.getName () + ""\"">"" + ""    <element name=\""alpha\"">"" + ""      <element name=\""name\"" property=\""name\"" />"" + ""      <element property=\""betaBean\"" />"" + ""    </element>"" + ""  </class>"" + ""  <class name=\"""" + BetaBean.class.getName () + ""\"">"" + ""    <element name=\""beta\"">"" + ""      <option>"" + ""        <name>id-strategy-prefix</name>"" + ""        <value>target</value>"" + ""      </option>"" + ""      <element name=\""name\"" property=\""name\"" />"" + ""    </element>"" + ""  </class>"" + ""</betwixt-config>"";
    IdStoringStrategy storingStrategy = new DefaultIdStoringStrategy () {
        public String getReferenceFor (Context context, Object bean) {
            if (bean instanceof BetaBean) {
                assertNotNull (context.getOptions ());
                assertEquals (""Checking BetaBean option"", ""target"", context.getOptions ().getValue (""id-strategy-prefix""));
            }
            return super.getReferenceFor (context, bean);
        }
    }
    ;
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setIdMappingStrategy (storingStrategy);
    writer.getXMLIntrospector ().register (new InputSource (new StringReader (MAPPING)));
    writer.write (alpha);
    String expected = ""<?xml version='1.0'?>"" + ""<alpha id=\""1\"">"" + ""  <name>apple</name>"" + ""  <beta id=\""2\"">"" + ""    <name>banana</name>"" + ""  </beta>"" + ""</alpha>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (out));
}
",286,343
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestIdStorageStrategy.java,"
public String getReferenceFor (Context context, Object bean) {
    if (bean instanceof BetaBean) {
        assertNotNull (context.getOptions ());
        assertEquals (""Checking BetaBean option"", ""target"", context.getOptions ().getValue (""id-strategy-prefix""));
    }
    return super.getReferenceFor (context, bean);
}
",316,324
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestIdStorageStrategy.java,"
public void testWriteWithParentAndTargetOptions () throws Exception {
    AlphaBean alpha = new AlphaBean ();
    alpha.setName (""apple"");
    BetaBean beta = new BetaBean ();
    beta.setName (""banana"");
    alpha.setBetaBean (beta);
    String MAPPING = ""<?xml version='1.0'?>"" + ""<betwixt-config>"" + ""  <class name=\"""" + AlphaBean.class.getName () + ""\"">"" + ""    <element name=\""alpha\"">"" + ""      <element name=\""name\"" property=\""name\"" />"" + ""      <element property=\""betaBean\"">"" + ""        <option>"" + ""          <name>id-strategy-prefix</name>"" + ""          <value>parent</value>"" + ""        </option>"" + ""      </element>"" + ""    </element>"" + ""  </class>"" + ""  <class name=\"""" + BetaBean.class.getName () + ""\"">"" + ""    <element name=\""beta\"">"" + ""      <option>"" + ""        <name>id-strategy-prefix</name>"" + ""        <value>target</value>"" + ""      </option>"" + ""      <element name=\""name\"" property=\""name\"" />"" + ""    </element>"" + ""  </class>"" + ""</betwixt-config>"";
    IdStoringStrategy storingStrategy = new DefaultIdStoringStrategy () {
        public String getReferenceFor (Context context, Object bean) {
            if (bean instanceof BetaBean) {
                assertNotNull (context.getOptions ());
                assertEquals (""Checking BetaBean option"", ""parent"", context.getOptions ().getValue (""id-strategy-prefix""));
            }
            return super.getReferenceFor (context, bean);
        }
    }
    ;
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setIdMappingStrategy (storingStrategy);
    writer.getXMLIntrospector ().register (new InputSource (new StringReader (MAPPING)));
    writer.write (alpha);
    String expected = ""<?xml version='1.0'?>"" + ""<alpha id=\""1\"">"" + ""  <name>apple</name>"" + ""  <beta id=\""2\"">"" + ""    <name>banana</name>"" + ""  </beta>"" + ""</alpha>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (out));
}
",345,407
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestIdStorageStrategy.java,"
public String getReferenceFor (Context context, Object bean) {
    if (bean instanceof BetaBean) {
        assertNotNull (context.getOptions ());
        assertEquals (""Checking BetaBean option"", ""parent"", context.getOptions ().getValue (""id-strategy-prefix""));
    }
    return super.getReferenceFor (context, bean);
}
",380,388
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestMixedContentEncoding.java,"
TestBaseMixedContentEncoding (boolean encode) {
    this.encode = encode;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestMixedContentEncoding.java,"
protected boolean encodeAsCDATA (ElementDescriptor element) {
    this.element = element;
    return encode;
}
",50,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestMixedContentEncoding.java,"
public TestMixedContentEncoding (String testName) {
    super (testName);
}
",57,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestMixedContentEncoding.java,"
public void testBaseMixedEscapeCharacters () {
    BaseMixedContentEncodingStrategy mceStrategy = new TestBaseMixedContentEncoding (false);
    assertEquals (""Check basic escaping"", ""ab&lt;&gt;&amp;ba"", mceStrategy.escapeCharacters (""ab<>&ba""));
}
",62,66
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestMixedContentEncoding.java,"
public void testBaseMixedCDATAEncoding () {
    BaseMixedContentEncodingStrategy mceStrategy = new TestBaseMixedContentEncoding (false);
    assertEquals (""Check basic escaping"", ""<![CDATA[<greeting>ab]]&gt;ba</greeting>]]>"", mceStrategy.encodeInCDATA (""<greeting>ab]]>ba</greeting>""));
}
",68,72
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestMixedContentEncoding.java,"
public void testBaseMixedEncode () {
    ElementDescriptor descriptor = new ElementDescriptor ();
    TestBaseMixedContentEncoding mceStrategy = new TestBaseMixedContentEncoding (false);
    assertEquals (""Using character escaping"", ""&lt;exclaim&gt;hello, mum&lt;/exclaim&gt;"", mceStrategy.encode (""<exclaim>hello, mum</exclaim>"", descriptor));
    assertEquals (""Descriptor set"", descriptor, mceStrategy.element);
    mceStrategy = new TestBaseMixedContentEncoding (true);
    assertEquals (""Using CDATA encoding"", ""<![CDATA[<exclaim>hello, mum</exclaim>]]>"", mceStrategy.encode (""<exclaim>hello, mum</exclaim>"", descriptor));
    assertEquals (""Descriptor set"", descriptor, mceStrategy.element);
}
",74,91
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestMixedContentEncoding.java,"
public void testDefaultImplementation () {
    ElementDescriptor descriptor = new ElementDescriptor ();
    assertEquals (""Default implementation uses character escaping"", ""&lt;proclaim&gt;The King Is Dead, Long Live The King&lt;/proclaim&gt;"", MixedContentEncodingStrategy.DEFAULT.encode (""<proclaim>The King Is Dead, Long Live The King</proclaim>"", descriptor));
}
",93,100
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestMixedContentEncoding.java,"
public void testEscapedCharactersImplementation () {
    ElementDescriptor descriptor = new ElementDescriptor ();
    assertEquals (""Default implementation uses character escaping"", ""&lt;proclaim&gt;The King Is Dead, Long Live The King&lt;/proclaim&gt;"", MixedContentEncodingStrategy.ESCAPED_CHARACTERS.encode (""<proclaim>The King Is Dead, Long Live The King</proclaim>"", descriptor));
}
",102,109
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestMixedContentEncoding.java,"
public void testCDATAImplementation () {
    ElementDescriptor descriptor = new ElementDescriptor ();
    assertEquals (""Default implementation uses character escaping"", ""<![CDATA[<proclaim>The King Is Dead, Long Live The King</proclaim>]]>"", MixedContentEncodingStrategy.CDATA.encode (""<proclaim>The King Is Dead, Long Live The King</proclaim>"", descriptor));
}
",111,118
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestMixedContentEncoding.java,"
public void testDefaultOutput () throws Exception {
    Element element = new Element ();
    element.setValue (""<greeting>What Ho Jeeves!</greeting>"");
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (false);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.setEndOfLine (""\n"");
    writer.write (element);
    String expected = ""<?xml version='1.0'?><Element>\n<value>&lt;greeting&gt;What Ho Jeeves!&lt;/greeting&gt;</value>\n</Element>\n"";
    String xml = out.getBuffer ().toString ();
    assertEquals (expected, xml);
}
",120,138
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestMixedContentEncoding.java,"
public void testDefaultOutputWithCDATAOption () throws Exception {
    Element element = new Element ();
    element.setValue (""<greeting>What Ho Jeeves!</greeting>"");
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (false);
    writer.getBindingConfiguration ().setMapIDs (false);
    XMLBeanInfo elementInfo = writer.getXMLIntrospector ().introspect (Element.class);
    elementInfo.getElementDescriptor ().getElementDescriptors () [0].getOptions ().addOption (MixedContentEncodingStrategy.ENCODING_OPTION_NAME, ""CDATA"");
    writer.setEndOfLine (""\n"");
    writer.write (element);
    String expected = ""<?xml version='1.0'?><Element>\n<value><![CDATA[<greeting>What Ho Jeeves!</greeting>]]></value>\n</Element>\n"";
    String xml = out.getBuffer ().toString ();
    assertEquals (expected, xml);
}
",141,163
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestMixedContentEncoding.java,"
public void testDefaultOutputWithCharacterEscapingOption () throws Exception {
    Element element = new Element ();
    element.setValue (""<greeting>What Ho Jeeves!</greeting>"");
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (false);
    writer.getBindingConfiguration ().setMapIDs (false);
    XMLBeanInfo elementInfo = writer.getXMLIntrospector ().introspect (Element.class);
    elementInfo.getElementDescriptor ().getElementDescriptors () [0].getOptions ().addOption (""org.apache.commons.betwixt.mixed-content-encoding"", ""escaped"");
    writer.setEndOfLine (""\n"");
    writer.write (element);
    String expected = ""<?xml version='1.0'?><Element>\n<value>&lt;greeting&gt;What Ho Jeeves!&lt;/greeting&gt;</value>\n</Element>\n"";
    String xml = out.getBuffer ().toString ();
    assertEquals (expected, xml);
}
",166,186
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestMixedContentEncoding.java,"
public void testDefaultOutputWithDotBetwixtOptions () throws Exception {
    ABCBean bean = new ABCBean ();
    bean.setA (""<strong>weak</strong>"");
    bean.setB (""<strong>weak</strong>"");
    bean.setC (""<strong>weak</strong>"");
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (false);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.setEndOfLine (""\n"");
    writer.write (bean);
    String expected = ""<?xml version='1.0'?>"" + ""<greek-abc>\n"" + ""<alpha><![CDATA[<strong>weak</strong>]]></alpha>\n"" + ""<beta>&lt;strong&gt;weak&lt;/strong&gt;</beta>\n"" + ""<gamma>&lt;strong&gt;weak&lt;/strong&gt;</gamma>\n"" + ""</greek-abc>\n"";
    String xml = out.getBuffer ().toString ();
    assertEquals (expected, xml);
}
",188,212
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestMixedContentEncoding.java,"
public void testEscapedOutput () throws Exception {
    Element element = new Element ();
    element.setValue (""<greeting>What Ho Jeeves!</greeting>"");
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (false);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.setMixedContentEncodingStrategy (new TestBaseMixedContentEncoding (false));
    writer.setEndOfLine (""\n"");
    writer.write (element);
    String expected = ""<?xml version='1.0'?><Element>\n<value>&lt;greeting&gt;What Ho Jeeves!&lt;/greeting&gt;</value>\n</Element>\n"";
    String xml = out.getBuffer ().toString ();
    assertEquals (expected, xml);
}
",214,233
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/strategy/TestMixedContentEncoding.java,"
public void testCDATAEncodedOutput () throws Exception {
    Element element = new Element ();
    element.setValue (""<greeting>What Ho Jeeves!</greeting>"");
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (false);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.setMixedContentEncodingStrategy (new TestBaseMixedContentEncoding (true));
    writer.setEndOfLine (""\n"");
    writer.write (element);
    String expected = ""<?xml version='1.0'?><Element>\n<value><![CDATA[<greeting>What Ho Jeeves!</greeting>]]></value>\n</Element>\n"";
    String xml = out.getBuffer ().toString ();
    assertEquals (expected, xml);
}
",235,253
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AdderButNoPropertyBean.java,"
public AdderButNoPropertyBean () {
}
",29,29
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AdderButNoPropertyBean.java,"
public int stringCallCount () {
    return callStringCount;
}
",31,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AdderButNoPropertyBean.java,"
public void addString (String string) {
    callStringCount ++;
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/NoAdderBean.java,"
public List getThings () {
    return things;
}
",32,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/NoAdderBean.java,"
public void setThings (List things) {
    this.things = things;
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/RSSBeanWriter.java,"
public RSSBeanWriter (String testName) {
    super (testName);
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/RSSBeanWriter.java,"
public static void main (String [] args) throws Exception {
    RSSBeanWriter sample = new RSSBeanWriter (""RSS"");
    sample.run (args);
}
",39,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/RSSBeanWriter.java,"
public void run (String [] args) throws Exception {
    RSSDigester digester = new RSSDigester ();
    Object bean = null;
    if (args.length > 0) {
        bean = digester.parse (args [0]);
    }
    else {
        InputStream in = new FileInputStream (getTestFile (""src/test/org/apache/commons/betwixt/rss-example.xml""));
        bean = digester.parse (in);
        in.close ();
    }
    write (bean);
}
",45,61
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/RSSBeanWriter.java,"
public void write (Object bean) throws Exception {
    BeanWriter writer = new BeanWriter ();
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (false);
    writer.enablePrettyPrint ();
    writer.write (bean);
}
",63,69
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/TestXmlTestCase.java,"
public TestXmlTestCase (String name) {
    super (name);
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/TestXmlTestCase.java,"
public void testXMLUnit () throws Exception {
    xmlAssertIsomorphicContent (parseFile (""src/test/org/apache/commons/betwixt/xmlunit/rss-example.xml""), parseFile (""src/test/org/apache/commons/betwixt/xmlunit/rss-example.xml""));
}
",41,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/TestXmlTestCase.java,"
public void testXMLUnit2 () throws Exception {
    boolean failed = false;
    try {
        xmlAssertIsomorphicContent (parseFile (""src/test/org/apache/commons/betwixt/xmlunit/rss-example.xml""), parseFile (""src/test/org/apache/commons/betwixt/xmlunit/rss-example-morphed.xml""), false);
        failed = true;
    } catch (AssertionFailedError er) {
    }
    if (failed) {
        fail (""Expected unit test to fail!"");
    }
}
",48,67
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/TestXmlTestCase.java,"
public void testXMLUnit3 () throws Exception {
    boolean failed = false;
    try {
        xmlAssertIsomorphicContent (parseFile (""src/test/org/apache/commons/betwixt/xmlunit/rss-example.xml""), parseFile (""src/test/org/apache/commons/betwixt/xmlunit/rss-example-not.xml""));
        failed = true;
    } catch (AssertionFailedError er) {
    }
    if (failed) {
        fail (""Expected unit test to fail!"");
    }
}
",69,87
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/TestXmlTestCase.java,"
public void testXMLUnit4 () throws Exception {
    xmlAssertIsomorphicContent (parseFile (""src/test/org/apache/commons/betwixt/xmlunit/rss-example.xml""), parseFile (""src/test/org/apache/commons/betwixt/xmlunit/rss-example-morphed.xml""), true);
}
",90,96
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/TestXmlTestCase.java,"
public void testXMLUnit5 () throws Exception {
    boolean failed = false;
    try {
        xmlAssertIsomorphicContent (parseFile (""src/test/org/apache/commons/betwixt/xmlunit/rss-example.xml""), parseFile (""src/test/org/apache/commons/betwixt/xmlunit/rss-example-not.xml""), true);
        failed = true;
    } catch (AssertionFailedError er) {
    }
    if (failed) {
        fail (""Expected unit test to fail!"");
    }
}
",99,118
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/TestXmlTestCase.java,"
public void testXMLUnit6 () throws Exception {
    boolean failed = false;
    try {
        xmlAssertIsomorphicContent (parseFile (""src/test/org/apache/commons/betwixt/xmlunit/scarab-one.xml""), parseFile (""src/test/org/apache/commons/betwixt/xmlunit/scarab-two.xml""), true);
        failed = true;
    } catch (AssertionFailedError er) {
    }
    if (failed) {
        fail (""Expected unit test to fail!"");
    }
}
",121,140
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/TestXmlTestCase.java,"
public void testValidateSchemaValidOne () throws Exception {
    String basedir = System.getProperty (""basedir"");
    InputSource document = new InputSource (new FileInputStream (new File (basedir, ""src/test/org/apache/commons/betwixt/xmlunit/valid.xml"")));
    InputSource schema = new InputSource (new FileInputStream (new File (basedir, ""src/test/org/apache/commons/betwixt/xmlunit/test.xsd"")));
    assertTrue (isValid (document, schema));
}
",142,150
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/TestXmlTestCase.java,"
public void testValidateSchemaInvalidOne () throws Exception {
    String basedir = System.getProperty (""basedir"");
    InputSource document = new InputSource (new FileInputStream (new File (basedir, ""src/test/org/apache/commons/betwixt/xmlunit/invalid.xml"")));
    InputSource schema = new InputSource (new FileInputStream (new File (basedir, ""src/test/org/apache/commons/betwixt/xmlunit/test.xsd"")));
    assertFalse (isValid (document, schema));
}
",153,161
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/TestXmlTestCase.java,"
public void testValidateSchemaValidTwo () throws Exception {
    String basedir = System.getProperty (""basedir"");
    InputSource document = new InputSource (new FileInputStream (new File (basedir, ""src/test/org/apache/commons/betwixt/xmlunit/valid-personnel-schema.xml"")));
    InputSource schema = new InputSource (new FileInputStream (new File (basedir, ""src/test/org/apache/commons/betwixt/xmlunit/personnel.xsd"")));
    assertTrue (isValid (document, schema));
}
",163,171
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/TestXmlTestCase.java,"
public void testValidateSchemaInvalidTwo () throws Exception {
    String basedir = System.getProperty (""basedir"");
    InputSource document = new InputSource (new FileInputStream (new File (basedir, ""src/test/org/apache/commons/betwixt/xmlunit/invalid-personnel-schema.xml"")));
    InputSource schema = new InputSource (new FileInputStream (new File (basedir, ""src/test/org/apache/commons/betwixt/xmlunit/personnel.xsd"")));
    assertFalse (isValid (document, schema));
}
",174,182
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
public XmlTestCase (String testName) {
    super (testName);
}
",86,89
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
public void xmlAssertIsomorphicContent (org.w3c.dom.Document documentOne, org.w3c.dom.Document documentTwo) throws AssertionFailedError {
    log (""Testing documents:"" + documentOne.getDocumentElement ().getNodeName () + "" and "" + documentTwo.getDocumentElement ().getNodeName ());
    xmlAssertIsomorphicContent (documentOne, documentTwo, false);
}
",92,101
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
public void xmlAssertIsomorphicContent (org.w3c.dom.Document documentOne, org.w3c.dom.Document documentTwo, boolean orderIndependent) throws AssertionFailedError {
    xmlAssertIsomorphicContent (null, documentOne, documentTwo, orderIndependent);
}
",103,111
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
public void xmlAssertIsomorphicContent (String message, org.w3c.dom.Document documentOne, org.w3c.dom.Document documentTwo) throws AssertionFailedError {
    xmlAssertIsomorphicContent (message, documentOne, documentTwo, false);
}
",113,122
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
public void xmlAssertIsomorphicContent (String message, org.w3c.dom.Document documentOne, org.w3c.dom.Document documentTwo, boolean orderIndependent) throws AssertionFailedError {
    xmlAssertIsomorphic (message, documentOne.getDocumentElement (), documentTwo.getDocumentElement (), orderIndependent);
}
",124,139
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
public void xmlAssertIsomorphic (org.w3c.dom.Node rootOne, org.w3c.dom.Node rootTwo) throws AssertionFailedError {
    xmlAssertIsomorphic (rootOne, rootTwo, false);
}
",142,149
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
public void xmlAssertIsomorphic (org.w3c.dom.Node rootOne, org.w3c.dom.Node rootTwo, boolean orderIndependent) throws AssertionFailedError {
    xmlAssertIsomorphic (null, rootOne, rootTwo, orderIndependent);
}
",151,159
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
public void xmlAssertIsomorphic (String message, org.w3c.dom.Node rootOne, org.w3c.dom.Node rootTwo) {
    xmlAssertIsomorphic (message, rootOne, rootTwo, false);
}
",161,169
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
public void xmlAssertIsomorphic (String message, org.w3c.dom.Node rootOne, org.w3c.dom.Node rootTwo, boolean orderIndependent) throws AssertionFailedError {
    rootOne.normalize ();
    rootTwo.normalize ();
    testIsomorphic (message, rootOne, rootTwo, orderIndependent);
}
",171,184
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
private void testIsomorphic (String message, org.w3c.dom.Node nodeOne, org.w3c.dom.Node nodeTwo) throws AssertionFailedError {
    testIsomorphic (message, nodeOne, nodeTwo, false);
}
",187,196
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
private void testIsomorphic (String message, org.w3c.dom.Node nodeOne, org.w3c.dom.Node nodeTwo, boolean orderIndependent) throws AssertionFailedError {
    try {
        if (debug) {
            log (""node 1 name="" + nodeOne.getNodeName () + "" qname="" + nodeOne.getLocalName ());
            log (""node 2 name="" + nodeTwo.getNodeName () + "" qname="" + nodeTwo.getLocalName ());
        }
        log (""Comparing node properties"");
        assertEquals ((null == message ? ""(Unequal node types)"" : message + ""(Unequal node types)""), nodeOne.getNodeType (), nodeTwo.getNodeType ());
        assertEquals ((null == message ? ""(Unequal node names)"" : message + ""(Unequal node names)""), nodeOne.getNodeName (), nodeTwo.getNodeName ());
        assertEquals ((null == message ? ""(Unequal node values)"" : message + ""(Unequal node values)""), trim (nodeOne.getNodeValue ()), trim (nodeTwo.getNodeValue ()));
        assertEquals ((null == message ? ""(Unequal local names)"" : message + ""(Unequal local names)""), nodeOne.getLocalName (), nodeTwo.getLocalName ());
        assertEquals ((null == message ? ""(Unequal namespace)"" : message + ""(Unequal namespace)""), nodeOne.getNamespaceURI (), nodeTwo.getNamespaceURI ());
        log (""Comparing attributes"");
        assertEquals ((null == message ? ""(Unequal attributes)"" : message + ""(Unequal attributes)""), nodeOne.hasAttributes (), nodeTwo.hasAttributes ());
        if (nodeOne.hasAttributes ()) {
            NamedNodeMap attributesOne = nodeOne.getAttributes ();
            NamedNodeMap attributesTwo = nodeTwo.getAttributes ();
            assertEquals ((null == message ? ""(Unequal attributes)"" : message + ""(Unequal attributes)""), attributesOne.getLength (), attributesTwo.getLength ());
            for (int i = 0, size = attributesOne.getLength (); i < size; i ++) {
                Attr attributeOne = (Attr) attributesOne.item (i);
                Attr attributeTwo = (Attr) attributesTwo.getNamedItemNS (attributeOne.getNamespaceURI (), attributeOne.getLocalName ());
                if (attributeTwo == null) {
                    attributeTwo = (Attr) attributesTwo.getNamedItem (attributeOne.getName ());
                }
                if (attributeTwo == null) {
                    String diagnosis = ""[Missing attribute ("" + attributeOne.getName () + "")]"";
                    fail ((null == message ? diagnosis : message + diagnosis));
                }
                assertEquals ((null == message ? ""(Unequal attribute values)"" : message + ""(Unequal attribute values)""), attributeOne.getValue (), attributeTwo.getValue ());
            }
        }
        log (""Comparing children"");
        List listOne = sanitize (nodeOne.getChildNodes ());
        List listTwo = sanitize (nodeTwo.getChildNodes ());
        if (orderIndependent) {
            log (""[Order Independent]"");
            Comparator nodeByName = new NodeByNameComparator ();
            Collections.sort (listOne, nodeByName);
            Collections.sort (listTwo, nodeByName);
        }
        Iterator it = listOne.iterator ();
        Iterator iter2 = listTwo.iterator ();
        while (it.hasNext () & iter2.hasNext ()) {
            Node nextOne = ((Node) it.next ());
            Node nextTwo = ((Node) iter2.next ());
            log (nextOne.getNodeName () + "":"" + nextOne.getNodeValue ());
            log (nextTwo.getNodeName () + "":"" + nextTwo.getNodeValue ());
        }
        assertEquals ((null == message ? ""(Unequal child nodes@"" + nodeOne.getNodeName () + "")"" : message + ""(Unequal child nodes @"" + nodeOne.getNodeName () + "")""), listOne.size (), listTwo.size ());
        it = listOne.iterator ();
        iter2 = listTwo.iterator ();
        while (it.hasNext () & iter2.hasNext ()) {
            Node nextOne = ((Node) it.next ());
            Node nextTwo = ((Node) iter2.next ());
            log (nextOne.getNodeName () + "" vs "" + nextTwo.getNodeName ());
            testIsomorphic (message, nextOne, nextTwo, orderIndependent);
        }
    } catch (DOMException ex) {
        fail ((null == message ? """" : message + "" "") + ""DOM exception"" + ex.toString ());
    }
}
",199,339
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
protected DocumentBuilder createDocumentBuilder () {
    try {
        return getDomFactory ().newDocumentBuilder ();
    } catch (ParserConfigurationException e) {
        fail (""Cannot create DOM builder: "" + e.toString ());
    }
    return null;
}
",342,357
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
protected DocumentBuilderFactory getDomFactory () {
    if (domFactory == null) {
        domFactory = DocumentBuilderFactory.newInstance ();
    }
    return domFactory;
}
",359,368
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
protected Document parseString (StringWriter writer) {
    try {
        return createDocumentBuilder ().parse (new InputSource (new StringReader (writer.getBuffer ().toString ())));
    } catch (SAXException e) {
        fail (""Cannot create parse string: "" + e.toString ());
    } catch (IOException e) {
        fail (""Cannot create parse string: "" + e.toString ());
    }
    return null;
}
",370,390
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
protected Document parseString (String string) {
    try {
        return createDocumentBuilder ().parse (new InputSource (new StringReader (string)));
    } catch (SAXException e) {
        fail (""Cannot create parse string: "" + e.toString ());
    } catch (IOException e) {
        fail (""Cannot create parse string: "" + e.toString ());
    }
    return null;
}
",392,412
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
protected Document parseFile (String path) {
    try {
        return createDocumentBuilder ().parse (new File (path));
    } catch (SAXException e) {
        fail (""Cannot create parse file: "" + e.toString ());
    } catch (IOException e) {
        fail (""Cannot create parse file: "" + e.toString ());
    }
    return null;
}
",415,435
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
private void log (String message) {
    if (debug) {
        System.out.println (""[XmlTestCase]"" + message);
    }
}
",437,443
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
private void log (String message, Exception e) {
    if (debug) {
        System.out.println (""[XmlTestCase]"" + message);
        e.printStackTrace ();
    }
}
",446,453
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
private String trim (String trimThis) {
    if (trimThis == null) {
        return trimThis;
    }
    return trimThis.trim ();
}
",455,463
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
private List sanitize (NodeList nodes) {
    ArrayList list = new ArrayList ();
    for (int i = 0, size = nodes.getLength (); i < size; i ++) {
        if (nodes.item (i).getNodeType () == Node.TEXT_NODE) {
            if (! (nodes.item (i).getNodeValue () == null || nodes.item (i).getNodeValue ().trim ().length () == 0)) {
                list.add (nodes.item (i));
            }
            else {
                log (""Ignoring text node:"" + nodes.item (i).getNodeValue ());
            }
        }
        else {
            list.add (nodes.item (i));
        }
    }
    return list;
}
",465,489
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
public int compare (Object objOne, Object objTwo) {
    String nameOne = ((Node) objOne).getNodeName ();
    String nameTwo = ((Node) objTwo).getNodeName ();
    if (nameOne == null) {
        if (nameTwo == null) {
            return 0;
        }
        return - 1;
    }
    if (nameTwo == null) {
        return 1;
    }
    return nameOne.compareTo (nameTwo);
}
",493,513
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
public void validateWithSchema (InputSource documentSource, final InputSource schemaSource) throws ParserConfigurationException, SAXException, IOException {
    class XMLUnitHandler extends DefaultHandler {
        ArrayList errors = new ArrayList ();
        ArrayList warnings = new ArrayList ();
        InputSource schemaSource;
        XMLUnitHandler (InputSource schemaSource) {
            this.schemaSource = schemaSource;
            schemaSource.setSystemId (""schema.xsd"");
        } public InputSource resolveEntity (String publicId, String systemId) {
            return schemaSource;
        } public void error (SAXParseException ex) {
            errors.add (ex);
        } public void warning (SAXParseException ex) {
            warnings.add (ex);
        } void reportErrors () throws SAXException {
            if (errors.size () > 0) {
                throw (SAXException) errors.get (0);
            }
        }
    }
    SAXParser parser = new SAXParser ();
    parser.setFeature (NAMESPACES_FEATURE_ID, true);
    parser.setFeature (NAMESPACE_PREFIXES_FEATURE_ID, false);
    parser.setFeature (VALIDATION_FEATURE_ID, true);
    parser.setFeature (SCHEMA_VALIDATION_FEATURE_ID, true);
    parser.setFeature (SCHEMA_FULL_CHECKING_FEATURE_ID, false);
    parser.setFeature (DYNAMIC_VALIDATION_FEATURE_ID, false);
    parser.setProperty (NONAMESPACE_SCHEMA_LOCATION_PROPERTY_ID, ""schema.xsd"");
    XMLUnitHandler handler = new XMLUnitHandler (schemaSource);
    parser.setContentHandler (handler);
    parser.setErrorHandler (handler);
    parser.setEntityResolver (handler);
    parser.parse (documentSource);
    handler.reportErrors ();
}
",517,585
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
XMLUnitHandler (InputSource schemaSource) {
    this.schemaSource = schemaSource;
    schemaSource.setSystemId (""schema.xsd"");
}
",526,530
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
public InputSource resolveEntity (String publicId, String systemId) {
    return schemaSource;
}
",532,535
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
public void error (SAXParseException ex) {
    errors.add (ex);
}
",537,540
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
public void warning (SAXParseException ex) {
    warnings.add (ex);
}
",542,545
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
void reportErrors () throws SAXException {
    if (errors.size () > 0) {
        throw (SAXException) errors.get (0);
    }
}
",547,553
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
public boolean isValid (InputSource documentSource, InputSource schemaSource) throws ParserConfigurationException, IOException {
    boolean result = false;
    try {
        validateWithSchema (documentSource, schemaSource);
        result = true;
    } catch (SAXException se) {
        log (""Validation failed."", se);
    }
    return result;
}
",587,602
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
public void xmlAssertIsValid (String document, String schema) throws ParserConfigurationException, IOException {
    xmlAssertIsValid (new InputSource (new StringReader (document)), new InputSource (new StringReader (schema)));
}
",605,609
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/xmlunit/XmlTestCase.java,"
public void xmlAssertIsValid (InputSource documentSource, InputSource schemaSource) throws ParserConfigurationException, IOException {
    try {
        validateWithSchema (documentSource, schemaSource);
    } catch (SAXException se) {
        se.printStackTrace ();
        fail (""Validation failure: "" + se.getMessage ());
    }
}
",611,623
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/IdMap.java,"
public Map getIds () {
    return ids;
}
",30,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/IdMap.java,"
public void addId (String key, Integer value) {
    this.ids.put (key, value);
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestCyclicRegistration.java,"
public void testListReferenceCycle () throws Exception {
    BeanReader reader = new BeanReader ();
    reader.registerBeanClass (PlanetBean.class);
}
",29,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/ArrayBean.java,"
public ArrayBean () {
}
",33,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/ArrayBean.java,"
public ArrayBean (String name) {
    setName (name);
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/ArrayBean.java,"
public String getName () {
    return name;
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/ArrayBean.java,"
public void setName (String name) {
    this.name = name;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/ArrayBean.java,"
public String [] getHobbies () {
    return (String []) hobbies.toArray (typeList);
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/ArrayBean.java,"
public void addHobby (String hobby) {
    hobbies.add (hobby);
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestCollectives.java,"
public TestCollectives (String testName) {
    super (testName);
    CapitalizeNameMapper capitalizeNameMapper = new CapitalizeNameMapper ();
    categoriesIntrospectionConfiguration.setAttributesForPrimitives (false);
    categoriesIntrospectionConfiguration.setElementNameMapper (capitalizeNameMapper);
    categoriesIntrospectionConfiguration.setAttributeNameMapper (capitalizeNameMapper);
    categoriesIntrospectionConfiguration.setWrapCollectionsInElement (false);
    noIDsBindingConfiguration.setMapIDs (false);
}
",40,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestCollectives.java,"
public void testWriteCategories () throws Exception {
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getXMLIntrospector ().setConfiguration (categoriesIntrospectionConfiguration);
    writer.setBindingConfiguration (noIDsBindingConfiguration);
    Categories categories = new Categories ();
    categories.addCategory (new Category (""Runs""));
    categories.addCategory (new Category (""Innings""));
    categories.addCategory (new Category (""Dismissals""));
    categories.addCategory (new Category (""High Score""));
    categories.addCategory (new Category (""Average""));
    writer.write (categories);
    String xml = out.getBuffer ().toString ();
    String expected = ""<?xml version='1.0'?><Categories>"" + ""<Category><Name>Runs</Name></Category>"" + ""<Category><Name>Innings</Name></Category>"" + ""<Category><Name>Dismissals</Name></Category>"" + ""<Category><Name>High Score</Name></Category>"" + ""<Category><Name>Average</Name></Category>"" + ""</Categories>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (xml));
}
",54,81
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestCollectives.java,"
public void testReadCategories () throws Exception {
    BeanReader beanReader = new BeanReader ();
    beanReader.getXMLIntrospector ().setConfiguration (categoriesIntrospectionConfiguration);
    beanReader.setBindingConfiguration (noIDsBindingConfiguration);
    beanReader.registerBeanClass (Categories.class);
    String xml = ""<?xml version='1.0'?><Categories>"" + ""<Category><Name>Runs</Name></Category>"" + ""<Category><Name>Innings</Name></Category>"" + ""<Category><Name>Dismissals</Name></Category>"" + ""<Category><Name>High Score</Name></Category>"" + ""<Category><Name>Average</Name></Category>"" + ""</Categories>"";
    StringReader in = new StringReader (xml);
    Categories bean = (Categories) beanReader.parse (in);
    assertEquals (""5 categories"", 5, bean.size ());
    Iterator it = bean.getCategories ();
    assertEquals (""Runs category"", new Category (""Runs""), it.next ());
    assertEquals (""Runs category"", new Category (""Innings""), it.next ());
    assertEquals (""Runs category"", new Category (""Dismissals""), it.next ());
    assertEquals (""Runs category"", new Category (""High Score""), it.next ());
    assertEquals (""Runs category"", new Category (""Average""), it.next ());
}
",83,111
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestCollectives.java,"
public void testIntrospectListExtension () throws Exception {
    XMLIntrospector xmlIntrospector = new XMLIntrospector ();
    XMLBeanInfo beanInfo = xmlIntrospector.introspect (ArrayListExtender.class);
    ElementDescriptor elementDescriptor = beanInfo.getElementDescriptor ();
    ElementDescriptor [] childDescriptors = elementDescriptor.getElementDescriptors ();
    assertEquals (2, childDescriptors.length);
    assertEquals (""another"", childDescriptors [0].getPropertyName ());
    assertTrue (childDescriptors [1].getContextExpression () instanceof IteratorExpression);
}
",113,123
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestCollectives.java,"
public void testWriteListExtension () throws Exception {
    ArrayListExtender bean = new ArrayListExtender (""Whatever"");
    bean.add (new Long (11));
    bean.add (new Long (12));
    bean.add (new Long (13));
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (bean);
    String expected = ""<?xml version='1.0'?><ArrayListExtender><another>Whatever</another>"" + ""<Long>11</Long><Long>12</Long><Long>13</Long></ArrayListExtender>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (out));
}
",125,143
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestCollectives.java,"
public void testReadListExtension () throws Exception {
    String xml = ""<?xml version='1.0'?><ArrayListExtender><another>Whatever</another>"" + ""<Long>11</Long><Long>12</Long><Long>13</Long></ArrayListExtender>"";
    StringReader in = new StringReader (xml);
    BeanReader reader = new BeanReader ();
    reader.getBindingConfiguration ().setMapIDs (false);
    reader.registerBeanClass (ArrayListExtender.class);
    ArrayListExtender bean = (ArrayListExtender) reader.parse (in);
    assertEquals (""Whatever"", bean.getAnother ());
}
",146,160
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DeltaBean.java,"
public DeltaBean () {
}
",35,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DeltaBean.java,"
public DeltaBean (java.sql.Date sqlDate, java.sql.Time sqlTime, java.sql.Timestamp sqlTimestamp, java.util.Date utilDate, String name, Float objFloat, float primitiveFloat) {
    setSqlDate (sqlDate);
    setSqlTime (sqlTime);
    setSqlTimestamp (sqlTimestamp);
    setUtilDate (utilDate);
    setName (name);
    setObjFloat (objFloat);
    setPrimitiveFloat (primitiveFloat);
}
",39,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DeltaBean.java,"
public java.sql.Date getSqlDate () {
    return sqlDate;
}
",57,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DeltaBean.java,"
public void setSqlDate (java.sql.Date sqlDate) {
    this.sqlDate = sqlDate;
}
",62,65
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DeltaBean.java,"
public java.sql.Time getSqlTime () {
    return sqlTime;
}
",67,70
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DeltaBean.java,"
public void setSqlTime (java.sql.Time sqlTime) {
    this.sqlTime = sqlTime;
}
",72,75
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DeltaBean.java,"
public java.sql.Timestamp getSqlTimestamp () {
    return sqlTimestamp;
}
",77,80
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DeltaBean.java,"
public void setSqlTimestamp (java.sql.Timestamp sqlTimestamp) {
    this.sqlTimestamp = sqlTimestamp;
}
",82,85
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DeltaBean.java,"
public java.util.Date getUtilDate () {
    return utilDate;
}
",87,90
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DeltaBean.java,"
public void setUtilDate (java.util.Date utilDate) {
    this.utilDate = utilDate;
}
",92,95
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DeltaBean.java,"
public String getName () {
    return name;
}
",97,100
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DeltaBean.java,"
public void setName (String name) {
    this.name = name;
}
",102,105
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DeltaBean.java,"
public Float getObjFloat () {
    return objFloat;
}
",107,110
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DeltaBean.java,"
public void setObjFloat (Float objFloat) {
    this.objFloat = objFloat;
}
",112,115
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DeltaBean.java,"
public float getPrimitiveFloat () {
    return primitiveFloat;
}
",117,120
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/DeltaBean.java,"
public void setPrimitiveFloat (float primitiveFloat) {
    this.primitiveFloat = primitiveFloat;
}
",122,125
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/ListOfNames.java,"
public ListOfNames () {
}
",33,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/ListOfNames.java,"
public void addName (NameBean name) {
    names.add (name);
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/ListOfNames.java,"
public List getNames () {
    return names;
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/ListOfNames.java,"
public String toString () {
    StringBuffer buffer = new StringBuffer (""["");
    buffer.append (""ListOfNames: "");
    boolean first = true;
    Iterator it = names.iterator ();
    while (it.hasNext ()) {
        if (first) {
            first = ! first;
        }
        else {
            buffer.append (',');
        }
        buffer.append (""'"");
        buffer.append (((NameBean) it.next ()).getName ());
        buffer.append (""'"");
    }
    buffer.append (""]"");
    return buffer.toString ();
}
",45,69
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/ListOfNames.java,"
public boolean equals (Object obj) {
    if (obj == null) return false;
    if (obj instanceof ListOfNames) {
        ListOfNames otherList = (ListOfNames) obj;
        int count = 0;
        Iterator it = otherList.getNames ().iterator ();
        while (it.hasNext ()) {
            if (! names.get (count ++).equals (it.next ())) {
                return false;
            }
        }
        return true;
    }
    return false;
}
",71,91
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/MapBean.java,"
public MapBean () {
}
",35,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/MapBean.java,"
public MapBean (String title) {
    setTitle (title);
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/MapBean.java,"
public String getTitle () {
    return title;
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/MapBean.java,"
public void setTitle (String title) {
    this.title = title;
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/MapBean.java,"
public Map getAddresses () {
    return addresses;
}
",52,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/MapBean.java,"
public void addAddress (String name, AddressBean address) {
    addresses.put (name, address);
}
",57,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/nowrap/Componenttest.java,"
public Componenttest () {
    if (debug) System.out.println (""-- INSTANTIATING NEW COMPONENTTEST"");
}
",25,28
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/nowrap/Componenttest.java,"
public void setCompDescription (String s) {
    if (debug) System.out.println (""SET component description"");
    compDescription = s;
}
",30,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/nowrap/Componenttest.java,"
public String getCompDescription () {
    if (debug) System.out.println (""GET component description"");
    return compDescription;
}
",36,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/nowrap/POTest.java,"
public POTest () {
    if (debug) System.out.println (""-- INSTANTIATING NEW PO"");
    componentTests = new ArrayList ();
}
",32,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/nowrap/POTest.java,"
public List getComponenttests () {
    if (debug) System.out.println (""-- GET PO.getComponents"");
    return this.componentTests;
}
",38,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/nowrap/POTest.java,"
public void setComponenttests (List componentTests) {
}
",44,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/nowrap/POTest.java,"
public void addComponenttest (Componenttest c) {
    if (debug) System.out.println (""-- ADD PO.addComponent"");
    componentTests.add (c);
}
",48,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/nowrap/POTest.java,"
public void setPrintingNumber (String s) {
    if (debug) System.out.println (""-- SET PO.setPrintingNumber"");
    printingNumber = s;
}
",54,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/nowrap/POTest.java,"
public String getPrintingNumber () {
    if (debug) System.out.println (""-- GET PO.getPrintingNumber"");
    return printingNumber;
}
",60,64
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/nowrap/TestNoWrap.java,"
public static Test suite () {
    return new TestSuite (TestNoWrap.class);
}
",49,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/nowrap/TestNoWrap.java,"
public TestNoWrap (String testName) {
    super (testName);
}
",59,62
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/nowrap/TestNoWrap.java,"
public void testRoundTrip () throws Exception {
    load ();
    write ();
}
",67,72
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/nowrap/TestNoWrap.java,"
public void load () throws Exception {
    String xmlLocation = getTestFile (""src/test/org/apache/commons/betwixt/nowrap/po_add_test.xml"");
    FileInputStream in = new FileInputStream (new File (xmlLocation));
    BeanReader reader = createBeanReader (POTest.class);
    po = (POTest) reader.parse (in);
    assertEquals (""PO Printing No"", ""555008805581"", po.getPrintingNumber ());
    List componentTests = po.getComponenttests ();
    assertEquals (""#Component tests"", 3, componentTests.size ());
    Componenttest testOne = (Componenttest) componentTests.get (0);
    assertEquals (""Component Test One"", ""Text"", testOne.getCompDescription ());
    Componenttest testTwo = (Componenttest) componentTests.get (1);
    assertEquals (""Component Test Two"", ""Binding"", testTwo.getCompDescription ());
    Componenttest testThree = (Componenttest) componentTests.get (2);
    assertEquals (""Component Test Three"", ""Paper Cover"", testThree.getCompDescription ());
}
",77,97
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/nowrap/TestNoWrap.java,"
public void write () throws Exception {
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter beanWriter = new BeanWriter (out);
    beanWriter.setXMLIntrospector (createXMLIntrospector ());
    beanWriter.getBindingConfiguration ().setMapIDs (false);
    beanWriter.setEndOfLine (""\n"");
    beanWriter.enablePrettyPrint ();
    beanWriter.write (po);
    String xml = ""<?xml version='1.0'?><content><printingno>555008805581</printingno>"" + ""<componenttest><compdescription>Text</compdescription></componenttest>"" + ""<componenttest><compdescription>Binding</compdescription></componenttest>"" + ""<componenttest><compdescription>Paper Cover</compdescription>"" + ""</componenttest></content>"";
    xmlAssertIsomorphicContent (parseString (xml), parseString (out.getBuffer ().toString ()), true);
}
",102,125
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/nowrap/TestNoWrap.java,"
protected BeanReader createBeanReader (Class beanClass) throws Exception {
    BeanReader reader = new BeanReader ();
    reader.setXMLIntrospector (createXMLIntrospector ());
    reader.registerBeanClass (beanClass);
    return reader;
}
",133,140
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/nowrap/TestNoWrap.java,"
protected XMLIntrospector createXMLIntrospector () {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setAttributesForPrimitives (false);
    introspector.getConfiguration ().setWrapCollectionsInElement (false);
    introspector.getConfiguration ().setElementNameMapper (new DecapitalizeNameMapper ());
    introspector.getConfiguration ().setPluralStemmer (new DefaultPluralStemmer ());
    return introspector;
}
",147,164
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestMultipleCollectionMappings.java,"
public Iterator getElements () {
    return _elements.iterator ();
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestMultipleCollectionMappings.java,"
public void addElement (Element element) {
    _elements.add (element);
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestMultipleCollectionMappings.java,"
public Iterator getNodes () {
    return _nodes.iterator ();
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestMultipleCollectionMappings.java,"
public void addNode (Node1 node) {
    _nodes.add (node);
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestMultipleCollectionMappings.java,"
public String getName () {
    return name;
}
",82,85
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestMultipleCollectionMappings.java,"
public void setName (String name) {
    this.name = name;
}
",87,90
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestMultipleCollectionMappings.java,"
public String getName () {
    return name;
}
",97,100
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestMultipleCollectionMappings.java,"
public void setName (String name) {
    this.name = name;
}
",102,105
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestMultipleCollectionMappings.java,"
public Iterator getInnerNodes () {
    return _innerNodes.iterator ();
}
",112,115
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestMultipleCollectionMappings.java,"
public void addInnerNode (InnerNode node) {
    _innerNodes.add (node);
}
",117,120
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestMultipleCollectionMappings.java,"
public TestMultipleCollectionMappings (String testName) {
    super (testName);
}
",195,198
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestMultipleCollectionMappings.java,"
public void testOnlyElements () throws IOException, SAXException, IntrospectionException {
    Container container = new Container ();
    container.addElement (new ElementB ());
    container.addElement (new ElementA ());
    StringWriter outputWriter = new StringWriter ();
    outputWriter.write (""<?xml version=\""1.0\"" ?>\n"");
    BeanWriter beanWriter = new BeanWriter (outputWriter);
    beanWriter.setEndOfLine (""\n"");
    beanWriter.enablePrettyPrint ();
    beanWriter.setWriteEmptyElements (true);
    beanWriter.getBindingConfiguration ().setMapIDs (false);
    beanWriter.getXMLIntrospector ().register (new InputSource (new StringReader (MAPPING)));
    beanWriter.setEndOfLine (""\n"");
    beanWriter.write (container);
    String output = outputWriter.toString ();
    assertEquals (EXPECTED1, output);
    BeanReader beanReader = new BeanReader ();
    beanReader.registerMultiMapping (new InputSource (new StringReader (MAPPING)));
    StringReader xmlReader = new StringReader (output);
    container = (Container) beanReader.parse (xmlReader);
    Iterator it = container.getElements ();
    assertTrue (it.next () instanceof ElementB);
    assertTrue (it.next () instanceof ElementA);
    assertFalse (it.hasNext ());
    assertFalse (container.getNodes ().hasNext ());
}
",200,239
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestMultipleCollectionMappings.java,"
public void testOnlyNodes () throws IOException, SAXException, IntrospectionException {
    Container container = new Container ();
    container.addNode (new Node1 ());
    container.addNode (new Node2 ());
    container.addNode (new Node2 ());
    StringWriter outputWriter = new StringWriter ();
    outputWriter.write (""<?xml version=\""1.0\"" ?>\n"");
    BeanWriter beanWriter = new BeanWriter (outputWriter);
    beanWriter.setEndOfLine (""\n"");
    beanWriter.enablePrettyPrint ();
    beanWriter.setWriteEmptyElements (true);
    beanWriter.getBindingConfiguration ().setMapIDs (false);
    beanWriter.getXMLIntrospector ().register (new InputSource (new StringReader (MAPPING)));
    beanWriter.setEndOfLine (""\n"");
    beanWriter.write (container);
    String output = outputWriter.toString ();
    assertEquals (EXPECTED2, output);
    BeanReader beanReader = new BeanReader ();
    beanReader.registerMultiMapping (new InputSource (new StringReader (MAPPING)));
    StringReader xmlReader = new StringReader (output);
    container = (Container) beanReader.parse (xmlReader);
    assertFalse (container.getElements ().hasNext ());
    Iterator it = container.getNodes ();
    assertTrue (it.next () instanceof Node1);
    assertTrue (it.next () instanceof Node2);
    assertTrue (it.next () instanceof Node2);
    assertFalse (it.hasNext ());
}
",241,282
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestMultipleCollectionMappings.java,"
public void testMixed () throws IOException, SAXException, IntrospectionException {
    Container container = new Container ();
    container.addNode (new Node2 ());
    container.addNode (new Node1 ());
    container.addNode (new Node2 ());
    container.addElement (new ElementA ());
    container.addElement (new ElementB ());
    StringWriter outputWriter = new StringWriter ();
    outputWriter.write (""<?xml version=\""1.0\"" ?>\n"");
    BeanWriter beanWriter = new BeanWriter (outputWriter);
    beanWriter.setEndOfLine (""\n"");
    beanWriter.enablePrettyPrint ();
    beanWriter.setWriteEmptyElements (true);
    beanWriter.getBindingConfiguration ().setMapIDs (false);
    beanWriter.getXMLIntrospector ().register (new InputSource (new StringReader (MAPPING)));
    beanWriter.setEndOfLine (""\n"");
    beanWriter.write (container);
    String output = outputWriter.toString ();
    assertEquals (EXPECTED3, output);
    BeanReader beanReader = new BeanReader ();
    beanReader.registerMultiMapping (new InputSource (new StringReader (MAPPING)));
    StringReader xmlReader = new StringReader (output);
    container = (Container) beanReader.parse (xmlReader);
    Iterator it = container.getElements ();
    assertTrue (it.next () instanceof ElementA);
    assertTrue (it.next () instanceof ElementB);
    assertFalse (it.hasNext ());
    it = container.getNodes ();
    assertTrue (it.next () instanceof Node2);
    assertTrue (it.next () instanceof Node1);
    assertTrue (it.next () instanceof Node2);
    assertFalse (it.hasNext ());
}
",284,332
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestMultipleCollectionMappings.java,"
public void testInvalidXML () throws IOException, SAXException, IntrospectionException {
    BeanReader beanReader = new BeanReader ();
    beanReader.registerMultiMapping (new InputSource (new StringReader (MAPPING)));
    StringReader xmlReader = new StringReader (INVALID_XML);
    Container container = (Container) beanReader.parse (xmlReader);
    Iterator it = container.getElements ();
    assertTrue (it.next () instanceof ElementA);
    assertFalse (it.hasNext ());
    it = container.getNodes ();
    assertFalse (it.hasNext ());
}
",334,350
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestStringCollections.java,"
public TestStringCollections (String testName) {
    super (testName);
}
",28,31
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestStringCollections.java,"
public void testIntrospection () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    XMLBeanInfo xmlBeanInfo = introspector.introspect (PoemBean.class);
    ElementDescriptor beanDescriptor = xmlBeanInfo.getElementDescriptor ();
    ElementDescriptor [] beanChildren = beanDescriptor.getElementDescriptors ();
    assertEquals (""Only one child"", 1, beanChildren.length);
    ElementDescriptor [] linesChildren = beanChildren [0].getElementDescriptors ();
    assertEquals (""Only one lines child"", 1, linesChildren.length);
    assertFalse (""Line child is not hollow"", linesChildren [0].isHollow ());
}
",33,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestStringCollections.java,"
public void testWritePoem () throws Exception {
    String expected = ""<?xml version='1.0'?>"" + ""<PoemBean>"" + ""<lines>"" + ""<line>It is an ancient Mariner,</line>"" + ""<line>And he stoppeth one of three.</line>"" + ""<line>\""By thy long grey beard and the glittering eye,</line>"" + ""<line>Now wherefore stopp'st thou me?\""</line>"" + ""</lines>"" + ""</PoemBean>"";
    PoemBean bean = new PoemBean ();
    bean.addLine (""It is an ancient Mariner,"");
    bean.addLine (""And he stoppeth one of three."");
    bean.addLine (""\""By thy long grey beard and the glittering eye,"");
    bean.addLine (""Now wherefore stopp'st thou me?\"""");
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (bean);
    String xml = out.toString ();
    xmlAssertIsomorphic (parseString (expected), parseString (xml));
}
",45,70
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestStringCollections.java,"
public void testReadPoem () throws Exception {
    String xml = ""<?xml version='1.0'?>"" + ""<PoemBean>"" + ""<lines>"" + ""<line>It is an ancient Mariner,</line>"" + ""<line>And he stoppeth one of three.</line>"" + ""<line>\""By thy long grey beard and the glittering eye,</line>"" + ""<line>Now wherefore stopp'st thou me?\""</line>"" + ""</lines>"" + ""</PoemBean>"";
    BeanReader reader = new BeanReader ();
    reader.registerBeanClass (PoemBean.class);
    PoemBean bean = (PoemBean) reader.parse (new StringReader (xml));
    assertNotNull (""Expected bean to be output"");
    Object [] lines = bean.getLines ().toArray ();
    assertEquals (""Expected four lines"", 4, lines.length);
    assertEquals (""First line of Rime Of The Ancient Mariner"", ""It is an ancient Mariner,"", lines [0]);
    assertEquals (""Second line of Rime Of The Ancient Mariner"", ""And he stoppeth one of three."", lines [1]);
    assertEquals (""Third line of Rime Of The Ancient Mariner"", ""\""By thy long grey beard and the glittering eye,"", lines [2]);
    assertEquals (""Fourth line of Rime Of The Ancient Mariner"", ""Now wherefore stopp'st thou me?\"""", lines [3]);
}
",72,94
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/Category.java,"
public Category () {
}
",29,29
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/Category.java,"
public Category (String name) {
    setName (name);
}
",31,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/Category.java,"
public String getName () {
    return name;
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/Category.java,"
public void setName (String name) {
    this.name = name;
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/Category.java,"
public int hashCode () {
    return 0;
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/Category.java,"
public boolean equals (Object obj) {
    boolean result = false;
    if (obj instanceof Category) {
        Category category = (Category) obj;
        result = isEqual (name, category.name);
    }
    return result;
}
",51,62
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/Category.java,"
private boolean isEqual (String one, String two) {
    if (one == null) {
        return two == null;
    }
    return one.equals (two);
}
",64,72
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestReferenceMapping.java,"
public Element getElement1 () {
    return _element1;
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestReferenceMapping.java,"
public void setElement1 (Element element) {
    _element1 = element;
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestReferenceMapping.java,"
public Element getElement2 () {
    return _element2;
}
",52,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestReferenceMapping.java,"
public void setElement2 (Element element) {
    _element2 = element;
}
",57,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestReferenceMapping.java,"
public TestReferenceMapping (String testName) {
    super (testName);
}
",95,98
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestReferenceMapping.java,"
public void testRoundTripWithSingleMappingFile () throws IOException, SAXException, IntrospectionException {
    Container container = new Container ();
    container.setElement1 (new ElementB ());
    container.setElement2 (new ElementA ());
    StringWriter outputWriter = new StringWriter ();
    outputWriter.write (""<?xml version=\""1.0\"" ?>\n"");
    BeanWriter beanWriter = new BeanWriter (outputWriter);
    beanWriter.setEndOfLine (""\n"");
    beanWriter.enablePrettyPrint ();
    beanWriter.setWriteEmptyElements (true);
    beanWriter.getBindingConfiguration ().setMapIDs (false);
    beanWriter.getXMLIntrospector ().register (new InputSource (new StringReader (MAPPING)));
    beanWriter.setEndOfLine (""\n"");
    beanWriter.write (container);
    String output = outputWriter.toString ();
    assertEquals (EXPECTED, output);
    BeanReader beanReader = new BeanReader ();
    beanReader.registerMultiMapping (new InputSource (new StringReader (MAPPING)));
    StringReader xmlReader = new StringReader (output);
    container = (Container) beanReader.parse (xmlReader);
    assertTrue (container.getElement1 () instanceof ElementB);
    assertNull (container.getElement2 ());
}
",100,135
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/MoonBean.java,"
public MoonBean () {
}
",28,28
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/MoonBean.java,"
public MoonBean (String name) {
    this.name = name;
}
",30,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/MoonBean.java,"
public String getName () {
    return name;
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/MoonBean.java,"
public void setName (String name) {
    this.name = name;
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/MoonBean.java,"
public PlanetBean getPlanet () {
    return planet;
}
",54,57
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/MoonBean.java,"
public void setPlanet (PlanetBean planet) {
    this.planet = planet;
}
",61,64
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestOptions.java,"
public void testGetValue () {
    Options options = new Options ();
    options.addOption (""A"", ""Alpha"");
    options.addOption (""B"", ""Beta"");
    assertEquals (""Get added value"", ""Alpha"", options.getValue (""A""));
    assertNull (""Value not added is null"", options.getValue (""C""));
    options.addOption (""A"", ""New Value"");
    assertEquals (""Lat value set wins"", ""New Value"", options.getValue (""A""));
}
",34,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestOptions.java,"
public void testGetNames () {
    Options options = new Options ();
    options.addOption (""A"", ""Alpha"");
    options.addOption (""B"", ""Beta"");
    options.addOption (""C"", ""Gamma"");
    String [] names = options.getNames ();
    assertEquals (""Expected three names"", 3, names.length);
    int flag = (A_SHIFT) + (B_SHIFT) + (C_SHIFT);
    for (int i = 0; i < 3; i ++) {
        if (names [i].equals (""A"")) {
            assertTrue (""A named twice"", (flag & (A_SHIFT)) > 0);
            flag -= (A_SHIFT);
        }
        else if (names [i].equals (""B"")) {
            assertTrue (""B named twice"", (flag & (B_SHIFT)) > 0);
            flag -= (B_SHIFT);
        }
        else if (names [i].equals (""C"")) {
            assertTrue (""C named twice"", (flag & (C_SHIFT)) > 0);
            flag -= (C_SHIFT);
        }
        else {
            fail (""Unexpected name: "" + names [i]);
        }
    }
}
",47,79
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestOptions.java,"
public void testAddOptions () {
    Options a = new Options ();
    a.addOption (""A"", ""Alpha"");
    a.addOption (""B"", ""Beta"");
    a.addOption (""C"", ""Gamma"");
    Options b = new Options ();
    b.addOption (""A"", ""Apple"");
    b.addOption (""C"", ""Carrot"");
    b.addOption (""E"", ""Egg Plant"");
    a.addOptions (b);
    assertEquals (""Apple"", a.getValue (""A""));
    assertEquals (""Beta"", a.getValue (""B""));
    assertEquals (""Carrot"", a.getValue (""C""));
    assertEquals (""Egg Plant"", a.getValue (""E""));
}
",81,100
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/expression/AdderBean.java,"
public String getKey () {
    return key;
}
",30,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/expression/AdderBean.java,"
public String getValue () {
    return value;
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/expression/AdderBean.java,"
public void add (String key, String value) {
    this.key = key;
    this.value = value;
}
",40,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/expression/TestCollectionUpdater.java,"
protected void setUp () throws Exception {
    super.setUp ();
    updater = CollectionUpdater.getInstance ();
    context = new Context ();
}
",34,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/expression/TestCollectionUpdater.java,"
public void testUpdateNull () throws Exception {
    context.setBean (null);
    updater.update (context, null);
    updater.update (context, ""Whatever"");
}
",41,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/expression/TestCollectionUpdater.java,"
public void testUpdateNotCollection () throws Exception {
    context.setBean (""Whatever"");
    updater.update (context, null);
    updater.update (context, ""Whatever"");
}
",48,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/expression/TestCollectionUpdater.java,"
public void testUpdateCollection () throws Exception {
    List list = new ArrayList ();
    context.setBean (list);
    updater.update (context, null);
    updater.update (context, ""Whatever"");
    assertEquals (""Updater updates the list with the value"", 1, list.size ());
    updater.update (context, ""Thus"");
    assertEquals (""Updater updates the list with the value"", 2, list.size ());
    assertEquals (""Updater updates the list in order"", ""Whatever"", list.get (0));
    assertEquals (""Updater updates the list in order"", ""Thus"", list.get (1));
}
",55,66
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/expression/TestUpdaters.java,"
public static Test suite () {
    return new TestSuite (TestUpdaters.class);
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/expression/TestUpdaters.java,"
public TestUpdaters (String testName) {
    super (testName);
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/expression/TestUpdaters.java,"
public void testMapUpdate () throws Exception {
    Class [] params = {String.class, String.class};
    Method method = AdderBean.class.getMethod (""add"", params);
    MapEntryAdder adder = new MapEntryAdder (method);
    AdderBean bean = new AdderBean ();
    bean.add (""UNSET"", ""UNSET"");
    Updater keyUpdater = adder.getKeyUpdater ();
    Updater valueUpdater = adder.getValueUpdater ();
    Context context = new Context ();
    context.setBean (bean);
    keyUpdater.update (context, ""key"");
    valueUpdater.update (context, ""value"");
    assertEquals (""AdderBean not updated (1)"", ""key"", bean.getKey ());
    assertEquals (""AdderBean not updated (2)"", ""value"", bean.getValue ());
    keyUpdater.update (context, ""new-key"");
    valueUpdater.update (context, ""new-value"");
    assertEquals (""AdderBean not updated (1)"", ""new-key"", bean.getKey ());
    assertEquals (""AdderBean not updated (2)"", ""new-value"", bean.getValue ());
}
",45,72
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/expression/TestContext.java,"
public void testOptions () throws Exception {
    Context context = new Context ();
    assertNull (context.getOptions ());
    Options firstOptions = new Options ();
    context.pushOptions (firstOptions);
    assertEquals (firstOptions, context.getOptions ());
    Options secondOptions = new Options ();
    context.pushOptions (secondOptions);
    assertEquals (secondOptions, context.getOptions ());
    context.popOptions ();
    assertEquals (firstOptions, context.getOptions ());
    context.popOptions ();
    assertNull (context.getOptions ());
}
",28,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/expression/TestDynaBeanUpdater.java,"
public void testSimpleTest () throws Exception {
    DynaProperty [] dynaProperties = {new DynaProperty (""alpha"", Integer.class), new DynaProperty (""beta"", String.class)};
    BasicDynaClass dynaClass = new BasicDynaClass (""ADynaBean"", BasicDynaBean.class, dynaProperties);
    DynaBean dynaBean = dynaClass.newInstance ();
    Context context = new Context ();
    context.setBean (dynaBean);
    DynaBeanUpdater dynaBeanUpdater = new DynaBeanUpdater (""beta"", String.class);
    dynaBeanUpdater.update (context, ""Zenith Lives"");
    assertEquals (""Expected dyna property set"", ""Zenith Lives"", dynaBean.get (""beta""));
}
",32,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/expression/TestContextOptions.java,"
public void testOptionInheritance () throws Exception {
    Options optionsAlpha = new Options ();
    optionsAlpha.addOption (OPTION_NAME_TWO, ALPHA);
    optionsAlpha.addOption (OPTION_NAME_THREE, ALPHA);
    optionsAlpha.addOption (OPTION_NAME_FOUR, ALPHA);
    Options optionsBeta = new Options ();
    optionsBeta.addOption (OPTION_NAME_TWO, BETA);
    optionsBeta.addOption (OPTION_NAME_THREE, BETA);
    Options optionsGamma = new Options ();
    optionsGamma.addOption (OPTION_NAME_TWO, GAMMA);
    Context context = new Context ();
    context.pushOptions (optionsAlpha);
    context.pushOptions (optionsBeta);
    context.pushOptions (optionsGamma);
    assertNull (""Null when no option set"", context.getInheritedOption (OPTION_NAME_ONE));
    assertEquals (""Return first value when that is set"", GAMMA, context.getInheritedOption (OPTION_NAME_TWO));
    assertEquals (""Return first value that is set"", BETA, context.getInheritedOption (OPTION_NAME_THREE));
    assertEquals (""Return first value that is set"", ALPHA, context.getInheritedOption (OPTION_NAME_FOUR));
}
",35,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/LoopBean.java,"
public static final LoopBean createNoLoopExampleBean () {
    LoopBean root = new LoopBean (""Root"");
    LoopBean levelOne = new LoopBean (""level1"");
    LoopBean levelTwo = new LoopBean (""level2"");
    LoopBean levelThree = new LoopBean (""level3"");
    LoopBean levelFour = new LoopBean (""level4"");
    LoopBean levelFive = new LoopBean (""level5"");
    root.setFriend (levelOne);
    levelOne.setFriend (levelTwo);
    levelTwo.setFriend (levelThree);
    levelThree.setFriend (levelFour);
    levelFour.setFriend (levelFive);
    return root;
}
",37,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/LoopBean.java,"
public static final LoopBean createLoopExampleBean () {
    LoopBean root = new LoopBean (""Root"");
    LoopBean levelOne = new LoopBean (""level1"");
    LoopBean levelTwo = new LoopBean (""level2"");
    LoopBean levelThree = new LoopBean (""level3"");
    LoopBean levelFour = new LoopBean (""level4"");
    LoopBean levelFive = new LoopBean (""level5"");
    root.setFriend (levelOne);
    levelOne.setFriend (levelTwo);
    levelTwo.setFriend (levelThree);
    levelThree.setFriend (levelFour);
    levelFour.setFriend (levelFive);
    levelFive.setFriend (root);
    return root;
}
",55,72
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/LoopBean.java,"
public static final LoopBean createNotEmptyNoLoopExampleBean () {
    LoopBean root = new LoopBean ("""");
    LoopBean levelOne = new LoopBean ("""");
    LoopBean levelTwo = new LoopBean ("""");
    LoopBean levelThree = new LoopBean ("""");
    LoopBean levelFour = new LoopBean ("""");
    LoopBean levelFive = new LoopBean (""Not Empty"");
    root.setFriend (levelOne);
    levelOne.setFriend (levelTwo);
    levelTwo.setFriend (levelThree);
    levelThree.setFriend (levelFour);
    levelFour.setFriend (levelFive);
    return root;
}
",75,91
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/LoopBean.java,"
public static final LoopBean createEmptyLoopExampleBean () {
    LoopBean root = new LoopBean ("""");
    LoopBean levelOne = new LoopBean ("""");
    LoopBean levelTwo = new LoopBean ("""");
    LoopBean levelThree = new LoopBean ("""");
    LoopBean levelFour = new LoopBean ("""");
    LoopBean levelFive = new LoopBean ("""");
    root.setFriend (levelOne);
    levelOne.setFriend (levelTwo);
    levelTwo.setFriend (levelThree);
    levelThree.setFriend (levelFour);
    levelFour.setFriend (levelFive);
    levelFive.setFriend (root);
    return root;
}
",93,110
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/LoopBean.java,"
public static final LoopBean createIdOnlyLoopExampleBean () {
    LoopBean root = new LoopBean (""Root"");
    LoopBean levelOne = new LoopBean (""level1"");
    LoopBean levelTwo = new LoopBean (""level2"");
    LoopBean levelThree = new LoopBean (""level3"");
    LoopBean levelFour = new LoopBean (""level4"");
    LoopBean levelFive = new LoopBean (""level5"");
    LoopBean notRoot = new LoopBean (""Root"");
    root.setFriend (levelOne);
    levelOne.setFriend (levelTwo);
    levelTwo.setFriend (levelThree);
    levelThree.setFriend (levelFour);
    levelFour.setFriend (levelFive);
    levelFive.setFriend (notRoot);
    return root;
}
",112,130
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/LoopBean.java,"
public LoopBean (String name) {
    this.name = name;
}
",132,135
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/LoopBean.java,"
public LoopBean getFriend () {
    if (++ count > max_count) {
        throw new RuntimeException (""Looping!"");
    }
    return friend;
}
",137,144
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/LoopBean.java,"
public void setFriend (LoopBean friend) {
    this.friend = friend;
}
",146,149
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/LoopBean.java,"
public String getName () {
    return name;
}
",151,154
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/LoopBean.java,"
public String toString () {
    return ""[LoopBean] name="" + name;
}
",156,159
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestMultiMapping.java,"
public TestMultiMapping (String testName) {
    super (testName);
}
",38,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestMultiMapping.java,"
public void testRoundTripWithSingleMappingFile () throws IOException, SAXException, IntrospectionException {
    AddressBean addressBean = new AddressBean ();
    addressBean.setCity (""New York"");
    addressBean.setCode (""92342"");
    addressBean.setCountry (""USA"");
    addressBean.setStreet (""12312 Here"");
    PartyBean partyBean = new PartyBean ();
    partyBean.setDateOfParty (new Date ());
    partyBean.setExcuse (""too late"");
    partyBean.setFromHour (22);
    partyBean.setVenue (addressBean);
    InputSource source = new InputSource (new FileReader (getTestFile (""src/test/org/apache/commons/betwixt/mapping.xml"")));
    StringWriter outputWriter = new StringWriter ();
    outputWriter.write (""<?xml version='1.0' ?>\n"");
    BeanWriter beanWriter = new BeanWriter (outputWriter);
    beanWriter.setEndOfLine (""\n"");
    beanWriter.enablePrettyPrint ();
    beanWriter.setWriteEmptyElements (true);
    beanWriter.getXMLIntrospector ().register (source);
    beanWriter.setEndOfLine (""\n"");
    beanWriter.write (partyBean);
    String expectedOut = ""<?xml version='1.0' ?>\n"" + ""  <party id=\""1\"">\n"" + ""    <the-excuse>too late</the-excuse>\n"" + ""    <location id=\""2\"">\n"" + ""      <street>12312 Here</street>\n"" + ""      <city>New York</city>\n"" + ""      <code>92342</code>\n"" + ""      <country>USA</country>\n"" + ""    </location>\n"" + ""    <time>22</time>\n"" + ""  </party>\n"";
    assertEquals (expectedOut, outputWriter.toString ());
    BeanReader beanReader = new BeanReader ();
    beanReader.registerMultiMapping (new InputSource (new FileReader (getTestFile (""src/test/org/apache/commons/betwixt/mapping.xml""))));
    StringReader xmlReader = new StringReader (outputWriter.toString ());
    PartyBean result = (PartyBean) beanReader.parse (xmlReader);
    assertEquals (partyBean.getExcuse (), result.getExcuse ());
    assertEquals (partyBean.getFromHour (), result.getFromHour ());
    AddressBean addressResult = result.getVenue ();
    assertEquals (addressBean.getCity (), addressResult.getCity ());
    assertEquals (addressBean.getCode (), addressResult.getCode ());
    assertEquals (addressBean.getCountry (), addressResult.getCountry ());
    assertEquals (addressBean.getStreet (), addressResult.getStreet ());
}
",44,98
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PersonBean.java,"
public PersonBean () {
}
",32,32
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PersonBean.java,"
public PersonBean (int age, String name) {
    setAge (age);
    setName (name);
}
",34,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PersonBean.java,"
public int getAge () {
    return age;
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PersonBean.java,"
public void setAge (int age) {
    this.age = age;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PersonBean.java,"
public String getName () {
    return name;
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PersonBean.java,"
public void setName (String name) {
    this.name = name;
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PersonBean.java,"
public String toString () {
    return ""["" + this.getClass ().getName () + "": age="" + age + "" name="" + name + ""]"";
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PersonBean.java,"
public boolean equals (Object obj) {
    if (obj == null) return false;
    return this.hashCode () == obj.hashCode ();
}
",65,69
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PersonBean.java,"
public int hashCode () {
    return toString ().hashCode ();
}
",71,74
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestConversion.java,"
public TestConversion (String name) {
    super (name);
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestConversion.java,"
public void testNullTimestampConversion () throws Exception {
    String xml = ""<?xml version='1.0'?>"" + ""<EventBean>"" + ""<type>WARNING</type>"" + ""<start>2004-02-10 00:00:00.0</start>"" + ""<end/>"" + ""</EventBean>"";
    StringReader in = new StringReader (xml);
    BeanReader reader = new BeanReader ();
    reader.registerBeanClass (EventBean.class);
    EventBean bean = (EventBean) reader.parse (in);
    assertNotNull (""Parsing should work"", bean);
    assertEquals (""Type property"", ""WARNING"", bean.getType ());
    assertEquals (""Start property"", ""2004-02-10 00:00:00.0"", bean.getStart ().toString ());
    assertNull (""End property"", bean.getEnd ());
}
",43,61
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestArrayMaps.java,"
public TestArrayMaps (String testName) {
    super (testName);
}
",31,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestArrayMaps.java,"
public void testIntrospection () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setAttributesForPrimitives (true);
    XMLBeanInfo xmlBeanInfo = introspector.introspect (AddressBookWithMapArrayAdder.class);
    ElementDescriptor beanDescriptor = xmlBeanInfo.getElementDescriptor ();
    ElementDescriptor [] childDescriptors = beanDescriptor.getElementDescriptors ();
    assertEquals (""Only one child element"", 1, childDescriptors.length);
    ElementDescriptor wrappingDescriptor = childDescriptors [0];
    ElementDescriptor [] wrappingChildDescriptors = wrappingDescriptor.getElementDescriptors ();
    assertEquals (""One child descriptor"", 1, wrappingChildDescriptors.length);
    ElementDescriptor entryDescriptor = wrappingChildDescriptors [0];
    ElementDescriptor [] entryChildDescriptors = entryDescriptor.getElementDescriptors ();
    assertEquals (""Two child descriptors"", 2, entryChildDescriptors.length);
    ElementDescriptor keyDescriptor = null;
    ElementDescriptor valueDescriptor = null;
    if (""key"".equals (entryChildDescriptors [0].getQualifiedName ())) {
        keyDescriptor = entryChildDescriptors [0];
    }
    if (""value"".equals (entryChildDescriptors [0].getQualifiedName ())) {
        valueDescriptor = entryChildDescriptors [0];
    }
    if (""key"".equals (entryChildDescriptors [1].getQualifiedName ())) {
        keyDescriptor = entryChildDescriptors [1];
    }
    if (""value"".equals (entryChildDescriptors [1].getQualifiedName ())) {
        valueDescriptor = entryChildDescriptors [1];
    }
    assertNotNull (""Expected key descriptor"", keyDescriptor);
    assertNotNull (""Expected value descriptor"", valueDescriptor);
    assertNotNull (""Expected key property type"", keyDescriptor.getPropertyType ());
    assertNotNull (""Expected value property type"", valueDescriptor.getPropertyType ());
    ElementDescriptor [] childValueDescriptors = valueDescriptor.getElementDescriptors ();
    assertEquals (""One hollow child descriptor for array"", 1, childValueDescriptors.length);
    ElementDescriptor hollowValueDescriptor = childValueDescriptors [0];
    assertEquals (""Child descriptor is hollow"", true, hollowValueDescriptor.isHollow ());
    assertEquals (""Child descriptor has AddressBean[] property type"", ADDRESS_ARRAY_CLASS, hollowValueDescriptor.getPropertyType ());
    assertEquals (""Child descriptor has AddressBean[] singular property type"", ADDRESS_ARRAY_CLASS, hollowValueDescriptor.getSingularPropertyType ());
}
",36,89
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PersonListBean.java,"
public PersonListBean () {
}
",33,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PersonListBean.java,"
public List getPersonList () {
    return people;
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/PersonListBean.java,"
public void addPerson (PersonBean person) {
    people.add (person);
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/ManagerBean.java,"
public ManagerBean () {
}
",29,31
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/ManagerBean.java,"
public int getCheeseSize () {
    return cheeseSize;
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/ManagerBean.java,"
public void setCheeseSize (int cheeseSize) {
    this.cheeseSize = cheeseSize;
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/PersonBean.java,"
public PersonBean () {
}
",32,32
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/PersonBean.java,"
public PersonBean (int age, String name) {
    setAge (age);
    setName (name);
}
",34,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/PersonBean.java,"
public int getAge () {
    return age;
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/PersonBean.java,"
public void setAge (int age) {
    this.age = age;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/PersonBean.java,"
public String getName () {
    return name;
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/PersonBean.java,"
public void setName (String name) {
    this.name = name;
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/PersonBean.java,"
public String toString () {
    return ""["" + this.getClass ().getName () + "": age="" + age + "" name="" + name + ""]"";
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/PersonBean.java,"
public boolean equals (Object obj) {
    if (obj == null) return false;
    return this.hashCode () == obj.hashCode ();
}
",65,69
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/PersonBean.java,"
public int hashCode () {
    return toString ().hashCode ();
}
",71,74
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/EmployeeBean.java,"
public EmployeeBean () {
}
",27,29
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/PersonListBean.java,"
public PersonListBean () {
}
",33,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/PersonListBean.java,"
public List getPersonList () {
    return people;
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/PersonListBean.java,"
public void addPerson (PersonBean person) {
    people.add (person);
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/PersonListBean.java,"
public PersonBean getOwner () {
    return owner;
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/PersonListBean.java,"
public void setOwner (PersonBean owner) {
    this.owner = owner;
}
",57,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/TestWriteClass.java,"
public TestWriteClass (String testName) {
    super (testName);
}
",33,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/TestWriteClass.java,"
public void testDotBetwixtClass () throws Exception {
    String customDotBetwixt = ""<?xml version='1.0'?><info primitiveTypes='attribute'>"" + ""<element name='type'>"" + ""<attribute property='class' name='classname'/>"" + ""</element>"" + ""</info>"";
    EmployeeBean employeeBean = new EmployeeBean ();
    employeeBean.setAge (32);
    employeeBean.setName (""AN Other"");
    StringWriter out = new StringWriter ();
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.getXMLIntrospector ().register (EmployeeBean.class, new InputSource (new StringReader (customDotBetwixt)));
    writer.write (employeeBean);
    String expected = ""<?xml version='1.0'?><type classname='org.apache.commons.betwixt.derived.EmployeeBean'/>"";
    xmlAssertIsomorphicContent (""Expected only class name to be mapped"", parseString (expected), parseString (out.toString ()));
}
",38,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/TestWriteClass.java,"
public void testPropertySuppressionStrategy () throws Exception {
    BeanWithSecrets bean = new BeanWithSecrets (""Surveyor Of The Queen's Pictures"", ""Queen Elizabeth II"", ""Sir Anthony Federick Blunt"", ""Fourth Man"", ""Soviet Union"");
    StringWriter out = new StringWriter ();
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.getXMLIntrospector ().getConfiguration ().setPropertySuppressionStrategy (new PropertySuppressionStrategy () {
        public boolean suppressProperty (Class classContainingThePropety, Class propertyType, String propertyName) {
            if (""class"".equals (propertyName)) {
                return true;
            }
            if (propertyName.startsWith (""secret"")) {
                return true;
            }
            return false;
        }
    }
    );
    writer.write (""normal-person"", bean);
    String expected = ""<?xml version='1.0'?><normal-person>"" + ""<employer>Queen Elizabeth II</employer>"" + ""<job>Surveyor Of The Queen's Pictures</job>"" + ""<name>Sir Anthony Federick Blunt</name>"" + ""</normal-person>"";
    xmlAssertIsomorphicContent (""Expected secrets to be supressed"", parseString (expected), parseString (out.toString ()), true);
}
",60,96
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/TestWriteClass.java,"
public boolean suppressProperty (Class classContainingThePropety, Class propertyType, String propertyName) {
    if (""class"".equals (propertyName)) {
        return true;
    }
    if (propertyName.startsWith (""secret"")) {
        return true;
    }
    return false;
}
",72,83
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/TestDerived.java,"
public static void main (String [] args) {
    TestRunner.run (suite ());
}
",38,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/TestDerived.java,"
public static Test suite () {
    return new TestSuite (TestDerived.class);
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/TestDerived.java,"
public TestDerived (String testName) {
    super (testName);
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/TestDerived.java,"
public void testPersonList () throws Exception {
    BeanReader reader = new BeanReader ();
    reader.registerBeanClass (PersonListBean.class);
    InputStream in = new FileInputStream (getTestFile (""src/test/org/apache/commons/betwixt/derived/person-list.xml""));
    try {
        checkBean ((PersonListBean) reader.parse (in));
    } finally {
        in.close ();
    }
}
",53,71
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/TestDerived.java,"
protected void checkBean (PersonListBean bean) throws Exception {
    PersonBean owner = bean.getOwner ();
    assertTrue (""should have found an owner"", owner != null);
    assertEquals (""should be derived class"", ""org.apache.commons.betwixt.derived.EmployeeBean"", owner.getClass ().getName ());
    assertEquals (""PersonList size"", 4, bean.getPersonList ().size ());
    assertEquals (""PersonList value (1)"", ""Athos"", ((PersonBean) bean.getPersonList ().get (0)).getName ());
    assertEquals (""PersonList value (2)"", ""Porthos"", ((PersonBean) bean.getPersonList ().get (1)).getName ());
    assertEquals (""PersonList value (3)"", ""Aramis"", ((PersonBean) bean.getPersonList ().get (2)).getName ());
    assertEquals (""PersonList value (4)"", ""D'Artagnan"", ((PersonBean) bean.getPersonList ().get (3)).getName ());
    PersonBean employee = (PersonBean) bean.getPersonList ().get (1);
    assertEquals (""should be derived class"", ""org.apache.commons.betwixt.derived.EmployeeBean"", employee.getClass ().getName ());
    PersonBean manager = (PersonBean) bean.getPersonList ().get (2);
    assertEquals (""should be derived class"", ""org.apache.commons.betwixt.derived.ManagerBean"", manager.getClass ().getName ());
}
",73,95
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/BeanWithSecrets.java,"
public BeanWithSecrets () {
}
",31,31
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/BeanWithSecrets.java,"
public BeanWithSecrets (String job, String employer, String name, String secretCodeName, String secretEmployer) {
    super ();
    this.job = job;
    this.employer = employer;
    this.name = name;
    this.secretCodeName = secretCodeName;
    this.secretEmployer = secretEmployer;
}
",33,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/BeanWithSecrets.java,"
public String getEmployer () {
    return employer;
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/BeanWithSecrets.java,"
public void setEmployer (String employer) {
    this.employer = employer;
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/BeanWithSecrets.java,"
public String getJob () {
    return job;
}
",53,56
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/BeanWithSecrets.java,"
public void setJob (String job) {
    this.job = job;
}
",58,61
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/BeanWithSecrets.java,"
public String getName () {
    return name;
}
",63,66
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/BeanWithSecrets.java,"
public void setName (String name) {
    this.name = name;
}
",68,71
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/BeanWithSecrets.java,"
public String getSecretCodeName () {
    return secretCodeName;
}
",73,76
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/BeanWithSecrets.java,"
public void setSecretCodeName (String secretCodeName) {
    this.secretCodeName = secretCodeName;
}
",78,81
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/BeanWithSecrets.java,"
public String getSecretEmployer () {
    return secretEmployer;
}
",83,86
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/derived/BeanWithSecrets.java,"
public void setSecretEmployer (String secretEmployer) {
    this.secretEmployer = secretEmployer;
}
",88,91
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public String getCopyright () {
    if (this.copyright == null) {
        return ""Public Domain"";
    }
    else {
        return (this.copyright);
    }
}
",70,80
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public void setCopyright (String copyright) {
    this.copyright = copyright;
}
",82,85
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public String getDescription () {
    return (this.description);
}
",93,96
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
protected String getParameterTypes (JavaParameter [] parameters) {
    StringBuffer sb = new StringBuffer ();
    for (int i = 0; i < parameters.length; i ++) {
        if (i > 0) {
            sb.append ("","");
        }
        if (X == Y) getTransformedQualifiedName (parameters [i].getType ().getJavaClass (), sb);
        for (int j = 0; j < parameters [i].getType ().getDimensions (); j ++) {
            sb.append (""[]"");
        }
    }
    return sb.toString ();
}
",97,114
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public void setDescription (String description) {
    this.description = description;
}
",116,119
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public String getDocs () {
    return (this.docs);
}
",127,130
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public void setDocs (String docs) {
    this.docs = docs;
}
",132,135
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public Image getImage () {
    return (this.image);
}
",143,146
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public void setImage (Image image) {
    this.image = image;
}
",148,151
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public String getLanguage () {
    return (this.language);
}
",159,162
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public void setLanguage (String language) {
    this.language = language;
}
",164,167
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public String getLastBuildDate () {
    return (this.lastBuildDate);
}
",175,178
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public void setLastBuildDate (String lastBuildDate) {
    this.lastBuildDate = lastBuildDate;
}
",180,183
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public String getLink () {
    return (this.link);
}
",191,194
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public void setLink (String link) {
    this.link = link;
}
",196,199
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public String getManagingEditor () {
    return (this.managingEditor);
}
",207,210
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public void setManagingEditor (String managingEditor) {
    this.managingEditor = managingEditor;
}
",212,215
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public String getPubDate () {
    return (this.pubDate);
}
",223,226
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public void setPubDate (String pubDate) {
    this.pubDate = pubDate;
}
",228,231
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public String getRating () {
    return (this.rating);
}
",239,242
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public void setRating (String rating) {
    this.rating = rating;
}
",244,247
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public TextInput getTextInput () {
    return (this.textInput);
}
",255,258
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public void setTextInput (TextInput textInput) {
    this.textInput = textInput;
}
",260,263
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public String getTitle () {
    return (this.title);
}
",271,274
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public void setTitle (String title) {
    this.title = title;
}
",276,279
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public double getVersion () {
    return (this.version);
}
",287,290
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public void setVersion (double version) {
    this.version = version;
}
",292,295
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public String getWebMaster () {
    return (this.webMaster);
}
",303,306
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public void setWebMaster (String webMaster) {
    this.webMaster = webMaster;
}
",308,311
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public void addItem (Item item) {
    synchronized (items) {
        items.add (item);
    }
}
",322,328
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public void addSkipDay (String skipDay) {
    synchronized (skipDays) {
        skipDays.add (skipDay);
    }
}
",336,342
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public void addSkipHour (String skipHour) {
    synchronized (skipHours) {
        skipHours.add (skipHour);
    }
}
",350,356
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public List getItems () {
    return items;
}
",361,364
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public String [] findSkipDays () {
    synchronized (skipDays) {
        String skipDays [] = new String [this.skipDays.size ()];
        return ((String []) this.skipDays.toArray (skipDays));
    }
}
",370,377
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public String [] getSkipHours () {
    return findSkipHours ();
}
",383,386
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public String [] findSkipHours () {
    synchronized (skipHours) {
        String skipHours [] = new String [this.skipHours.size ()];
        return ((String []) this.skipHours.toArray (skipHours));
    }
}
",392,399
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public String [] getSkipDays () {
    return findSkipDays ();
}
",405,408
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public void removeItem (Item item) {
    synchronized (items) {
        items.remove (item);
    }
}
",416,422
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public void removeSkipDay (String skipDay) {
    synchronized (skipDays) {
        skipDays.remove (skipDay);
    }
}
",430,436
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Channel.java,"
public void removeSkipHour (String skipHour) {
    synchronized (skipHours) {
        skipHours.remove (skipHour);
    }
}
",444,450
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/TestRSS.java,"
public TestRSS (String testName) {
    super (testName);
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/TestRSS.java,"
public void testPrintTextSummary () throws Exception {
    RSSApplication rssApplication = new RSSApplication ();
    File file = new File (getTestFile (""src/test/org/apache/commons/betwixt/examples/rss/rss-example.xml""));
    String output = rssApplication.plainTextSummary (file);
    String expected = ""channel: MozillaZine\n"" + ""url: http://www.mozillazine.org\n"" + ""copyright: Public Domain\n\n"" + ""title: Java2 in Navigator 5?\n"" + ""link: http://www.mozillazine.org/talkback.html?article=607\n"" + ""description: Will Java2 be an integrated part of Navigator 5? "" + ""Read more about it in this discussion...\n\n"" + ""title: Communicator 4.61 Out\n"" + ""link: http://www.mozillazine.org/talkback.html?article=606\n"" + ""description: The latest version of Communicator is now "" + ""available.  It includes security enhancements "" + ""and various bug fixes.\n\n"" + ""title: Mozilla Dispenses with Old, Proprietary DOM\n"" + ""link: http://www.mozillazine.org/talkback.html?article=604\n"" + ""description: \n\n"" + ""title: The Animation Contest is Now Closed\n"" + ""link: http://www.mozillazine.org/talkback.html?article=603\n"" + ""description: \n"";
    assertEquals (output, expected);
}
",40,65
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Item.java,"
public String getDescription () {
    if (this.description == null) {
        return """";
    }
    return (this.description);
}
",47,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Item.java,"
public void setDescription (String description) {
    this.description = description;
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Item.java,"
public String getLink () {
    return (this.link);
}
",67,70
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Item.java,"
public void setLink (String link) {
    this.link = link;
}
",72,75
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Item.java,"
public String getTitle () {
    return (this.title);
}
",83,86
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Item.java,"
public void setTitle (String title) {
    this.title = title;
}
",88,91
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/TextInput.java,"
public String getDescription () {
    return (this.description);
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/TextInput.java,"
public void setDescription (String description) {
    this.description = description;
}
",52,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/TextInput.java,"
public String getLink () {
    return (this.link);
}
",63,66
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/TextInput.java,"
public void setLink (String link) {
    this.link = link;
}
",68,71
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/TextInput.java,"
public String getName () {
    return (this.name);
}
",79,82
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/TextInput.java,"
public void setName (String name) {
    this.name = name;
}
",84,87
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/TextInput.java,"
public String getTitle () {
    return (this.title);
}
",95,98
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/TextInput.java,"
public void setTitle (String title) {
    this.title = title;
}
",100,103
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Image.java,"
public String getDescription () {
    return (this.description);
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Image.java,"
public void setDescription (String description) {
    this.description = description;
}
",52,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Image.java,"
public int getHeight () {
    return (this.height);
}
",63,66
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Image.java,"
public void setHeight (int height) {
    this.height = height;
}
",68,71
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Image.java,"
public String getLink () {
    return (this.link);
}
",79,82
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Image.java,"
public void setLink (String link) {
    this.link = link;
}
",84,87
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Image.java,"
public String getTitle () {
    return (this.title);
}
",95,98
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Image.java,"
public void setTitle (String title) {
    this.title = title;
}
",100,103
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Image.java,"
public String getURL () {
    return (this.url);
}
",111,114
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Image.java,"
public void setURL (String url) {
    this.url = url;
}
",116,119
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Image.java,"
public int getWidth () {
    return (this.width);
}
",127,130
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/Image.java,"
public void setWidth (int width) {
    this.width = width;
}
",132,135
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/RSSApplication.java,"
public static void main (String args []) throws Exception {
    if (args.length != 1) {
        System.err.println (""Usage: <filename>"");
        System.exit (1);
    }
    RSSApplication rssApplication = new RSSApplication ();
    System.out.println (rssApplication.plainTextSummary (args [0]));
    System.exit (0);
}
",41,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/RSSApplication.java,"
public RSSApplication () throws Exception {
    configure ();
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/RSSApplication.java,"
private void configure () throws Exception {
    reader.registerBeanClass (Channel.class);
}
",61,64
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/RSSApplication.java,"
public String plainTextSummary (String filename) throws Exception {
    return plainTextSummary (new File (filename));
}
",66,69
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/RSSApplication.java,"
public String plainTextSummary (File file) throws Exception {
    Channel channel = (Channel) reader.parse (file);
    return plainTextSummary (channel);
}
",71,75
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/examples/rss/RSSApplication.java,"
public String plainTextSummary (Channel channel) {
    StringBuffer buffer = new StringBuffer ();
    buffer.append (""channel: "");
    buffer.append (channel.getTitle ());
    buffer.append ('\n');
    buffer.append (""url: "");
    buffer.append (channel.getLink ());
    buffer.append ('\n');
    buffer.append (""copyright: "");
    buffer.append (channel.getCopyright ());
    buffer.append ('\n');
    for (Iterator it = channel.getItems ().iterator (); it.hasNext ();) {
        Item item = (Item) it.next ();
        buffer.append ('\n');
        buffer.append (""title: "");
        buffer.append (item.getTitle ());
        buffer.append ('\n');
        buffer.append (""link: "");
        buffer.append (item.getLink ());
        buffer.append ('\n');
        buffer.append (""description: "");
        buffer.append (item.getDescription ());
        buffer.append ('\n');
    }
    return buffer.toString ();
}
",78,107
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/TestIDRead.java,"
public static void main (String [] args) {
    TestRunner.run (suite ());
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/TestIDRead.java,"
public static Test suite () {
    return new TestSuite (TestIDRead.class);
}
",52,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/TestIDRead.java,"
public TestIDRead (String testName) {
    super (testName);
}
",57,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/TestIDRead.java,"
public void testSimpleRead () throws Exception {
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    IDBean bean = new IDBean (""alpha"", ""one"");
    bean.addChild (new IDBean (""beta"", ""two""));
    bean.addChild (new IDBean (""gamma"", ""three""));
    writer.write (bean);
    String xml = ""<IDBean><name>one</name><children><child><name>two</name><children/>"" + ""<id>beta</id></child><child><name>three</name><children/>"" + ""<id>gamma</id></child></children><id>alpha</id></IDBean>"";
    xmlAssertIsomorphicContent (parseString (xml), parseString (out.getBuffer ().toString ()), true);
    BeanReader reader = new BeanReader ();
    reader.registerBeanClass (IDBean.class);
    InputStream in = new FileInputStream (getTestFile (""src/test/org/apache/commons/betwixt/digester/SimpleReadTest.xml""));
    try {
        Object obj = reader.parse (in);
        assertEquals (""Read bean type is incorrect"", true, (obj instanceof IDBean));
        IDBean alpha = (IDBean) obj;
        assertEquals (""Wrong list size"", 2, alpha.getChildren ().size ());
        IDBean beta = (IDBean) alpha.getChildren ().get (0);
        assertEquals (""Wrong name (A)"", ""beta"", beta.getName ());
        IDBean gamma = (IDBean) alpha.getChildren ().get (1);
        assertEquals (""Wrong name (B)"", ""gamma"", gamma.getName ());
    } finally {
        in.close ();
    }
}
",62,140
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/TestIDRead.java,"
public void testIDRead () throws Exception {
    BeanReader reader = new BeanReader ();
    reader.registerBeanClass (IDBean.class);
    InputStream in = new FileInputStream (getTestFile (""src/test/org/apache/commons/betwixt/digester/IDTest1.xml""));
    try {
        Object obj = reader.parse (in);
        assertEquals (""Read bean type is incorrect"", true, (obj instanceof IDBean));
        IDBean alpha = (IDBean) obj;
        assertEquals (""Wrong list size (A)"", 2, alpha.getChildren ().size ());
        IDBean beta = (IDBean) alpha.getChildren ().get (0);
        assertEquals (""Wrong name (A)"", ""beta"", beta.getName ());
        IDBean gamma = (IDBean) alpha.getChildren ().get (1);
        assertEquals (""Wrong name (B)"", ""gamma"", gamma.getName ());
        assertEquals (""Wrong list size (B)"", 2, gamma.getChildren ().size ());
        IDBean sonOfGamma = (IDBean) gamma.getChildren ().get (1);
        assertEquals (""Wrong id (A)"", ""two"", sonOfGamma.getId ());
        assertEquals (""Wrong name (C)"", ""beta"", sonOfGamma.getName ());
        assertEquals (""IDREF bean not equal to ID bean"", beta, sonOfGamma);
    } finally {
        in.close ();
    }
}
",142,196
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/TestOptionDigestion.java,"
protected void setUp () throws Exception {
    super.setUp ();
    elementDescriptor = new ElementDescriptor ();
    digester = new Digester ();
    digester.push (elementDescriptor);
    optionRule = new OptionRule ();
    optionRule.setDigester (digester);
    nameRule = optionRule.getNameRule ();
    valueRule = optionRule.getValueRule ();
}
",42,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/TestOptionDigestion.java,"
public void testGoodDigestion () throws Exception {
    optionRule.begin ("""", ""option"", new AttributesImpl ());
    nameRule.begin ("""", ""name"", new AttributesImpl ());
    nameRule.body ("""", ""name"", ""one"");
    nameRule.end ("""", ""name"");
    valueRule.begin ("""", ""value"", new AttributesImpl ());
    valueRule.body ("""", ""value"", ""ONE"");
    valueRule.end ("""", ""value"");
    optionRule.end ("""", ""option"");
    assertEquals (""Option set"", ""ONE"", elementDescriptor.getOptions ().getValue (""one""));
}
",54,67
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/TestOptionDigestion.java,"
public void testTwoDigestions () throws Exception {
    optionRule.begin ("""", ""option"", new AttributesImpl ());
    nameRule.begin ("""", ""name"", new AttributesImpl ());
    nameRule.body ("""", ""name"", ""one"");
    nameRule.end ("""", ""name"");
    valueRule.begin ("""", ""value"", new AttributesImpl ());
    valueRule.body ("""", ""value"", ""ONE"");
    valueRule.end ("""", ""value"");
    optionRule.end ("""", ""option"");
    optionRule.begin ("""", ""option"", new AttributesImpl ());
    valueRule.begin ("""", ""value"", new AttributesImpl ());
    valueRule.body ("""", ""value"", ""TWO"");
    valueRule.end ("""", ""value"");
    nameRule.begin ("""", ""name"", new AttributesImpl ());
    nameRule.body ("""", ""name"", ""two"");
    nameRule.end ("""", ""name"");
    optionRule.end ("""", ""option"");
    assertEquals (""Option set"", ""ONE"", elementDescriptor.getOptions ().getValue (""one""));
    assertEquals (""Option set"", ""TWO"", elementDescriptor.getOptions ().getValue (""two""));
}
",70,93
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/TestOptionDigestion.java,"
public void testGracefulBadMapping () throws Exception {
    optionRule.begin ("""", ""option"", new AttributesImpl ());
    nameRule.begin ("""", ""name"", new AttributesImpl ());
    nameRule.body ("""", ""name"", ""one"");
    nameRule.end ("""", ""name"");
    optionRule.end ("""", ""option"");
    optionRule.begin ("""", ""option"", new AttributesImpl ());
    valueRule.begin ("""", ""value"", new AttributesImpl ());
    valueRule.body ("""", ""value"", ""ONE"");
    valueRule.end ("""", ""value"");
    optionRule.end ("""", ""option"");
    optionRule.begin ("""", ""option"", new AttributesImpl ());
    nameRule.begin ("""", ""name"", new AttributesImpl ());
    nameRule.body ("""", ""name"", ""two"");
    nameRule.end ("""", ""name"");
    valueRule.begin ("""", ""value"", new AttributesImpl ());
    valueRule.body ("""", ""value"", ""TWO"");
    valueRule.end ("""", ""value"");
    optionRule.end ("""", ""option"");
    assertEquals (""Option set"", null, elementDescriptor.getOptions ().getValue (""one""));
    assertEquals (""Option set"", ""TWO"", elementDescriptor.getOptions ().getValue (""two""));
}
",96,121
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/TestDigestDotBetwixt.java,"
public void testDigestWithOptions () throws Exception {
    String xml = ""<?xml version='1.0'?>"" + ""<info>"" + ""    <element name='example-bean'>"" + ""        <option>"" + ""           <name>one</name>"" + ""           <value>value one</value>"" + ""        </option>"" + ""        <option>"" + ""           <name>two</name>"" + ""           <value>value two</value>"" + ""        </option>"" + ""        <element name='example' property='examples'>"" + ""          <option>"" + ""             <name>three</name>"" + ""             <value>value three</value>"" + ""          </option>"" + ""        </element>"" + ""    </element>"" + ""</info>"";
    XMLBeanInfoDigester digester = new XMLBeanInfoDigester ();
    digester.setXMLIntrospector (new XMLIntrospector ());
    digester.setBeanClass (ExampleBean.class);
    XMLBeanInfo xmlBeanInfo = (XMLBeanInfo) digester.parse (new StringReader (xml));
    ElementDescriptor baseDescriptor = xmlBeanInfo.getElementDescriptor ();
    assertEquals (""Value one set on base"", ""value one"", baseDescriptor.getOptions ().getValue (""one""));
    assertEquals (""Value two set on base"", ""value two"", baseDescriptor.getOptions ().getValue (""two""));
    assertNull (""Value three not set on base"", baseDescriptor.getOptions ().getValue (""three""));
    assertEquals (""Number of child elements"", 1, baseDescriptor.getElementDescriptors ().length);
    ElementDescriptor childDescriptor = baseDescriptor.getElementDescriptors () [0];
    assertNull (""Value one set on base"", childDescriptor.getOptions ().getValue (""one""));
    assertNull (""Value two set on base"", childDescriptor.getOptions ().getValue (""two""));
    assertEquals (""Value three set on child"", ""value three"", childDescriptor.getOptions ().getValue (""three""));
}
",38,76
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/IDBean.java,"
public IDBean () {
    log.debug (""Created"");
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/IDBean.java,"
public IDBean (String id, String name) {
    setId (id);
    setName (name);
}
",48,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/IDBean.java,"
public String getId () {
    return id;
}
",54,57
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/IDBean.java,"
public void setId (String id) {
    this.id = id;
}
",59,62
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/IDBean.java,"
public String getName () {
    return name;
}
",64,67
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/IDBean.java,"
public void setName (String name) {
    log.debug (""Set name: "" + name);
    this.name = name;
}
",69,73
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/IDBean.java,"
public List getChildren () {
    return children;
}
",75,78
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/IDBean.java,"
public void addChild (IDBean child) {
    log.debug (""Added child "" + child + "" to bean "" + this);
    children.add (child);
}
",80,84
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/IDBean.java,"
public String toString () {
    return ""IDBean[name="" + getName () + "",id="" + getId () + "", children="" + children.size () + ""] "" + super.toString ();
}
",86,89
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/TestXMLIntrospectorHelper.java,"
public static void main (String [] args) {
    TestRunner.run (suite ());
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/TestXMLIntrospectorHelper.java,"
public static Test suite () {
    return new TestSuite (TestXMLIntrospectorHelper.class);
}
",49,52
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/TestXMLIntrospectorHelper.java,"
public TestXMLIntrospectorHelper (String testName) {
    super (testName);
}
",54,57
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/TestXMLIntrospectorHelper.java,"
public void testCreateDescriptorWithHyphenatedElementNameMapper () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setAttributesForPrimitives (false);
    introspector.getConfiguration ().setElementNameMapper (new HyphenatedNameMapper ());
    BeanInfo beanInfo = Introspector.getBeanInfo (CustomerBean.class);
    NodeDescriptor nickNameProperty = createDescriptor (""nickName"", beanInfo, introspector);
    assertNotNull (""nickName property not found"", nickNameProperty);
    assertEquals (""nick name property"", ""nick-name"", nickNameProperty.getLocalName ());
    NodeDescriptor projectNamesProperty = createDescriptor (""projectNames"", beanInfo, introspector);
    assertNotNull (""projectNames property not found"", projectNamesProperty);
    assertEquals (""project names property"", ""project-names"", projectNamesProperty.getLocalName ());
}
",63,77
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/TestXMLIntrospectorHelper.java,"
public void testNullParameters () throws Exception {
    new XMLIntrospector ().isLoopType (null);
}
",79,82
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/TestXMLIntrospectorHelper.java,"
private NodeDescriptor createDescriptor (String propertyName, BeanInfo beanInfo, XMLIntrospector introspector) throws IntrospectionException {
    PropertyDescriptor [] properties = beanInfo.getPropertyDescriptors ();
    for (int i = 0; i < properties.length; i ++) {
        if (propertyName.equals (properties [i].getName ())) {
            NodeDescriptor desc = (NodeDescriptor) introspector.createXMLDescriptor (new BeanProperty (properties [i]));
            return desc;
        }
    }
    return null;
}
",87,101
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/digester/TestDigestMultiMapping.java,"
public void testDigestWithOptions () throws Exception {
    String xml = ""<?xml version='1.0'?>"" + ""<betwixt-config>"" + ""  <class name=\"""" + TestDigestMultiMapping.class.getName () + ""\"">"" + ""    <element name=\""test-multi-mapping\"">"" + ""      <option>"" + ""        <name>test-key-a</name>"" + ""        <value>test-value-a</value>"" + ""      </option>"" + ""      <option>"" + ""        <name>test-key-b</name>"" + ""        <value>test-value-b</value>"" + ""      </option>"" + ""      <element name=\""maps\"" property=\""maps\"">"" + ""        <option>"" + ""          <name>test-key-c</name>"" + ""          <value>test-value-c</value>"" + ""        </option>"" + ""      </element>"" + ""    </element>"" + ""  </class>"" + ""</betwixt-config>"";
    MultiMappingBeanInfoDigester digester = new MultiMappingBeanInfoDigester ();
    digester.setXMLIntrospector (new XMLIntrospector ());
    digester.setBeanClass (ExampleBean.class);
    digester.parse (new StringReader (xml));
    Map beanInfoMap = digester.getBeanInfoMap ();
    assertTrue (beanInfoMap.containsKey (TestDigestMultiMapping.class));
    XMLBeanInfo xmlBeanInfo = (XMLBeanInfo) beanInfoMap.get (TestDigestMultiMapping.class);
    assertNotNull (xmlBeanInfo);
    ElementDescriptor baseDescriptor = xmlBeanInfo.getElementDescriptor ();
    assertEquals (""Value one set on base"", ""test-value-a"", baseDescriptor.getOptions ().getValue (""test-key-a""));
    assertEquals (""Value two set on base"", ""test-value-b"", baseDescriptor.getOptions ().getValue (""test-key-b""));
    assertNull (""Value three not set on base"", baseDescriptor.getOptions ().getValue (""three""));
    assertEquals (""Number of child elements"", 1, baseDescriptor.getElementDescriptors ().length);
    ElementDescriptor childDescriptor = baseDescriptor.getElementDescriptors () [0];
    assertNull (""Value one set on base"", childDescriptor.getOptions ().getValue (""test-key-a""));
    assertNull (""Value two set on base"", childDescriptor.getOptions ().getValue (""test-key-b""));
    assertEquals (""Value three set on child"", ""test-value-c"", childDescriptor.getOptions ().getValue (""test-key-c""));
}
",38,85
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestAttributeQNameProblem.java,"
public TestAttributeQNameProblem (String testName) {
    super (testName);
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestAttributeQNameProblem.java,"
public void setDocumentLocator (Locator locator) {
}
",64,64
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestAttributeQNameProblem.java,"
public void startDocument () throws SAXException {
    System.out.println (""XML: start document event"");
}
",66,69
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestAttributeQNameProblem.java,"
public void endDocument () throws SAXException {
    System.out.println (""XML: end document event"");
}
",71,74
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestAttributeQNameProblem.java,"
public void startPrefixMapping (String prefix, String uri) throws SAXException {
    System.out.println (""XML: start prefix '"" + prefix + ""' mapping, URI: "" + uri);
}
",76,79
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestAttributeQNameProblem.java,"
public void endPrefixMapping (String prefix) throws SAXException {
    System.out.println (""XML: end prefix '"" + prefix + ""' mapping"");
}
",81,84
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestAttributeQNameProblem.java,"
public void startElement (String uri, String localName, String qName, Attributes atts) throws SAXException {
    System.out.println (""XML: start element qName '"" + qName + ""', localName '"" + localName + ""', URI:"" + uri);
    for (int i = 0; i < atts.getLength (); i ++) {
        System.out.println (""     - Attribute qName '"" + atts.getQName (i) + ""', localName '"" + atts.getLocalName (i) + ""' of "" + atts.getType (i) + "": "" + atts.getValue (i));
        assertEquals (atts.getQName (i), atts.getLocalName (i));
    }
}
",86,98
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestAttributeQNameProblem.java,"
public void endElement (String uri, String localName, String qName) throws SAXException {
    System.out.println (""XML: end element '"" + qName + ""'"");
}
",100,103
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestAttributeQNameProblem.java,"
public void characters (char [] ch, int start, int length) throws SAXException {
    System.out.println (""XML: characters: from "" + start + "", length "" + length);
}
",105,108
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestAttributeQNameProblem.java,"
public void ignorableWhitespace (char [] ch, int start, int length) throws SAXException {
}
",110,110
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestAttributeQNameProblem.java,"
public void processingInstruction (String target, String data) throws SAXException {
    System.out.println (""XML: processing instruction, target '"" + target + ""': "" + data);
}
",112,115
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestAttributeQNameProblem.java,"
public void skippedEntity (String name) throws SAXException {
}
",117,117
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestAttributeQNameProblem.java,"
public void testAttributeOutput () {
    try {
        SAXBeanWriter beanWriter = new SAXBeanWriter (new StdOutContentHandler ());
        Object bean = new SimpleClass ();
        beanWriter.write (bean);
    } catch (Exception ex) {
        ex.printStackTrace ();
    }
}
",121,133
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AbstractTestCase.java,"
public AbstractTestCase (String testName) {
    super (testName);
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AbstractTestCase.java,"
public String getTestFile (String path) {
    return new File (basedir, path).getAbsolutePath ();
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AbstractTestCase.java,"
public String getTestFileURL (String path) throws MalformedURLException {
    return new File (basedir, path).toURL ().toString ();
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AbstractTestCase.java,"
protected Object createBean () {
    CustomerBean bean = new CustomerBean ();
    bean.setID (""1"");
    bean.setName (""James"");
    bean.setEmails (new String [] {""jstrachan@apache.org"", ""james_strachan@yahoo.co.uk""});
    bean.setNumbers (new int [] {3, 4, 5});
    bean.setLocation (0, ""Highbury Barn"");
    bean.setLocation (1, ""Monument"");
    bean.setLocation (2, ""Leeds"");
    Map projects = new HashMap ();
    projects.put (""dom4j"", ""http://dom4j.org"");
    projects.put (""jaxen"", ""http://jaxen.org"");
    projects.put (""jakarta-commons"", ""http://jakarta.apache.org/commons/"");
    projects.put (""jakarta-taglibs"", ""http://jakarta.apache.org/taglibs/"");
    bean.setProjectMap (projects);
    AddressBean address = new AddressBean ();
    address.setStreet (""Near the park"");
    address.setCity (""London"");
    address.setCountry (""UK"");
    address.setCode (""N5"");
    bean.setAddress (address);
    bean.setDate ((Date) ConvertUtils.convert (""2002-03-17"", Date.class));
    bean.setTime ((Time) ConvertUtils.convert (""20:30:40"", Time.class));
    bean.setTimestamp ((Timestamp) ConvertUtils.convert (""2002-03-17 20:30:40.0"", Timestamp.class));
    bean.setBigDecimal (new BigDecimal (""1234567890.12345""));
    bean.setBigInteger (new BigInteger (""1234567890""));
    return bean;
}
",60,94
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanWriter.java,"
public static void main (String [] args) {
    TestRunner.run (suite ());
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanWriter.java,"
public static Test suite () {
    return new TestSuite (TestBeanWriter.class);
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanWriter.java,"
public TestBeanWriter (String testName) {
    super (testName);
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanWriter.java,"
public void testBeanWriter () throws Exception {
    Object bean = createBean ();
    System.out.println (""Now trying pretty print"");
    BeanWriter writer = new BeanWriter ();
    writer.setWriteEmptyElements (true);
    writer.setEndOfLine (""\n"");
    writer.enablePrettyPrint ();
    writer.write (bean);
}
",60,71
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanWriter.java,"
public void testLooping () throws Exception {
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.setEndOfLine (""\n"");
    writer.enablePrettyPrint ();
    writer.write (LoopBean.createNoLoopExampleBean ());
    String xml = ""<?xml version='1.0'?><LoopBean id='1'><name>Root</name><friend id='2'><name>level1</name>"" + ""<friend id='3'><name>level2</name><friend id='4'><name>level3</name><friend id='5'><name>level4</name>"" + ""<friend id='6'><name>level5</name></friend></friend></friend></friend></friend></LoopBean>"";
    String xmlOut = out.getBuffer ().toString ();
    xmlAssertIsomorphicContent (""Test no loop"", parseString (xmlOut), parseString (xml), true);
    out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.write (LoopBean.createLoopExampleBean ());
    xml = ""<?xml version='1.0'?><LoopBean id='1'><name>Root</name><friend id='2'><name>level1</name>"" + ""<friend id='3'><name>level2</name><friend id='4'><name>level3</name><friend id='5'><name>level4</name>"" + ""<friend id='6'><name>level5</name><friend idref='1'/></friend></friend></friend>"" + ""</friend></friend></LoopBean>"";
    xmlAssertIsomorphicContent (""Test loop"", parseString (out.getBuffer ().toString ()), parseString (xml), true);
    out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (LoopBean.createNoLoopExampleBean ());
    xml = ""<?xml version='1.0'?><LoopBean><name>Root</name><friend><name>level1</name><friend>"" + ""<name>level2</name><friend><name>level3</name><friend><name>level4</name><friend>"" + ""<name>level5</name></friend></friend>"" + ""</friend></friend></friend></LoopBean>"";
    xmlAssertIsomorphicContent (""Test no loop, no ids"", parseString (out.getBuffer ().toString ()), parseString (xml), true);
    out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (LoopBean.createIdOnlyLoopExampleBean ());
    xml = ""<?xml version='1.0'?><LoopBean><name>Root</name><friend><name>level1</name>"" + ""<friend><name>level2</name><friend><name>level3</name><friend><name>level4</name>"" + ""<friend><name>level5</name><friend><name>Root</name></friend></friend>"" + ""</friend></friend></friend></friend></LoopBean>"";
    xmlAssertIsomorphicContent (""Test id only loop"", parseString (out.getBuffer ().toString ()), parseString (xml), true);
    try {
        out = new StringWriter ();
        out.write (""<?xml version='1.0'?>"");
        writer = new BeanWriter (out);
        writer.setWriteEmptyElements (true);
        writer.getBindingConfiguration ().setMapIDs (false);
        writer.write (LoopBean.createLoopExampleBean ());
        fail (""CyclicReferenceException not thrown!"");
    } catch (CyclicReferenceException e) {
    }
}
",74,169
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanWriter.java,"
public void testEscaping () throws Exception {
    ByteArrayOutputStream out = new ByteArrayOutputStream ();
    BeanWriter writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.setEndOfLine (""\n"");
    writer.enablePrettyPrint ();
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setAttributesForPrimitives (true);
    writer.setXMLIntrospector (introspector);
    writer.write (new LoopBean (""Escape<LessThan""));
    writer.write (new LoopBean (""Escape>GreaterThan""));
    writer.write (new LoopBean (""Escape&amphersand""));
    writer.write (new LoopBean (""Escape'apostrophe""));
    writer.write (new LoopBean (""Escape\""Quote""));
    CustomerBean bean = new CustomerBean ();
    bean.setEmails (new String [] {""Escape<LessThan"", ""Escape>GreaterThan"", ""Escape&amphersand"", ""Escape'apostrophe"", ""Escape\""Quote""});
    bean.setName (""Escape<LessThan"");
    AddressBean address = new AddressBean ();
    address.setCode (""Escape>GreaterThan"");
    address.setCountry (""Escape&amphersand"");
    address.setCity (""Escape'apostrophe"");
    address.setStreet (""Escape\""Quote"");
    bean.setAddress (address);
    writer.write (bean);
    out.flush ();
    String result = ""<?xml version='1.0'?><beans>"" + out.toString () + ""</beans>"";
    assertTrue (result.indexOf (""<email>Escape&lt;LessThan</email>"") > - 1);
    assertTrue (result.indexOf (""<email>Escape&gt;GreaterThan</email>"") > - 1);
    assertTrue (result.indexOf (""<email>Escape&amp;amphersand</email>"") != - 1);
    assertTrue (result.indexOf (""<email>Escape'apostrophe</email>"") != - 1);
    assertTrue (result.indexOf (""<email>Escape\""Quote</email>"") != - 1);
    assertTrue (result.indexOf (""name=\""Escape&lt;LessThan\"""") > - 1);
    assertTrue (result.indexOf (""code=\""Escape&gt;GreaterThan\"""") > - 1);
    assertTrue (result.indexOf (""country=\""Escape&amp;amphersand\"""") != - 1);
    assertTrue (result.indexOf (""city=\""Escape&apos;apostrophe\"""") != - 1);
    assertTrue (result.indexOf (""street=\""Escape&quot;Quote\"""") != - 1);
    String xml = ""<?xml version='1.0'?><beans>  <LoopBean name='Escape&lt;LessThan'/>"" + ""<LoopBean name='Escape&gt;GreaterThan'/><LoopBean name='Escape&amp;amphersand'/>"" + ""<LoopBean name='Escape&apos;apostrophe'/><LoopBean name='Escape&quot;Quote'/>"" + ""<CustomerBean name='Escape&lt;LessThan' >"" + ""<projectMap/><projectNames/><emails><email>Escape&lt;LessThan</email>"" + ""<email>Escape&gt;GreaterThan</email><email>Escape&amp;amphersand</email>"" + ""<email>Escape'apostrophe</email><email>Escape\""Quote</email></emails>"" + ""<locations/><projectURLs/>"" + ""<address code='Escape&gt;GreaterThan' city='Escape&apos;apostrophe' "" + ""country='Escape&amp;amphersand' street='Escape&quot;Quote'/>"" + ""<numbers/></CustomerBean></beans>"";
    xmlAssertIsomorphicContent (""Test escaping "", parseString (result), parseString (xml), true);
}
",171,242
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanWriter.java,"
public void testValidEndOfLine () throws Exception {
    BeanWriter writer = new BeanWriter ();
    writer.setWriteEmptyElements (true);
    PrintStream errStream = System.err;
    ByteArrayOutputStream warning = new ByteArrayOutputStream ();
    System.setErr (new PrintStream (warning));
    writer.setLog (new SimpleLog (""test.betwixt""));
    writer.setEndOfLine (""X"");
    warning.flush ();
    assertTrue (warning.toString ().startsWith (""[WARN]""));
    warning.reset ();
    writer.setEndOfLine (""\tX"");
    warning.flush ();
    assertTrue (warning.toString ().startsWith (""[WARN]""));
    warning.reset ();
    writer.setEndOfLine ("" "");
    warning.flush ();
    assertTrue (warning.toString ().equals (""""));
    warning.reset ();
    System.setErr (errStream);
}
",247,276
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanWriter.java,"
public void testSimpleWriteEmptyElements () throws Exception {
    AddressBean bean = new AddressBean ();
    bean.setStreet (""Pasture Lane"");
    bean.setCity (""Bradford"");
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (bean);
    String xml = ""<?xml version='1.0'?><AddressBean><street>Pasture Lane</street><city>Bradford</city>"" + ""<code/><country/></AddressBean>"";
    xmlAssertIsomorphicContent (parseString (out.getBuffer ().toString ()), parseString (xml), true);
    out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    writer = new BeanWriter (out);
    writer.setWriteEmptyElements (false);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (bean);
    xml = ""<?xml version='1.0'?><AddressBean><street>Pasture Lane</street><city>Bradford</city>"" + ""</AddressBean>"";
    xmlAssertIsomorphicContent (parseString (out.getBuffer ().toString ()), parseString (xml), true);
}
",279,320
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanWriter.java,"
public void testArrayWrite () throws Exception {
    ArrayBean bean = new ArrayBean (""Rob"");
    bean.addHobby (""Hacking open source software"");
    bean.addHobby (""Playing cricket"");
    bean.addHobby (""Watching rugby league"");
    bean.addHobby (""Havin' it large"");
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (bean);
    String xml = ""<?xml version='1.0'?><ArrayBean><name>Rob</name><hobbies>"" + ""<hobby>Hacking open source software</hobby>"" + ""<hobby>Playing cricket</hobby>"" + ""<hobby>Watching rugby league</hobby>"" + ""<hobby>Havin' it large</hobby>"" + ""</hobbies></ArrayBean>"";
    xmlAssertIsomorphicContent (parseString (out.getBuffer ().toString ()), parseString (xml), true);
    String [] array = {""This"", ""That"", ""The Other""};
    out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (array);
    xml = ""<?xml version='1.0'?><Array>"" + ""<String>This</String>"" + ""<String>That</String>"" + ""<String>The Other</String>"" + ""</Array>"";
    xmlAssertIsomorphicContent (parseString (out.getBuffer ().toString ()), parseString (xml), true);
}
",323,367
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanWriter.java,"
public void testListedWriteEmptyElements () throws Exception {
    ListOfNames names = new ListOfNames ();
    names.addName (new NameBean (""Tom""));
    names.addName (new NameBean (""Dick""));
    names.addName (new NameBean (""Harry""));
    names.addName (new NameBean (""""));
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setWriteEmptyElements (false);
    writer.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (false);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (""Names"", names);
    String xml = ""<?xml version='1.0'?><Names>"" + ""<name><name>Tom</name></name>"" + ""<name><name>Dick</name></name>"" + ""<name><name>Harry</name></name>"" + ""</Names>"";
    xmlAssertIsomorphicContent (parseString (out.getBuffer ().toString ()), parseString (xml), true);
    out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (false);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (""Names"", names);
    xml = ""<?xml version='1.0'?><Names>"" + ""<name><name>Tom</name></name>"" + ""<name><name>Dick</name></name>"" + ""<name><name>Harry</name></name>"" + ""<name><name/></name>"" + ""</Names>"";
    xmlAssertIsomorphicContent (parseString (out.getBuffer ().toString ()), parseString (xml), true);
    out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (true);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (""Names"", names);
    xml = ""<?xml version='1.0'?><Names><names>"" + ""<name><name>Tom</name></name>"" + ""<name><name>Dick</name></name>"" + ""<name><name>Harry</name></name>"" + ""<name><name/></name></names>"" + ""</Names>"";
    xmlAssertIsomorphicContent (parseString (out.getBuffer ().toString ()), parseString (xml), true);
    out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    writer = new BeanWriter (out);
    writer.setWriteEmptyElements (false);
    writer.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (true);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (""Names"", names);
    xml = ""<?xml version='1.0'?><Names><names>"" + ""<name><name>Tom</name></name>"" + ""<name><name>Dick</name></name>"" + ""<name><name>Harry</name></name>"" + ""</names>"" + ""</Names>"";
    xmlAssertIsomorphicContent (parseString (out.getBuffer ().toString ()), parseString (xml), true);
}
",371,475
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanWriter.java,"
public void testWriteNameMapperStrategy () throws Exception {
    ListOfNames names = new ListOfNames ();
    names.addName (new NameBean (""Sid James""));
    names.addName (new NameBean (""Kenneth Williams""));
    names.addName (new NameBean (""Joan Simms""));
    names.addName (new NameBean (""Charles Hawtrey""));
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (true);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (""CarryOn"", names);
    String xml = ""<?xml version='1.0'?><CarryOn><names>"" + ""<name><name>Sid James</name></name>"" + ""<name><name>Kenneth Williams</name></name>"" + ""<name><name>Joan Simms</name></name>"" + ""<name><name>Charles Hawtrey</name></name>"" + ""</names>"" + ""</CarryOn>"";
    xmlAssertIsomorphicContent (parseString (out.getBuffer ().toString ()), parseString (xml), true);
    out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (true);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.getXMLIntrospector ().getConfiguration ().setElementNameMapper (new CapitalizeNameMapper ());
    writer.write (""CarryOn"", names);
    xml = ""<?xml version='1.0'?><CarryOn><Names>"" + ""<Name><Name>Sid James</Name></Name>"" + ""<Name><Name>Kenneth Williams</Name></Name>"" + ""<Name><Name>Joan Simms</Name></Name>"" + ""<Name><Name>Charles Hawtrey</Name></Name>"" + ""</Names>"" + ""</CarryOn>"";
    xmlAssertIsomorphicContent (parseString (out.getBuffer ().toString ()), parseString (xml), true);
    ArrayList things = new ArrayList ();
    things.add (new NameBean (""Sugar""));
    things.add (new NameBean (""Spice""));
    things.add (new NameBean (""All Things Nice""));
    NoAdderBean bean = new NoAdderBean ();
    bean.setThings (things);
    out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (true);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (bean);
    xml = ""<?xml version='1.0'?><NoAdderBean><things>"" + ""<NameBean><name>Sugar</name></NameBean>"" + ""<NameBean><name>Spice</name></NameBean>"" + ""<NameBean><name>All Things Nice</name></NameBean>"" + ""</things>"" + ""</NoAdderBean>"";
    xmlAssertIsomorphicContent (parseString (out.getBuffer ().toString ()), parseString (xml), true);
    out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (true);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.getXMLIntrospector ().getConfiguration ().setElementNameMapper (new CapitalizeNameMapper ());
    writer.write (bean);
    xml = ""<?xml version='1.0'?><NoAdderBean><Things>"" + ""<NameBean><Name>Sugar</Name></NameBean>"" + ""<NameBean><Name>Spice</Name></NameBean>"" + ""<NameBean><Name>All Things Nice</Name></NameBean>"" + ""</Things>"" + ""</NoAdderBean>"";
    xmlAssertIsomorphicContent (parseString (out.getBuffer ().toString ()), parseString (xml), true);
    out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (true);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.getXMLIntrospector ().getConfiguration ().setElementNameMapper (new HyphenatedNameMapper (false));
    writer.write (bean);
    xml = ""<?xml version='1.0'?><no-adder-bean><things>"" + ""<name-bean><name>Sugar</name></name-bean>"" + ""<name-bean><name>Spice</name></name-bean>"" + ""<name-bean><name>All Things Nice</name></name-bean>"" + ""</things>"" + ""</no-adder-bean>"";
    xmlAssertIsomorphicContent (parseString (out.getBuffer ().toString ()), parseString (xml), true);
}
",477,599
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanWriter.java,"
public void testBeanWriterWorksWithAnAddMethodAndACollection () throws Exception {
    BeanWriter bw = new BeanWriter ();
    try {
        bw.write (new BeanWithAddMethod ());
    } catch (IllegalArgumentException e) {
        fail (""BeanWriter fails when a method is just called add(<type>) and there is also a collection"");
    }
}
",601,613
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanWriter.java,"
public void add (Object x) {
}
",619,622
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanWriter.java,"
public Collection getX () {
    return x;
}
",624,627
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestBeanWriter.java,"
public void setX (Collection x) {
    this.x = x;
}
",629,632
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestDynaBeanSupport.java,"
public static void main (String [] args) {
    TestRunner.run (suite ());
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestDynaBeanSupport.java,"
public static Test suite () {
    return new TestSuite (TestDynaBeanSupport.class);
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestDynaBeanSupport.java,"
public TestDynaBeanSupport (String testName) {
    super (testName);
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestDynaBeanSupport.java,"
public void testIntrospectDynaBean () throws Exception {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setAttributesForPrimitives (false);
    XMLBeanInfo beanInfo = introspector.introspect (createDynasaurClass ());
    ElementDescriptor baseElement = beanInfo.getElementDescriptor ();
    assertEquals (""Correct number of attributes"", 0, baseElement.getAttributeDescriptors ().length);
    ElementDescriptor [] descriptors = baseElement.getElementDescriptors ();
    assertEquals (""Correct number of elements"", 3, descriptors.length);
    boolean matchedSpecies = false;
    boolean matchedIsRaptor = false;
    boolean matchedPeriod = false;
    for (int i = 0, size = descriptors.length; i < size; i ++) {
        if (""Species"".equals (descriptors [i].getPropertyName ())) {
            matchedSpecies = true;
        }
        if (""isRaptor"".equals (descriptors [i].getPropertyName ())) {
            matchedIsRaptor = true;
        }
        if (""Period"".equals (descriptors [i].getPropertyName ())) {
            matchedPeriod = true;
        }
    }
    assertTrue (""Species descriptor not found"", matchedSpecies);
    assertTrue (""isRaptor descriptor not found"", matchedIsRaptor);
    assertTrue (""Period descriptor not found"", matchedPeriod);
}
",55,91
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestDynaBeanSupport.java,"
public void testWriteDynaBean () throws Exception {
    DynaBean dynasaur = createDynasaurClass ().newInstance ();
    dynasaur.set (""Species"", ""Allosaurus"");
    dynasaur.set (""isRaptor"", Boolean.TRUE);
    dynasaur.set (""Period"", ""Jurassic"");
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.getXMLIntrospector ().getConfiguration ().setElementNameMapper (new DecapitalizeNameMapper ());
    writer.write (dynasaur);
    String xml = ""<?xml version='1.0'?><dynasaur><species>Allosaurus</species>"" + ""<isRaptor>true</isRaptor><period>Jurassic</period></dynasaur>"";
    xmlAssertIsomorphicContent (""Test write dyna beans"", parseString (xml), parseString (out.getBuffer ().toString ()), true);
}
",93,115
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestDynaBeanSupport.java,"
public void testOverrideWithDotBetwixt () throws Exception {
    DynaWithDotBetwixt bean = new DynaWithDotBetwixt (""Tweedledum"", ""Tweedledee"");
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.getXMLIntrospector ().getConfiguration ().setElementNameMapper (new DecapitalizeNameMapper ());
    writer.write (""bean"", bean);
    String xml = ""<?xml version='1.0'?><bean><ndp>Tweedledum</ndp></bean>"";
    xmlAssertIsomorphicContent (""Test write dyna beans with dt betwixt"", parseString (xml), parseString (out.getBuffer ().toString ()), true);
}
",117,134
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestDynaBeanSupport.java,"
private DynaClass createDynasaurClass () throws Exception {
    DynaClass dynaClass = new BasicDynaClass (""Dynasaur"", null, new DynaProperty [] {new DynaProperty (""Species"", String.class), new DynaProperty (""isRaptor"", Boolean.TYPE), new DynaProperty (""Period"", String.class),});
    return (dynaClass);
}
",136,147
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public CustomerBean () {
}
",60,62
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public String getID () {
    return id;
}
",64,67
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public String getNickName () {
    return nickName;
}
",69,72
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public String getName () {
    return name;
}
",75,78
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public String [] getEmails () {
    return emails;
}
",80,83
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public int [] getNumbers () {
    return numbers;
}
",85,88
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public AddressBean getAddress () {
    return address;
}
",90,93
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public Map getProjectMap () {
    return projectMap;
}
",95,98
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public Iterator getProjectNames () {
    if (projectMap == null) {
        return null;
    }
    return projectMap.keySet ().iterator ();
}
",100,107
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public Enumeration getProjectURLs () {
    if (projectMap == null) {
        return null;
    }
    return new IteratorEnumeration (projectMap.values ().iterator ());
}
",109,116
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public List getLocations () {
    return locations;
}
",118,121
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public String getLocation (int index) {
    return (String) locations.get (index);
}
",124,127
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public void setID (String id) {
    this.id = id;
}
",129,132
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public void setName (String name) {
    this.name = name;
}
",134,137
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public void setNickName (String nickName) {
    this.nickName = nickName;
}
",139,142
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public void setEmails (String [] emails) {
    this.emails = emails;
}
",144,147
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public void addEmail (String email) {
    int newLength = (emails == null) ? 1 : emails.length + 1;
    String [] newArray = new String [newLength];
    for (int i = 0; i < newLength - 1; i ++) {
        newArray [i] = emails [i];
    }
    newArray [newLength - 1] = email;
    emails = newArray;
}
",149,159
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public void setNumbers (int [] numbers) {
    this.numbers = numbers;
}
",161,164
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public void addNumber (int number) {
    if (log.isDebugEnabled ()) {
        log.debug (""Adding number: "" + number);
    }
    int newLength = (numbers == null) ? 1 : numbers.length + 1;
    int [] newArray = new int [newLength];
    for (int i = 0; i < newLength - 1; i ++) {
        newArray [i] = numbers [i];
    }
    newArray [newLength - 1] = number;
    numbers = newArray;
}
",166,181
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public void setAddress (AddressBean address) {
    this.address = address;
    if (log.isDebugEnabled ()) {
        log.debug (""Setting the address to be: "" + address);
    }
}
",183,191
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public void setProjectMap (Map projectMap) {
    this.projectMap = projectMap;
}
",193,196
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public void addLocation (String location) {
    locations.add (location);
}
",198,201
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public void setLocation (int index, String location) {
    if (index == locations.size ()) {
        locations.add (location);
    }
    else {
        locations.set (index, location);
    }
}
",204,214
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public String toString () {
    return ""["" + this.getClass ().getName () + "": ID="" + id + "", name="" + name + "", address="" + address + ""]"";
}
",216,220
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public boolean equals (Object obj) {
    if (obj == null) return false;
    return this.hashCode () == obj.hashCode ();
}
",222,226
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public int hashCode () {
    return toString ().hashCode ();
}
",228,231
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public Date getDate () {
    return date;
}
",236,239
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public Time getTime () {
    return time;
}
",245,248
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public Timestamp getTimestamp () {
    return timestamp;
}
",254,257
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public void setDate (Date date) {
    this.date = date;
}
",263,266
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public void setTime (Time time) {
    this.time = time;
}
",272,275
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public void setTimestamp (Timestamp timestamp) {
    this.timestamp = timestamp;
}
",281,284
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public BigDecimal getBigDecimal () {
    return bigDecimal;
}
",290,293
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public BigInteger getBigInteger () {
    return bigInteger;
}
",299,302
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public void setBigDecimal (BigDecimal bigDecimal) {
    this.bigDecimal = bigDecimal;
}
",308,311
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public void setBigInteger (BigInteger bigInteger) {
    this.bigInteger = bigInteger;
}
",317,320
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public IteratorEnumeration () {
    super ();
}
",340,343
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public IteratorEnumeration (Iterator iterator) {
    super ();
    this.iterator = iterator;
}
",351,355
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public boolean hasMoreElements () {
    return iterator.hasNext ();
}
",365,368
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public Object nextElement () {
    return iterator.next ();
}
",377,380
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public Iterator getIterator () {
    return iterator;
}
",390,393
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/CustomerBean.java,"
public void setIterator (Iterator iterator) {
    this.iterator = iterator;
}
",400,403
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/EventBean.java,"
public EventBean () {
}
",35,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/EventBean.java,"
public EventBean (String type, String description, Timestamp start, Timestamp end) {
    this.type = type;
    this.description = description;
    this.start = start;
    this.end = end;
}
",37,43
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/EventBean.java,"
public String getDescription () {
    return description;
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/EventBean.java,"
public Timestamp getEnd () {
    return end;
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/EventBean.java,"
public Timestamp getStart () {
    return start;
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/EventBean.java,"
public String getType () {
    return type;
}
",61,64
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/EventBean.java,"
public void setDescription (String string) {
    description = string;
}
",66,69
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/EventBean.java,"
public void setEnd (Timestamp timestamp) {
    end = timestamp;
}
",71,74
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/EventBean.java,"
public void setStart (Timestamp timestamp) {
    start = timestamp;
}
",76,79
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/EventBean.java,"
public void setType (String string) {
    type = string;
}
",81,84
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AddressBookWithMapArrayAdder.java,"
public Map getAddresses () {
    return Collections.unmodifiableMap (addressesByPerson);
}
",32,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/AddressBookWithMapArrayAdder.java,"
public void addAddress (PersonBean person, AddressBean [] addresses) {
    addressesByPerson.put (person, addresses);
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestXMLUtils.java,"
public static void main (String [] args) {
    TestRunner.run (suite ());
}
",32,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestXMLUtils.java,"
public static Test suite () {
    return new TestSuite (TestXMLUtils.class);
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestXMLUtils.java,"
public TestXMLUtils (String testName) {
    super (testName);
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestXMLUtils.java,"
public void testXMLNameTest () {
    assertEquals (""Testing name 'Name<'"", false, XMLUtils.isWellFormedXMLName (""Name<""));
    assertEquals (""Testing name 'Name>'"", false, XMLUtils.isWellFormedXMLName (""Name>""));
    assertEquals (""Testing name 'Name''"", false, XMLUtils.isWellFormedXMLName (""Name'""));
    assertEquals (""Testing name 'Name_:-.'"", true, XMLUtils.isWellFormedXMLName (""Name_:-.""));
    assertEquals (""Testing name '.Name'"", false, XMLUtils.isWellFormedXMLName ("".Name""));
    assertEquals (""Testing name '-Name'"", false, XMLUtils.isWellFormedXMLName (""-Name""));
    assertEquals (""Testing name ':Name'"", true, XMLUtils.isWellFormedXMLName ("":Name""));
    assertEquals (""Testing name '_Name'"", true, XMLUtils.isWellFormedXMLName (""_Name""));
    assertEquals (""Testing name 'A0123456789Name"", true, XMLUtils.isWellFormedXMLName (""A0123456789Name""));
}
",50,62
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestXMLUtils.java,"
public void testAttributeEscaping () {
    assertEquals (""Escaping: <"", ""&lt;"", XMLUtils.escapeAttributeValue (""<""));
    assertEquals (""Escaping: >"", ""&gt;"", XMLUtils.escapeAttributeValue ("">""));
    assertEquals (""Escaping: '"", ""&apos;"", XMLUtils.escapeAttributeValue (""'""));
    assertEquals (""Escaping: \"""", ""&quot;"", XMLUtils.escapeAttributeValue (""\""""));
    assertEquals (""Escaping: &"", ""&amp;"", XMLUtils.escapeAttributeValue (""&""));
    assertEquals (""Escaping: 1<"", ""1&lt;"", XMLUtils.escapeAttributeValue (""1<""));
    assertEquals (""Escaping: 1>"", ""1&gt;"", XMLUtils.escapeAttributeValue (""1>""));
    assertEquals (""Escaping: 1'"", ""1&apos;"", XMLUtils.escapeAttributeValue (""1'""));
    assertEquals (""Escaping: 1\"""", ""1&quot;"", XMLUtils.escapeAttributeValue (""1\""""));
    assertEquals (""Escaping: 1&"", ""1&amp;"", XMLUtils.escapeAttributeValue (""1&""));
    assertEquals (""Escaping: <2"", ""&lt;2"", XMLUtils.escapeAttributeValue (""<2""));
    assertEquals (""Escaping: >2"", ""&gt;2"", XMLUtils.escapeAttributeValue ("">2""));
    assertEquals (""Escaping: '2"", ""&apos;2"", XMLUtils.escapeAttributeValue (""'2""));
    assertEquals (""Escaping: \""2"", ""&quot;2"", XMLUtils.escapeAttributeValue (""\""2""));
    assertEquals (""Escaping: &2"", ""&amp;2"", XMLUtils.escapeAttributeValue (""&2""));
    assertEquals (""Escaping: a<b"", ""a&lt;b"", XMLUtils.escapeAttributeValue (""a<b""));
    assertEquals (""Escaping: a>b"", ""a&gt;b"", XMLUtils.escapeAttributeValue (""a>b""));
    assertEquals (""Escaping: a'b"", ""a&apos;b"", XMLUtils.escapeAttributeValue (""a'b""));
    assertEquals (""Escaping: a\""b"", ""a&quot;b"", XMLUtils.escapeAttributeValue (""a\""b""));
    assertEquals (""Escaping: a&b"", ""a&amp;b"", XMLUtils.escapeAttributeValue (""a&b""));
    assertEquals (""Escaping: <<abba"", ""&lt;&lt;abba"", XMLUtils.escapeAttributeValue (""<<abba""));
    assertEquals (""Escaping: >>abba"", ""&gt;&gt;abba"", XMLUtils.escapeAttributeValue ("">>abba""));
    assertEquals (""Escaping: ''abba"", ""&apos;&apos;abba"", XMLUtils.escapeAttributeValue (""''abba""));
    assertEquals (""Escaping: \""\""abba"", ""&quot;&quot;abba"", XMLUtils.escapeAttributeValue (""\""\""abba""));
    assertEquals (""Escaping: &&abba"", ""&amp;&amp;abba"", XMLUtils.escapeAttributeValue (""&&abba""));
    assertEquals (""Escaping: a<>b''c\""e>f'&g"", ""a&lt;&gt;b&apos;&apos;c&quot;e&gt;f&apos;&amp;g"", XMLUtils.escapeAttributeValue (""a<>b''c\""e>f'&g""));
}
",65,97
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestXMLUtils.java,"
public void testCDATAEscaping () {
    assertEquals (""Escaping: <"", ""<"", XMLUtils.escapeCDATAContent (""<""));
    assertEquals (""Escaping: >"", "">"", XMLUtils.escapeCDATAContent ("">""));
    assertEquals (""Escaping: '"", ""'"", XMLUtils.escapeCDATAContent (""'""));
    assertEquals (""Escaping: \"""", ""\"""", XMLUtils.escapeCDATAContent (""\""""));
    assertEquals (""Escaping: &"", ""&"", XMLUtils.escapeCDATAContent (""&""));
    assertEquals (""Escaping: ]]"", ""]]"", XMLUtils.escapeCDATAContent (""]]""));
    assertEquals (""Escaping: ]>"", ""]>"", XMLUtils.escapeCDATAContent (""]>""));
    assertEquals (""Escaping: ]]>"", ""]]&gt;"", XMLUtils.escapeCDATAContent (""]]>""));
    assertEquals (""Escaping: ]]>]]>"", ""]]&gt;]]&gt;"", XMLUtils.escapeCDATAContent (""]]>]]>""));
    assertEquals (""Escaping: ]>]]>"", ""]>]]&gt;"", XMLUtils.escapeCDATAContent (""]>]]>""));
    assertEquals (""Escaping: ]]>]]]>"", ""]]&gt;]]]&gt;"", XMLUtils.escapeCDATAContent (""]]>]]]>""));
    assertEquals (""Escaping: "", """", XMLUtils.escapeCDATAContent (""""));
}
",105,119
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/SimpleClass.java,"
public String getTestPropertyOne () {
    return this.testPropertyOne;
}
",26,29
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/SimpleClass.java,"
public void setTestPropertyOne (String testPropertyOne) {
    this.testPropertyOne = testPropertyOne;
}
",31,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/SimpleClass.java,"
public Integer getTestPropertyTwo () {
    return this.testPropertyTwo;
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/SimpleClass.java,"
public void setTestPropertyTwo (Integer testPropertyTwo) {
    this.testPropertyTwo = testPropertyTwo;
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/LibraryBean.java,"
public BookBean [] getBooks () {
    return books;
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/LibraryBean.java,"
public void addBook (BookBean book) {
    List bookList = new ArrayList (Arrays.asList (books));
    bookList.add (book);
    books = (BookBean []) bookList.toArray (EMPTY);
}
",40,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestTextMapping.java,"
public String getValue () {
    return value;
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestTextMapping.java,"
public void setValue (String value) {
    this.value = value;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestTextMapping.java,"
public TestTextMapping (String testName) {
    super (testName);
}
",64,67
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestTextMapping.java,"
public void testRoundTripWithSingleMappingFile () throws IOException, SAXException, IntrospectionException {
    Element element = new Element ();
    element.setValue (""Some text"");
    StringWriter outputWriter = new StringWriter ();
    outputWriter.write (""<?xml version=\""1.0\"" ?>\n"");
    BeanWriter beanWriter = new BeanWriter (outputWriter);
    beanWriter.setEndOfLine (""\n"");
    beanWriter.enablePrettyPrint ();
    beanWriter.setWriteEmptyElements (true);
    beanWriter.getBindingConfiguration ().setMapIDs (false);
    beanWriter.getXMLIntrospector ().register (new InputSource (new StringReader (MAPPING)));
    beanWriter.setEndOfLine (""\n"");
    beanWriter.write (element);
    String output = outputWriter.toString ();
    assertEquals (EXPECTED, output);
    BeanReader beanReader = new BeanReader ();
    beanReader.registerMultiMapping (new InputSource (new StringReader (MAPPING)));
    StringReader xmlReader = new StringReader (output);
    element = (Element) beanReader.parse (xmlReader);
    assertEquals (""Some text"", element.getValue ());
}
",69,102
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestXMLBeanInfoDigester.java,"
public static void main (String [] args) {
    TestRunner.run (suite ());
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestXMLBeanInfoDigester.java,"
public static Test suite () {
    return new TestSuite (TestXMLBeanInfoDigester.class);
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestXMLBeanInfoDigester.java,"
public TestXMLBeanInfoDigester (String testName) {
    super (testName);
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/TestXMLBeanInfoDigester.java,"
public void testDigester () throws Exception {
    XMLBeanInfoDigester digester = new XMLBeanInfoDigester ();
    digester.setXMLIntrospector (new XMLIntrospector ());
    InputStream in = new FileInputStream (getTestFile (""src/test/org/apache/commons/digester/rss/Channel.betwixt""));
    assertTrue (""Found betwixt config file"", in != null);
    XMLBeanInfo info = (XMLBeanInfo) digester.parse (in);
    assertTrue (""Found XMLBeanInfo"", info != null);
    ElementDescriptor descriptor = info.getElementDescriptor ();
    assertTrue (""Found root element descriptor"", descriptor != null);
    assertEquals (""Element name correct"", ""rss"", descriptor.getLocalName ());
    ElementDescriptor [] elements = descriptor.getElementDescriptors ();
    assertTrue (""Found elements"", elements != null && elements.length > 0);
    descriptor = elements [0];
    assertEquals (""Element name correct"", ""channel"", descriptor.getLocalName ());
}
",52,80
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/SampleBeanWriter.java,"
public SampleBeanWriter (String testName) {
    super (testName);
}
",31,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/SampleBeanWriter.java,"
public static void main (String [] args) throws Exception {
    SampleBeanWriter sample = new SampleBeanWriter (""foo"");
    sample.run (args);
}
",36,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/SampleBeanWriter.java,"
public void run (String [] args) throws Exception {
    Object bean = null;
    if (args.length > 0) {
        bean = Class.forName (args [0]).newInstance ();
    }
    else {
        bean = createBean ();
    }
    write (bean);
}
",42,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/SampleBeanWriter.java,"
public void write (Object bean) throws Exception {
    BeanWriter writer = new BeanWriter ();
    writer.enablePrettyPrint ();
    writer.write (bean);
}
",56,61
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/TestRecursion.java,"
public TestRecursion (String testName) {
    super (testName);
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/TestRecursion.java,"
public static Test suite () {
    return new TestSuite (TestRecursion.class);
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/TestRecursion.java,"
public void testReadwithCollectionsInElementRoundTrip () throws Exception {
    XMLIntrospector intro = createXMLIntrospector ();
    intro.getConfiguration ().setWrapCollectionsInElement (true);
    BeanReader reader = new BeanReader ();
    reader.setXMLIntrospector (intro);
    reader.registerBeanClass (ElementBean.class);
    ElementBean bean = (ElementBean) reader.parse (getTestFileURL (""src/test/org/apache/commons/betwixt/recursion/recursion.xml""));
    List elements = bean.getElements ();
    assertEquals (""Root elements size"", 2, elements.size ());
    Element elementOne = (Element) elements.get (0);
    assertEquals (""Element one name"", ""element1"", elementOne.getName ());
    Element elementTwo = (Element) elements.get (1);
    assertEquals (""Element two name"", ""element2"", elementTwo.getName ());
    assertEquals (""Element two children"", 0, elementTwo.getElements ().size ());
    elements = elementOne.getElements ();
    assertEquals (""Element one children"", 2, elements.size ());
    Element elementOneOne = (Element) elements.get (0);
    assertEquals (""Element one one name"", ""element11"", elementOneOne.getName ());
    Element elementOneTwo = (Element) elements.get (1);
    assertEquals (""Element one two name"", ""element12"", elementOneTwo.getName ());
    assertEquals (""Element one two children"", 0, elementOneTwo.getElements ().size ());
    elements = elementOneOne.getElements ();
    assertEquals (""Element one one children"", 2, elements.size ());
    Element elementOneOneOne = (Element) elements.get (0);
    assertEquals (""Element one one one name"", ""element111"", elementOneOneOne.getName ());
    Element elementOneOneTwo = (Element) elements.get (1);
    assertEquals (""Element one one two name"", ""element112"", elementOneOneTwo.getName ());
    StringWriter buffer = new StringWriter ();
    write (bean, buffer, true);
    String xml = ""<?xml version='1.0'?><ElementBean><elements><element name='element1'>"" + ""<elements><element name='element11'><elements><element name='element111'>"" + ""<elements/></element><element name='element112'><elements/></element>"" + ""</elements></element><element name='element12'><elements/></element>"" + ""</elements></element><element name='element2'><elements/>"" + ""</element></elements></ElementBean>"";
    xmlAssertIsomorphic (parseString (xml), parseString (buffer.getBuffer ().toString ()), true);
}
",57,122
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/TestRecursion.java,"
public void testReadWithoutCollectionsInElementRoundTrip () throws Exception {
    XMLIntrospector intro = createXMLIntrospector ();
    intro.getConfiguration ().setWrapCollectionsInElement (false);
    BeanReader reader = new BeanReader ();
    reader.setXMLIntrospector (intro);
    reader.registerBeanClass (ElementBean.class);
    ElementBean bean = (ElementBean) reader.parse (getTestFileURL (""src/test/org/apache/commons/betwixt/recursion/recursion2.xml""));
    List elements = bean.getElements ();
    assertEquals (""Number of elements in root bean"", 2, elements.size ());
    Element elementOne = (Element) bean.elements.get (0);
    assertEquals (""First element name"", ""element1"", elementOne.getName ());
    Element elementTwo = (Element) bean.elements.get (1);
    assertEquals (""Second element name"", ""element2"", elementTwo.getName ());
    elements = elementOne.getElements ();
    assertEquals (""Number of child elements in first element"", 2, elements.size ());
    Element elementOneOne = (Element) elements.get (0);
    assertEquals (""11 element name"", ""element11"", elementOneOne.getName ());
    Element elementOneTwo = (Element) elements.get (1);
    assertEquals (""12 element name"", ""element12"", elementOneTwo.getName ());
    elements = elementOneOne.getElements ();
    assertEquals (""Number of child elements in element 11"", 2, elements.size ());
    Element elementOneOneOne = (Element) elements.get (0);
    assertEquals (""111 element name"", ""element111"", elementOneOneOne.getName ());
    assertEquals (""111 child elements "", 0, elementOneOneOne.getElements ().size ());
    Element elementOneOneTwo = (Element) elements.get (1);
    assertEquals (""112 element name"", ""element112"", elementOneOneTwo.getName ());
    assertEquals (""112 child elements "", 0, elementOneOneTwo.getElements ().size ());
    elements = elementOneTwo.getElements ();
    assertEquals (""Number of child elements in element 12"", 0, elements.size ());
    elements = elementTwo.getElements ();
    assertEquals (""Number of child elements in element 2"", 0, elements.size ());
    StringWriter buffer = new StringWriter ();
    buffer.write (""<?xml version='1.0'?>"");
    write (bean, buffer, false);
    String xml = ""<ElementBean><element name='element1'><element name='element11'><element name='element111' />"" + ""<element name='element112' /> </element><element name='element12' /> </element>"" + ""<element name='element2' /> </ElementBean>"";
    xmlAssertIsomorphic (parseString (xml), parseString (buffer.getBuffer ().toString ()), true);
}
",127,204
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/TestRecursion.java,"
private void write (Object bean, Writer out, boolean wrapIt) throws Exception {
    BeanWriter writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.setXMLIntrospector (createXMLIntrospector ());
    writer.getXMLIntrospector ().getConfiguration ().setWrapCollectionsInElement (wrapIt);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.setIndent (""  "");
    writer.setEndOfLine (""\n"");
    writer.write (bean);
}
",209,225
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/TestRecursion.java,"
protected XMLIntrospector createXMLIntrospector () {
    XMLIntrospector introspector = new XMLIntrospector ();
    introspector.getConfiguration ().setAttributesForPrimitives (true);
    introspector.getConfiguration ().setWrapCollectionsInElement (false);
    return introspector;
}
",230,239
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/TestRecursion.java,"
public void testBeanWithIdProperty () throws Exception {
    IdBean bean = new IdBean (""Hello, World"");
    bean.setNotId (""Not ID"");
    StringWriter out = new StringWriter ();
    out.write (""<?xml version='1.0'?>"");
    BeanWriter writer = new BeanWriter (out);
    writer.setWriteEmptyElements (true);
    writer.getXMLIntrospector ().getConfiguration ().setAttributesForPrimitives (true);
    writer.getBindingConfiguration ().setMapIDs (true);
    writer.write (bean);
    String xml = ""<?xml version='1.0'?><IdBean notId='Not ID' id='Hello, World'/>"";
    xmlAssertIsomorphic (parseString (xml), parseString (out.getBuffer ().toString ()), true);
}
",243,260
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/TestRecursion.java,"
public void testCyclicReferenceStack1 () throws Exception {
    Element alpha = new Element (""Alpha"");
    Element beta = new Element (""Beta"");
    Element gamma = new Element (""Gamma"");
    Element epsilon = new Element (""Epsilon"");
    alpha.addElement (beta);
    beta.addElement (gamma);
    gamma.addElement (epsilon);
    alpha.addElement (epsilon);
    StringWriter stringWriter = new StringWriter ();
    BeanWriter writer = new BeanWriter (stringWriter);
    writer.setWriteEmptyElements (true);
    writer.getBindingConfiguration ().setMapIDs (false);
    writer.write (alpha);
    String xml = ""<?xml version='1.0'?><Element><name>Alpha</name><elements><element>"" + ""<name>Beta</name><elements><element><name>Gamma</name><elements>"" + ""<element><name>Epsilon</name><elements/></element></elements>"" + ""</element></elements></element><element><name>Epsilon</name>"" + ""<elements/></element></elements></Element>"";
    xmlAssertIsomorphic (parseString (xml), parseString (stringWriter.getBuffer ().toString ()), true);
}
",265,291
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/TestRecursion.java,"
public void testCyclicReferenceStack2 () throws Exception {
    Element alpha = new Element (""Alpha"");
    Element beta = new Element (""Beta"");
    Element gamma = new Element (""Gamma"");
    Element epsilon = new Element (""Epsilon"");
    alpha.addElement (beta);
    beta.addElement (gamma);
    gamma.addElement (epsilon);
    epsilon.addElement (beta);
    StringWriter stringWriter = new StringWriter ();
    BeanWriter writer = new BeanWriter (stringWriter);
    writer.setWriteEmptyElements (true);
    writer.getBindingConfiguration ().setMapIDs (false);
    try {
        writer.write (alpha);
        fail (""Cycle was not detected!"");
    } catch (CyclicReferenceException e) {
    }
}
",296,332
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/TestRecursion.java,"
public void testRegisterOverflow () throws Exception {
    BeanReader reader = new BeanReader ();
    try {
        reader.registerBeanClass (NorthWind.class);
    } catch (StackOverflowError e) {
        e.printStackTrace ();
        fail (""Expected registration to succeed"");
    }
}
",335,347
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/TestRecursion.java,"
public void testRegisterOverflow2 () throws Exception {
    BeanReader beanReader = new BeanReader ();
    try {
        beanReader.registerBeanClass (PersonTest.class);
    } catch (StackOverflowError e) {
        e.printStackTrace ();
        fail (""Expected registration to succeed"");
    }
}
",349,361
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/TestRecursion.java,"
public void testCycleReferences () throws Exception {
    PersonTest person = new PersonTest ();
    person.setName (""John Doe"");
    AddressTest address = new AddressTest ();
    address.setStreetAddress (""1221 Washington Street"");
    person.setAddress (address);
    ReferenceTest reference = new ReferenceTest ();
    reference.setPerson (person);
    address.setReference (reference);
    StringWriter outputWriter = new StringWriter ();
    outputWriter.write (""<?xml version='1.0' ?>\n"");
    BeanWriter beanWriter = new BeanWriter (outputWriter);
    beanWriter.setEndOfLine (""\n"");
    beanWriter.enablePrettyPrint ();
    beanWriter.getBindingConfiguration ().setMapIDs (true);
    beanWriter.write (person);
    BeanReader beanReader = new BeanReader ();
    beanReader.getBindingConfiguration ().setMapIDs (true);
    beanReader.registerBeanClass (PersonTest.class);
    beanReader.registerBeanClass (AddressTest.class);
    beanReader.registerBeanClass (ReferenceTest.class);
    String out = outputWriter.toString ();
    StringReader xmlReader = new StringReader (out);
    PersonTest result = (PersonTest) beanReader.parse (xmlReader);
    assertSame (""Cycle did not result in the same reference"", result, result.getAddress ().getReference ().getPerson ());
}
",363,399
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/ReferenceTest.java,"
public PersonTest getPerson () {
    return person;
}
",24,27
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/ReferenceTest.java,"
public void setPerson (PersonTest person) {
    this.person = person;
}
",28,31
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/NameBean.java,"
public NameBean () {
}
",27,27
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/NameBean.java,"
public NameBean (String moniker) {
    setMoniker (moniker);
}
",29,32
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/NameBean.java,"
public String getMoniker () {
    return moniker;
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/NameBean.java,"
public void setMoniker (String moniker) {
    this.moniker = moniker;
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/AlienBean.java,"
public AlienBean () {
}
",26,26
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/AlienBean.java,"
public AlienBean (NameBean name) {
    setName (name);
}
",28,31
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/AlienBean.java,"
public NameBean getName () {
    return name;
}
",33,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/AlienBean.java,"
public void setName (NameBean name) {
    this.name = name;
}
",38,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/NorthWind.java,"
public NorthWind () {
}
",30,30
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/NorthWind.java,"
public EastWind getNextWindClockwise () {
    return east;
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/NorthWind.java,"
public void setNextWindClockwise (EastWind east) {
    this.east = east;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/TestSharedIDGeneration.java,"
public TestSharedIDGeneration (String testName) {
    super (testName);
}
",32,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/TestSharedIDGeneration.java,"
public void testSharedChild () throws Exception {
    NameBean name = new NameBean (""Me"");
    HybridBean hybrid = new HybridBean (new AlienBean (name), new PersonBean (name));
    StringWriter out = new StringWriter ();
    BeanWriter writer = new BeanWriter (out);
    writer.write (hybrid);
    boolean isAlienBeforePerson = false;
    PropertyDescriptor [] propertyDescriptors = Introspector.getBeanInfo (HybridBean.class).getPropertyDescriptors ();
    for (int i = 0; i < propertyDescriptors.length; i ++) {
        String methodName = propertyDescriptors [i].getName ();
        if (""alien"".equals (methodName)) {
            isAlienBeforePerson = true;
            break;
        }
        else if (""person"".equals (methodName)) {
            isAlienBeforePerson = false;
            break;
        }
    }
    String expected = ""<?xml version='1.0'?><HybridBean id='1'>"" + ""<person id='2'><name id='3'><moniker>Me</moniker></name></person>"" + ""<alien id='4'><name idref='3'/></alien>"" + ""</HybridBean>"";
    if (isAlienBeforePerson) {
        expected = ""<?xml version='1.0'?><HybridBean id='1'>"" + ""<alien id='2'><name id='3'><moniker>Me</moniker></name></alien>"" + ""<person id='4'><name idref='3'/></person>"" + ""</HybridBean>"";
    }
    xmlAssertIsomorphic (parseString (expected), parseString (out), true);
}
",37,79
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/Element.java,"
public Element () {
    elements = new ArrayList ();
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/Element.java,"
public Element (String name) {
    this ();
    setName (name);
}
",42,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/Element.java,"
public void addElement (Element element) {
    elements.add (element);
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/Element.java,"
public List getElements () {
    return elements;
}
",53,56
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/Element.java,"
public void setName (String name) {
    this.name = name;
}
",58,61
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/Element.java,"
public String getName () {
    return this.name;
}
",63,66
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/Element.java,"
public String toString () {
    StringBuffer buffer = new StringBuffer (getName () + ""==>list: "");
    Iterator it = getElements ().iterator ();
    boolean first = true;
    while (it.hasNext ()) {
        Element element = (Element) it.next ();
        if (first) {
            first = false;
        }
        else {
            buffer.append ("","");
        }
        buffer.append (element.getName ());
    }
    return buffer.toString ();
}
",68,87
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/AddressTest.java,"
public String getStreetAddress () {
    return streetAddress;
}
",26,29
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/AddressTest.java,"
public void setStreetAddress (String streetAddress) {
    this.streetAddress = streetAddress;
}
",30,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/AddressTest.java,"
public ReferenceTest getReference () {
    return reference;
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/AddressTest.java,"
public void setReference (ReferenceTest reference) {
    this.reference = reference;
}
",38,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/SouthWind.java,"
public SouthWind () {
}
",30,30
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/SouthWind.java,"
public WestWind getNextWindClockwise () {
    return west;
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/SouthWind.java,"
public void setNextWindClockwise (WestWind west) {
    this.west = west;
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/PersonBean.java,"
public PersonBean () {
}
",27,27
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/PersonBean.java,"
public PersonBean (NameBean name) {
    setName (name);
}
",29,32
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/PersonBean.java,"
public NameBean getName () {
    return name;
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/PersonBean.java,"
public void setName (NameBean name) {
    this.name = name;
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/WestWind.java,"
public WestWind () {
}
",30,30
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/WestWind.java,"
public NorthWind getNextWindClockwise () {
    return north;
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/WestWind.java,"
public void setNextWindClockwise (NorthWind north) {
    this.north = north;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/HybridBean.java,"
public HybridBean (AlienBean alienBean, PersonBean personBean) {
    setAlien (alienBean);
    setPerson (personBean);
}
",27,31
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/HybridBean.java,"
public HybridBean () {
}
",33,33
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/HybridBean.java,"
public AlienBean getAlien () {
    return alienBean;
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/HybridBean.java,"
public void setAlien (AlienBean alienBean) {
    this.alienBean = alienBean;
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/HybridBean.java,"
public PersonBean getPerson () {
    return personBean;
}
",46,49
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/HybridBean.java,"
public void setPerson (PersonBean personBean) {
    this.personBean = personBean;
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/ElementBean.java,"
public ElementBean () {
    elements = new ArrayList ();
}
",32,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/ElementBean.java,"
public void addElement (Element element) {
    elements.add (element);
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/ElementBean.java,"
public List getElements () {
    return elements;
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/ElementBean.java,"
public String toString () {
    return ""list : "" + getElements ();
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/PersonTest.java,"
public String getName () {
    return name;
}
",25,28
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/PersonTest.java,"
public void setName (String name) {
    this.name = name;
}
",29,32
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/PersonTest.java,"
public AddressTest getAddress () {
    return address;
}
",33,36
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/PersonTest.java,"
public void setAddress (AddressTest address) {
    this.address = address;
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/EastWind.java,"
public EastWind () {
}
",30,30
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/EastWind.java,"
public SouthWind getNextWindClockwise () {
    return south;
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/EastWind.java,"
public void setNextWindClockwise (SouthWind south) {
    this.south = south;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/IdBean.java,"
public IdBean (String id) {
    setId (id);
}
",32,35
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/IdBean.java,"
public String getId () {
    return id;
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/IdBean.java,"
public void setId (String id) {
    this.id = id;
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/IdBean.java,"
public String getNotId () {
    return notId;
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/recursion/IdBean.java,"
public void setNotId (String notId) {
    this.notId = notId;
}
",52,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/TestVersioning.java,"
public TestVersioning (String testName) {
    super (testName);
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/TestVersioning.java,"
private void configure (BindingConfiguration configuration) {
    configuration.setMapIDs (false);
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/TestVersioning.java,"
public void testIntrospection () throws Exception {
    log.info (""testIntrospection() started"");
    XMLIntrospector introspector = new XMLIntrospector ();
    XMLBeanInfo beanInfo = introspector.introspect (VersioningTestData.class);
    ElementDescriptor [] elementDescriptors = beanInfo.getElementDescriptor ().getElementDescriptors ();
    assertEquals (""Need 2 element descriptors"", 2, elementDescriptors.length);
    ElementDescriptor element1Descriptor = beanInfo.getElementDescriptor ().getElementDescriptor (""element1"");
    log.info (""element1Descriptor: "" + element1Descriptor);
    debugOptions (element1Descriptor.getOptions ());
    assertNotNull (element1Descriptor);
    assertEquals (""1"", element1Descriptor.getOptions ().getValue (""version-from""));
    assertNull (element1Descriptor.getOptions ().getValue (""version-until""));
    ElementDescriptor element2Descriptor = beanInfo.getElementDescriptor ().getElementDescriptor (""element2"");
    log.info (""element2Descriptor: "" + element2Descriptor);
    debugOptions (element2Descriptor.getOptions ());
    assertNotNull (element2Descriptor);
    assertEquals (""2"", element2Descriptor.getOptions ().getValue (""version-from""));
    assertNull (element2Descriptor.getOptions ().getValue (""version-until""));
    AttributeDescriptor [] attributeDescriptors = beanInfo.getElementDescriptor ().getAttributeDescriptors ();
    assertEquals (""Need 2 attribute descriptors"", 2, attributeDescriptors.length);
    AttributeDescriptor attribute1Descriptor = beanInfo.getElementDescriptor ().getAttributeDescriptor (""attribute1"");
    log.info (""attribute1Descriptor: "" + attribute1Descriptor);
    debugOptions (attribute1Descriptor.getOptions ());
    assertNotNull (attribute1Descriptor);
    assertEquals (""2"", attribute1Descriptor.getOptions ().getValue (""version-from""));
    assertNull (attribute1Descriptor.getOptions ().getValue (""version-until""));
    AttributeDescriptor attribute2Descriptor = beanInfo.getElementDescriptor ().getAttributeDescriptor (""attribute2"");
    log.info (""attribute2Descriptor: "" + attribute2Descriptor);
    debugOptions (attribute2Descriptor.getOptions ());
    assertNotNull (attribute2Descriptor);
    assertEquals (""1"", attribute2Descriptor.getOptions ().getValue (""version-from""));
    assertEquals (""2"", attribute2Descriptor.getOptions ().getValue (""version-until""));
    log.info (""testIntrospection() complete"");
}
",47,104
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/TestVersioning.java,"
public void testWrite1 () throws Exception {
    log.info (""testWrite1() started"");
    final VersioningTestData data = new VersioningTestData ();
    data.setAttribute1 (""attributevalue1"");
    data.setAttribute2 (""attributevalue2"");
    data.setElement1 (""elementvalue1"");
    data.setElement2 (""elementvalue2"");
    StringWriter out = new StringWriter ();
    BeanWriter writer = new BeanWriter (out);
    configure (writer.getBindingConfiguration ());
    writer.write (data);
    final String written = out.toString ();
    log.info (""Written:\n"" + written);
    final String expected = ""<VersioningTestData attribute1=\""attributevalue1\"" attribute2=\""attributevalue2\""><element1>elementvalue1</element1><element2>elementvalue2</element2></VersioningTestData>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (written), true);
    log.info (""testWrite1() complete"");
}
",112,135
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/TestVersioning.java,"
public void testWrite2 () throws Exception {
    log.info (""testWrite2() started"");
    final VersioningTestData data = new VersioningTestData ();
    data.setAttribute1 (""attributevalue1"");
    data.setAttribute2 (""attributevalue2"");
    data.setElement1 (""elementvalue1"");
    data.setElement2 (""elementvalue2"");
    StringWriter out = new StringWriter ();
    BeanWriter writer = new BeanWriter (out);
    final VersioningStrategy versioningStrategy = new VersioningStrategy (""1"");
    writer.getXMLIntrospector ().getConfiguration ().setAttributeSuppressionStrategy (versioningStrategy);
    writer.getXMLIntrospector ().getConfiguration ().setElementSuppressionStrategy (versioningStrategy);
    configure (writer.getBindingConfiguration ());
    writer.write (data);
    final String written = out.toString ();
    log.info (""Written:\n"" + written);
    final String expected = ""<VersioningTestData attribute2=\""attributevalue2\""><element1>elementvalue1</element1></VersioningTestData>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (written), true);
    log.info (""testWrite1() complete"");
}
",149,180
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/TestVersioning.java,"
private final void debugOptions (final Options options) {
    final String [] names = options.getNames ();
    log.info (""Names:"");
    for (int ii = 0; ii < names.length; ii ++) {
        final String name = names [ii];
        log.info (""  Name "" + ii + "": "" + name + ""="" + options.getValue (name));
    }
}
",182,195
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/TestVersioning.java,"
public void testWrite3 () throws Exception {
    log.info (""testWrite2() started"");
    final VersioningTestData data = new VersioningTestData ();
    data.setAttribute1 (""attributevalue1"");
    data.setAttribute2 (""attributevalue2"");
    data.setElement1 (""elementvalue1"");
    data.setElement2 (""elementvalue2"");
    StringWriter out = new StringWriter ();
    BeanWriter writer = new BeanWriter (out);
    final VersioningStrategy versioningStrategy = new VersioningStrategy (""2"");
    writer.getXMLIntrospector ().getConfiguration ().setAttributeSuppressionStrategy (versioningStrategy);
    writer.getXMLIntrospector ().getConfiguration ().setElementSuppressionStrategy (versioningStrategy);
    configure (writer.getBindingConfiguration ());
    writer.write (data);
    final String written = out.toString ();
    log.info (""Written:\n"" + written);
    final String expected = ""<VersioningTestData attribute1=\""attributevalue1\"" attribute2=\""attributevalue2\""><element1>elementvalue1</element1><element2>elementvalue2</element2></VersioningTestData>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (written), true);
    log.info (""testWrite1() complete"");
}
",210,241
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/TestVersioning.java,"
public void testWrite4 () throws Exception {
    log.info (""testWrite2() started"");
    final VersioningTestData data = new VersioningTestData ();
    data.setAttribute1 (""attributevalue1"");
    data.setAttribute2 (""attributevalue2"");
    data.setElement1 (""elementvalue1"");
    data.setElement2 (""elementvalue2"");
    StringWriter out = new StringWriter ();
    BeanWriter writer = new BeanWriter (out);
    final VersioningStrategy versioningStrategy = new VersioningStrategy (""3"");
    writer.getXMLIntrospector ().getConfiguration ().setAttributeSuppressionStrategy (versioningStrategy);
    writer.getXMLIntrospector ().getConfiguration ().setElementSuppressionStrategy (versioningStrategy);
    configure (writer.getBindingConfiguration ());
    writer.write (data);
    final String written = out.toString ();
    log.info (""Written:\n"" + written);
    final String expected = ""<VersioningTestData attribute1=\""attributevalue1\""><element1>elementvalue1</element1><element2>elementvalue2</element2></VersioningTestData>"";
    xmlAssertIsomorphicContent (parseString (expected), parseString (written), true);
    log.info (""testWrite1() complete"");
}
",256,287
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/VersioningStrategy.java,"
public String getVersion () {
    return version;
}
",38,41
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/VersioningStrategy.java,"
public void setVersion (String version) {
    this.version = version;
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/VersioningStrategy.java,"
public boolean suppress (ElementDescriptor descr) {
    log.info (""Checking element "" + descr.getLocalName () + "" ("" + descr + "")"");
    if (false == checkVersionFrom (descr.getOptions ())) {
        log.info (""Suppressing element (invalid version/from)"");
        return true;
    }
    if (false == checkVersionUntil (descr.getOptions ())) {
        log.info (""Suppressing element (invalid version/until)"");
        return true;
    }
    log.info (""Showing element"");
    return false;
}
",48,66
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/VersioningStrategy.java,"
public boolean suppress (final AttributeDescriptor descr) {
    log.info (""Checking attribute "" + descr.getLocalName () + "" ("" + descr + "")"");
    if (false == checkVersionFrom (descr.getOptions ())) {
        log.info (""Suppressing attribute (invalid version/from)"");
        return true;
    }
    if (false == checkVersionUntil (descr.getOptions ())) {
        log.info (""Suppressing attribute (invalid version/until)"");
        return true;
    }
    log.info (""Showing attribute"");
    return false;
}
",68,86
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/VersioningStrategy.java,"
private boolean checkVersionFrom (final Options options) {
    log.info (""Checking version/from"");
    if (options == null) {
        log.info (""No options"");
        return true;
    }
    final String value = options.getValue (VERSION_FROM);
    log.info (""value="" + value);
    log.info (""version="" + version);
    debugOptions (options);
    if (value == null || value.trim ().length () == 0) {
        log.info (""No attribute \""Version from\"""");
        return true;
    }
    final boolean versionOk = value.compareTo (version) <= 0;
    log.info (""versionOk="" + versionOk);
    return versionOk;
}
",88,114
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/VersioningStrategy.java,"
private boolean checkVersionUntil (final Options options) {
    log.info (""Checking version/until"");
    if (options == null) {
        log.info (""No options"");
        return true;
    }
    final String value = options.getValue (VERSION_UNTIL);
    log.info (""value="" + value);
    log.info (""version="" + version);
    debugOptions (options);
    if (value == null || value.trim ().length () == 0) {
        log.info (""No attribute \""Version until\"""");
        return true;
    }
    final boolean versionOk = value.compareTo (version) >= 0;
    log.info (""versionOk="" + versionOk);
    return versionOk;
}
",116,142
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/VersioningStrategy.java,"
public VersioningStrategy () {
    super ();
}
",144,147
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/VersioningStrategy.java,"
public VersioningStrategy (final String version) {
    super ();
    setVersion (version);
}
",149,153
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/VersioningStrategy.java,"
private final void debugOptions (final Options options) {
    final String [] names = options.getNames ();
    log.info (""Names:"");
    for (int ii = 0; ii < names.length; ii ++) {
        final String name = names [ii];
        log.info (""  "" + ii + "": "" + name + ""="" + options.getValue (name));
    }
}
",155,167
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/VersioningTestData.java,"
public String getAttribute1 () {
    return attribute1;
}
",26,29
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/VersioningTestData.java,"
public void setAttribute1 (String attribute1) {
    this.attribute1 = attribute1;
}
",31,34
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/VersioningTestData.java,"
public String getAttribute2 () {
    return attribute2;
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/VersioningTestData.java,"
public void setAttribute2 (String attribute2) {
    this.attribute2 = attribute2;
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/VersioningTestData.java,"
public String getElement1 () {
    return element1;
}
",52,55
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/VersioningTestData.java,"
public void setElement1 (String element1) {
    this.element1 = element1;
}
",57,60
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/VersioningTestData.java,"
public String getElement2 () {
    return element2;
}
",65,68
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/betwixt/versioning/VersioningTestData.java,"
public void setElement2 (String element2) {
    this.element2 = element2;
}
",70,73
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/RSSDigester.java,"
public String getChannelClass () {
    return (this.channelClass);
}
",85,88
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/RSSDigester.java,"
public void setChannelClass (String channelClass) {
    this.channelClass = channelClass;
}
",90,93
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/RSSDigester.java,"
public String getImageClass () {
    return (this.imageClass);
}
",102,105
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/RSSDigester.java,"
public void setImageClass (String imageClass) {
    this.imageClass = imageClass;
}
",107,110
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/RSSDigester.java,"
public String getItemClass () {
    return (this.itemClass);
}
",119,122
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/RSSDigester.java,"
public void setItemClass (String itemClass) {
    this.itemClass = itemClass;
}
",124,127
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/RSSDigester.java,"
public String getTextInputClass () {
    return (this.textInputClass);
}
",137,140
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/RSSDigester.java,"
public void setTextInputClass (String textInputClass) {
    this.textInputClass = textInputClass;
}
",142,145
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/RSSDigester.java,"
public Object parse (File file) throws IOException, SAXException {
    configure ();
    return (super.parse (file));
}
",160,166
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/RSSDigester.java,"
public Object parse (InputSource input) throws IOException, SAXException {
    configure ();
    return (super.parse (input));
}
",179,185
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/RSSDigester.java,"
public Object parse (InputStream input) throws IOException, SAXException {
    configure ();
    return (super.parse (input));
}
",198,204
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/RSSDigester.java,"
public Object parse (String uri) throws IOException, SAXException {
    configure ();
    return (super.parse (uri));
}
",217,223
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/RSSDigester.java,"
protected void configure () {
    if (configured) {
        return;
    }
    for (int i = 0; i < registrations.length; i += 2) {
        URL url = this.getClass ().getResource (registrations [i + 1]);
        if (url != null) {
            register (registrations [i], url.toString ());
        }
    }
    addObjectCreate (""rss/channel"", channelClass);
    addCallMethod (""rss/channel/copyright"", ""setCopyright"", 0);
    addCallMethod (""rss/channel/description"", ""setDescription"", 0);
    addCallMethod (""rss/channel/docs"", ""setDocs"", 0);
    addCallMethod (""rss/channel/language"", ""setLanguage"", 0);
    addCallMethod (""rss/channel/lastBuildDate"", ""setLastBuildDate"", 0);
    addCallMethod (""rss/channel/link"", ""setLink"", 0);
    addCallMethod (""rss/channel/managingEditor"", ""setManagingEditor"", 0);
    addCallMethod (""rss/channel/pubDate"", ""setPubDate"", 0);
    addCallMethod (""rss/channel/rating"", ""setRating"", 0);
    addCallMethod (""rss/channel/skipDays/day"", ""addSkipDay"", 0);
    addCallMethod (""rss/channel/skipHours/hour"", ""addSkipHour"", 0);
    addCallMethod (""rss/channel/title"", ""setTitle"", 0);
    addCallMethod (""rss/channel/webMaster"", ""setWebMaster"", 0);
    addObjectCreate (""rss/channel/image"", imageClass);
    addSetNext (""rss/channel/image"", ""setImage"", ""org.apache.commons.digester.rss.Image"");
    addCallMethod (""rss/channel/image/description"", ""setDescription"", 0);
    addCallMethod (""rss/channel/image/height"", ""setHeight"", 0, new Class [] {Integer.TYPE});
    addCallMethod (""rss/channel/image/link"", ""setLink"", 0);
    addCallMethod (""rss/channel/image/title"", ""setTitle"", 0);
    addCallMethod (""rss/channel/image/url"", ""setURL"", 0);
    addCallMethod (""rss/channel/image/width"", ""setWidth"", 0, new Class [] {Integer.TYPE});
    addObjectCreate (""rss/channel/item"", itemClass);
    addSetNext (""rss/channel/item"", ""addItem"", ""org.apache.commons.digester.rss.Item"");
    addCallMethod (""rss/channel/item/description"", ""setDescription"", 0);
    addCallMethod (""rss/channel/item/link"", ""setLink"", 0);
    addCallMethod (""rss/channel/item/title"", ""setTitle"", 0);
    addObjectCreate (""rss/channel/textinput"", textInputClass);
    addSetNext (""rss/channel/textinput"", ""setTextInput"", ""org.apache.commons.digester.rss.TextInput"");
    addCallMethod (""rss/channel/textinput/description"", ""setDescription"", 0);
    addCallMethod (""rss/channel/textinput/link"", ""setLink"", 0);
    addCallMethod (""rss/channel/textinput/name"", ""setName"", 0);
    addCallMethod (""rss/channel/textinput/title"", ""setTitle"", 0);
    configured = true;
}
",236,306
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/RSSDigester.java,"
public static void main (String args []) {
    try {
        System.out.println (""RSSDigester Test Program"");
        System.out.println (""Opening input stream ..."");
        InputStream is = RSSDigester.class.getResourceAsStream (""/org/apache/commons/digester/rss/rss-example.xml"");
        System.out.println (""Creating new digester ..."");
        RSSDigester digester = new RSSDigester ();
        if ((args.length > 0) && (args [0].equals (""-debug""))) {
            digester.setLogger (LogFactory.getLog (""RSSDigester""));
        }
        System.out.println (""Parsing input stream ..."");
        Channel channel = (Channel) digester.parse (is);
        System.out.println (""Closing input stream ..."");
        is.close ();
        System.out.println (""Dumping channel info ..."");
        channel.render (System.out);
    } catch (Exception e) {
        System.out.println (""-->Exception"");
        e.printStackTrace (System.out);
    }
}
",318,346
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public String getCopyright () {
    return (this.copyright);
}
",68,71
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void setCopyright (String copyright) {
    this.copyright = copyright;
}
",73,76
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public String getDescription () {
    return (this.description);
}
",84,87
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void setDescription (String description) {
    this.description = description;
}
",89,92
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public String getDocs () {
    return (this.docs);
}
",100,103
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void setDocs (String docs) {
    this.docs = docs;
}
",105,108
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public Image getImage () {
    return (this.image);
}
",116,119
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void setImage (Image image) {
    this.image = image;
}
",121,124
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public String getLanguage () {
    return (this.language);
}
",132,135
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void setLanguage (String language) {
    this.language = language;
}
",137,140
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public String getLastBuildDate () {
    return (this.lastBuildDate);
}
",148,151
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void setLastBuildDate (String lastBuildDate) {
    this.lastBuildDate = lastBuildDate;
}
",153,156
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public String getLink () {
    return (this.link);
}
",164,167
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void setLink (String link) {
    this.link = link;
}
",169,172
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public String getManagingEditor () {
    return (this.managingEditor);
}
",180,183
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void setManagingEditor (String managingEditor) {
    this.managingEditor = managingEditor;
}
",185,188
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public String getPubDate () {
    return (this.pubDate);
}
",196,199
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void setPubDate (String pubDate) {
    this.pubDate = pubDate;
}
",201,204
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public String getRating () {
    return (this.rating);
}
",212,215
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void setRating (String rating) {
    this.rating = rating;
}
",217,220
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public TextInput getTextInput () {
    return (this.textInput);
}
",228,231
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void setTextInput (TextInput textInput) {
    this.textInput = textInput;
}
",233,236
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public String getTitle () {
    return (this.title);
}
",244,247
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void setTitle (String title) {
    this.title = title;
}
",249,252
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public double getVersion () {
    return (this.version);
}
",260,263
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void setVersion (double version) {
    this.version = version;
}
",265,268
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public String getWebMaster () {
    return (this.webMaster);
}
",276,279
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void setWebMaster (String webMaster) {
    this.webMaster = webMaster;
}
",281,284
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void addItem (Item item) {
    synchronized (items) {
        items.add (item);
    }
}
",295,301
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void addSkipDay (String skipDay) {
    synchronized (skipDays) {
        skipDays.add (skipDay);
    }
}
",309,315
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void addSkipHour (String skipHour) {
    synchronized (skipHours) {
        skipHours.add (skipHour);
    }
}
",323,329
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public Item [] findItems () {
    synchronized (items) {
        Item items [] = new Item [this.items.size ()];
        return ((Item []) this.items.toArray (items));
    }
}
",335,342
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public Item [] getItems () {
    return findItems ();
}
",348,351
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public String [] findSkipDays () {
    synchronized (skipDays) {
        String skipDays [] = new String [this.skipDays.size ()];
        return ((String []) this.skipDays.toArray (skipDays));
    }
}
",357,364
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public String [] getSkipHours () {
    return findSkipHours ();
}
",370,373
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public String [] findSkipHours () {
    synchronized (skipHours) {
        String skipHours [] = new String [this.skipHours.size ()];
        return ((String []) this.skipHours.toArray (skipHours));
    }
}
",379,386
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public String [] getSkipDays () {
    return findSkipDays ();
}
",392,395
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void removeItem (Item item) {
    synchronized (items) {
        items.remove (item);
    }
}
",403,409
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void removeSkipDay (String skipDay) {
    synchronized (skipDays) {
        skipDays.remove (skipDay);
    }
}
",417,423
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void removeSkipHour (String skipHour) {
    synchronized (skipHours) {
        skipHours.remove (skipHour);
    }
}
",431,437
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void render (OutputStream stream) {
    try {
        render (stream, null);
    } catch (UnsupportedEncodingException e) {
    }
}
",447,459
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void render (OutputStream stream, String encoding) throws UnsupportedEncodingException {
    PrintWriter pw = null;
    if (encoding == null) {
        pw = new PrintWriter (stream);
    }
    else {
        pw = new PrintWriter (new OutputStreamWriter (stream, encoding));
    }
    render (pw, encoding);
    pw.flush ();
}
",473,489
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void render (Writer writer) {
    render (writer, null);
}
",498,503
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void render (Writer writer, String encoding) {
    PrintWriter pw = new PrintWriter (writer);
    render (pw, encoding);
    pw.flush ();
}
",514,521
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void render (PrintWriter writer) {
    render (writer, null);
}
",530,535
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Channel.java,"
public void render (PrintWriter writer, String encoding) {
    writer.print (""<?xml version=\""1.0\"""");
    if (encoding != null) {
        writer.print ("" encoding=\"""");
        writer.print (encoding);
        writer.print (""\"""");
    }
    writer.println (""?>"");
    writer.println ();
    writer.println (""<!DOCTYPE rss PUBLIC"");
    writer.println (""  \""-//Netscape Communications//DTD RSS 0.91//EN\"""");
    writer.println (""  \""http://my.netscape.com/publish/formats/rss-0.91.dtd\"">"");
    writer.println ();
    writer.println (""<rss version=\""0.91\"">"");
    writer.println ();
    writer.println (""  <channel>"");
    writer.println ();
    writer.print (""    <title>"");
    writer.print (title);
    writer.println (""</title>"");
    writer.print (""    <description>"");
    writer.print (description);
    writer.println (""</description>"");
    writer.print (""    <link>"");
    writer.print (link);
    writer.println (""</link>"");
    writer.print (""    <language>"");
    writer.print (language);
    writer.println (""</language>"");
    if (rating != null) {
        writer.print (""    <rating>"");
        writer.print (rating);
        writer.println (""</rating>"");
    }
    if (copyright != null) {
        writer.print (""    <copyright>"");
        writer.print (copyright);
        writer.print (""</copyright>"");
    }
    if (pubDate != null) {
        writer.print (""    <pubDate>"");
        writer.print (pubDate);
        writer.println (""</pubDate>"");
    }
    if (lastBuildDate != null) {
        writer.print (""    <lastBuildDate>"");
        writer.print (lastBuildDate);
        writer.println (""</lastBuildDate>"");
    }
    if (docs != null) {
        writer.print (""    <docs>"");
        writer.print (docs);
        writer.println (""</docs>"");
    }
    if (managingEditor != null) {
        writer.print (""    <managingEditor>"");
        writer.print (managingEditor);
        writer.println (""</managingEditor>"");
    }
    if (webMaster != null) {
        writer.print (""    <webMaster>"");
        writer.print (webMaster);
        writer.println (""</webMaster>"");
    }
    writer.println ();
    if (image != null) {
        image.render (writer);
        writer.println ();
    }
    if (textInput != null) {
        textInput.render (writer);
        writer.println ();
    }
    String skipDays [] = findSkipDays ();
    if (skipDays.length > 0) {
        writer.println (""    <skipDays>"");
        for (int i = 0; i < skipDays.length; i ++) {
            writer.print (""      <skipDay>"");
            writer.print (skipDays [i]);
            writer.println (""</skipDay>"");
        }
        writer.println (""    </skipDays>"");
    }
    String skipHours [] = findSkipHours ();
    if (skipHours.length > 0) {
        writer.println (""    <skipHours>"");
        for (int i = 0; i < skipHours.length; i ++) {
            writer.print (""      <skipHour>"");
            writer.print (skipHours [i]);
            writer.println (""</skipHour>"");
        }
        writer.println (""    </skipHours>"");
        writer.println ();
    }
    Item items [] = findItems ();
    for (int i = 0; i < items.length; i ++) {
        items [i].render (writer);
        writer.println ();
    }
    writer.println (""  </channel>"");
    writer.println ();
    writer.println (""</rss>"");
}
",546,689
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Item.java,"
public String getDescription () {
    return (this.description);
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Item.java,"
public void setDescription (String description) {
    this.description = description;
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Item.java,"
public String getLink () {
    return (this.link);
}
",59,62
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Item.java,"
public void setLink (String link) {
    this.link = link;
}
",64,67
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Item.java,"
public String getTitle () {
    return (this.title);
}
",75,78
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Item.java,"
public void setTitle (String title) {
    this.title = title;
}
",80,83
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Item.java,"
void render (PrintWriter writer) {
    writer.println (""    <item>"");
    writer.print (""      <title>"");
    writer.print (title);
    writer.println (""</title>"");
    writer.print (""      <link>"");
    writer.print (link);
    writer.println (""</link>"");
    if (description != null) {
        writer.print (""      <description>"");
        writer.print (description);
        writer.println (""</description>"");
    }
    writer.println (""    </item>"");
}
",95,117
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/TextInput.java,"
public String getDescription () {
    return (this.description);
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/TextInput.java,"
public void setDescription (String description) {
    this.description = description;
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/TextInput.java,"
public String getLink () {
    return (this.link);
}
",59,62
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/TextInput.java,"
public void setLink (String link) {
    this.link = link;
}
",64,67
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/TextInput.java,"
public String getName () {
    return (this.name);
}
",75,78
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/TextInput.java,"
public void setName (String name) {
    this.name = name;
}
",80,83
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/TextInput.java,"
public String getTitle () {
    return (this.title);
}
",91,94
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/TextInput.java,"
public void setTitle (String title) {
    this.title = title;
}
",96,99
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/TextInput.java,"
void render (PrintWriter writer) {
    writer.println (""    <textinput>"");
    writer.print (""      <title>"");
    writer.print (title);
    writer.println (""</title>"");
    writer.print (""      <description>"");
    writer.print (description);
    writer.println (""</description>"");
    writer.print (""      <name>"");
    writer.print (name);
    writer.println (""</name>"");
    writer.print (""      <link>"");
    writer.print (link);
    writer.println (""</link>"");
    writer.println (""    </textinput>"");
}
",111,134
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Image.java,"
public String getDescription () {
    return (this.description);
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Image.java,"
public void setDescription (String description) {
    this.description = description;
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Image.java,"
public int getHeight () {
    return (this.height);
}
",59,62
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Image.java,"
public void setHeight (int height) {
    this.height = height;
}
",64,67
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Image.java,"
public String getLink () {
    return (this.link);
}
",75,78
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Image.java,"
public void setLink (String link) {
    this.link = link;
}
",80,83
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Image.java,"
public String getTitle () {
    return (this.title);
}
",91,94
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Image.java,"
public void setTitle (String title) {
    this.title = title;
}
",96,99
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Image.java,"
public String getURL () {
    return (this.url);
}
",107,110
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Image.java,"
public void setURL (String url) {
    this.url = url;
}
",112,115
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Image.java,"
public int getWidth () {
    return (this.width);
}
",123,126
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Image.java,"
public void setWidth (int width) {
    this.width = width;
}
",128,131
systems/mutantbase/commons-betwixt-0.8-src/src/test/org/apache/commons/digester/rss/Image.java,"
void render (PrintWriter writer) {
    writer.println (""    <image>"");
    writer.print (""      <title>"");
    writer.print (title);
    writer.println (""</title>"");
    writer.print (""      <url>"");
    writer.print (url);
    writer.println (""</url>"");
    if (link != null) {
        writer.print (""      <link>"");
        writer.print (link);
        writer.println (""</link>"");
    }
    writer.print (""      <width>"");
    writer.print (width);
    writer.println (""</width>"");
    writer.print (""      <height>"");
    writer.print (height);
    writer.println (""</height>"");
    if (description != null) {
        writer.print (""      <description>"");
        writer.print (description);
        writer.println (""</description>"");
    }
    writer.println (""    </image>"");
}
",143,180
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/SAXBeanWriter.java,"
public SAXBeanWriter (ContentHandler contentHandler) {
    this.contentHandler = contentHandler;
}
",49,52
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/SAXBeanWriter.java,"
public boolean getCallDocumentEvents () {
    return callDocumentEvents;
}
",61,64
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/SAXBeanWriter.java,"
public void setCallDocumentEvents (boolean callDocumentEvents) {
    this.callDocumentEvents = callDocumentEvents;
}
",72,75
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/SAXBeanWriter.java,"
public Log getLog () {
    return log;
}
",82,85
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/SAXBeanWriter.java,"
public void setLog (Log log) {
    this.log = log;
}
",92,95
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/SAXBeanWriter.java,"
protected void startElement (WriteContext context, String uri, String localName, String qName, Attributes attributes) throws SAXException {
    contentHandler.startElement (uri, localName, qName, attributes);
}
",117,131
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/SAXBeanWriter.java,"
protected void endElement (WriteContext context, String uri, String localName, String qName) throws SAXException {
    contentHandler.endElement (uri, localName, qName);
}
",142,154
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/SAXBeanWriter.java,"
protected void bodyText (WriteContext context, String text) throws SAXException {
    char [] body = text.toCharArray ();
    contentHandler.characters (body, 0, body.length);
}
",162,170
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/SAXBeanWriter.java,"
public void start () throws SAXException {
    if (callDocumentEvents) {
        contentHandler.startDocument ();
    }
}
",178,184
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/SAXBeanWriter.java,"
public void end () throws SAXException {
    if (callDocumentEvents) {
        contentHandler.endDocument ();
    }
}
",192,198
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public static void setLog (Log aLog) {
    log = aLog;
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public BeanRuleSet (XMLIntrospector introspector, String basePath, ElementDescriptor baseElementDescriptor, Class baseBeanClass, boolean matchIDs) {
    this.basePath = basePath;
    this.baseElementDescriptor = baseElementDescriptor;
    BindingConfiguration bindingConfiguration = new BindingConfiguration ();
    bindingConfiguration.setMapIDs (matchIDs);
    context = new DigesterReadContext (log, bindingConfiguration, new ReadConfiguration ());
    context.setRootClass (baseBeanClass);
    context.setXMLIntrospector (introspector);
}
",76,94
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public BeanRuleSet (XMLIntrospector introspector, String basePath, ElementDescriptor baseElementDescriptor, Context context) {
    this.basePath = basePath;
    this.baseElementDescriptor = baseElementDescriptor;
    this.context = new DigesterReadContext (context, new ReadConfiguration ());
    this.context.setRootClass (baseElementDescriptor.getSingularPropertyType ());
    this.context.setXMLIntrospector (introspector);
}
",106,120
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public BeanRuleSet (XMLIntrospector introspector, String basePath, ElementDescriptor baseElementDescriptor, Class baseBeanClass, Context context) {
    this (introspector, basePath, baseElementDescriptor, baseBeanClass, new ReadContext (context, new ReadConfiguration ()));
}
",133,146
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public BeanRuleSet (XMLIntrospector introspector, String basePath, ElementDescriptor baseElementDescriptor, Class baseBeanClass, ReadContext baseContext) {
    this.basePath = basePath;
    this.baseElementDescriptor = baseElementDescriptor;
    this.context = new DigesterReadContext (baseContext);
    this.context.setRootClass (baseBeanClass);
    this.context.setXMLIntrospector (introspector);
}
",158,170
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public String getClassNameAttribute () {
    return context.getClassNameAttribute ();
}
",180,183
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public void setClassNameAttribute (String classNameAttribute) {
    context.setClassNameAttribute (classNameAttribute);
}
",195,198
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public String getNamespaceURI () {
    return null;
}
",209,212
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public void addRuleInstances (Digester digester) {
    if (log.isTraceEnabled ()) {
        log.trace (""Adding rules to:"" + digester);
    }
    context.setDigester (digester);
    if (context.getClassLoader () == null) {
        context.setClassLoader (digester.getClassLoader ());
    }
    digester.addRule (""!"" + basePath + ""/*"", new ActionMappingRule ());
}
",219,237
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public void begin (String namespace, String name, Attributes attributes) throws Exception {
    if (log.isTraceEnabled ()) {
        int attributesLength = attributes.getLength ();
        if (attributesLength > 0) {
            log.trace (""Attributes:"");
        }
        for (int i = 0, size = attributesLength; i < size; i ++) {
            log.trace (""Local:"" + attributes.getLocalName (i));
            log.trace (""URI:"" + attributes.getURI (i));
            log.trace (""QName:"" + attributes.getQName (i));
        }
    }
    context.pushElement (name);
    MappingAction nextAction = nextAction (namespace, name, attributes, context);
    context.pushMappingAction (nextAction);
}
",252,277
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
private MappingAction nextAction (String namespace, String name, Attributes attributes, ReadContext context) throws Exception {
    MappingAction result = null;
    MappingAction lastAction = context.currentMappingAction ();
    if (lastAction == null) {
        result = BeanBindAction.INSTANCE;
    }
    else {
        result = lastAction.next (namespace, name, attributes, context);
    }
    return result.begin (namespace, name, attributes, context);
}
",288,308
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public void body (String namespace, String name, String text) throws Exception {
    if (log.isTraceEnabled ()) log.trace (""[BRS] Body with text "" + text);
    if (digester.getCount () > 0) {
        MappingAction action = context.currentMappingAction ();
        action.body (text, context);
    }
    else {
        log.trace (""[BRS] ZERO COUNT"");
    }
}
",317,331
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public void end (String namespace, String name) throws Exception {
    MappingAction action = context.popMappingAction ();
    action.end (context);
}
",337,342
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public void finish () {
    context.clearBeans ();
}
",347,353
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public DigesterReadContext (Context context, ReadConfiguration readConfiguration) {
    super (context, readConfiguration);
}
",371,377
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public DigesterReadContext (BindingConfiguration bindingConfiguration, ReadConfiguration readConfiguration) {
    super (bindingConfiguration, readConfiguration);
}
",383,388
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public DigesterReadContext (Log log, BindingConfiguration bindingConfiguration, ReadConfiguration readConfiguration) {
    super (log, bindingConfiguration, readConfiguration);
}
",395,401
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public DigesterReadContext (ReadContext readContext) {
    super (readContext);
}
",408,411
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public Digester getDigester () {
    return digester;
}
",413,417
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public void setDigester (Digester digester) {
    this.digester = digester;
}
",419,423
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public void pushBean (Object bean) {
    super.pushBean (bean);
    digester.push (bean);
}
",428,432
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanRuleSet.java,"
public Object popBean () {
    Object bean = super.popBean ();
    if (digester.getCount () > 0) {
        digester.pop ();
    }
    return bean;
}
",437,446
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public void start () throws IOException, SAXException {
}
",109,111
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public void end () throws IOException, SAXException {
}
",121,123
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public void write (Object bean) throws IOException, SAXException, IntrospectionException {
    if (log.isDebugEnabled ()) {
        log.debug (""Writing bean graph..."");
        log.debug (bean);
    }
    start ();
    writeBean (null, null, null, bean, makeContext (bean));
    end ();
    if (log.isDebugEnabled ()) {
        log.debug (""Finished writing bean graph."");
    }
}
",140,157
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public void write (String qualifiedName, Object bean) throws IOException, SAXException, IntrospectionException {
    start ();
    writeBean ("""", qualifiedName, qualifiedName, bean, makeContext (bean));
    end ();
}
",174,185
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public void write (Object bean, InputSource source) throws IOException, SAXException, IntrospectionException {
    writeBean (null, null, null, bean, makeContext (bean), getXMLIntrospector ().introspect (bean.getClass (), source));
}
",204,214
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
private void writeBean (String namespaceUri, String localName, String qualifiedName, Object bean, Context context) throws IOException, SAXException, IntrospectionException {
    if (log.isTraceEnabled ()) {
        log.trace (""Writing bean graph (qualified name '"" + qualifiedName + ""'"");
    }
    XMLBeanInfo beanInfo = introspector.introspect (bean);
    writeBean (namespaceUri, localName, qualifiedName, bean, context, beanInfo);
    log.trace (""Finished writing bean graph."");
}
",236,258
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
private void writeBean (String namespaceUri, String localName, String qualifiedName, Object bean, ElementDescriptor parentDescriptor, Context context) throws IOException, SAXException, IntrospectionException {
    if (log.isTraceEnabled ()) {
        log.trace (""Writing bean graph (qualified name '"" + qualifiedName + ""'"");
    }
    XMLBeanInfo beanInfo = findXMLBeanInfo (bean, parentDescriptor);
    writeBean (namespaceUri, localName, qualifiedName, bean, context, beanInfo);
    log.trace (""Finished writing bean graph."");
}
",261,284
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
private XMLBeanInfo findXMLBeanInfo (Object bean, ElementDescriptor parentDescriptor) throws IntrospectionException {
    XMLBeanInfo beanInfo = null;
    Class introspectedBindType = parentDescriptor.getSingularPropertyType ();
    if (introspectedBindType == null) {
        introspectedBindType = parentDescriptor.getPropertyType ();
    }
    if (parentDescriptor.isUseBindTimeTypeForMapping () || introspectedBindType == null) {
        beanInfo = introspector.introspect (bean);
    }
    else {
        beanInfo = introspector.introspect (introspectedBindType);
    }
    return beanInfo;
}
",293,310
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
private void writeBean (String namespaceUri, String localName, String qualifiedName, Object bean, Context context, XMLBeanInfo beanInfo) throws IOException, SAXException, IntrospectionException {
    if (beanInfo != null) {
        ElementDescriptor elementDescriptor = beanInfo.getElementDescriptor ();
        if (elementDescriptor != null) {
            Options combinedOptions = new Options ();
            combinedOptions.addOptions (elementDescriptor.getOptions ());
            if (context.getOptions () != null) {
                combinedOptions.addOptions (context.getOptions ());
            }
            context = context.newContext (bean);
            context.pushOptions (combinedOptions);
            if (qualifiedName == null) {
                qualifiedName = elementDescriptor.getQualifiedName ();
            }
            if (namespaceUri == null) {
                namespaceUri = elementDescriptor.getURI ();
            }
            if (localName == null) {
                localName = elementDescriptor.getLocalName ();
            }
            String ref = null;
            String id = null;
            if (elementDescriptor.isSimple ()) {
                writeElement (namespaceUri, localName, qualifiedName, elementDescriptor, context);
            }
            else {
                pushBean (context.getBean ());
                if (getBindingConfiguration ().getMapIDs ()) {
                    ref = getBindingConfiguration ().getIdMappingStrategy ().getReferenceFor (context, context.getBean ());
                }
                if (ref == null) {
                    AttributeDescriptor idAttribute = beanInfo.getIDAttribute ();
                    if (idAttribute == null) {
                        id = idGenerator.nextId ();
                        getBindingConfiguration ().getIdMappingStrategy ().setReference (context, bean, id);
                        if (getBindingConfiguration ().getMapIDs ()) {
                            writeElement (namespaceUri, localName, qualifiedName, elementDescriptor, context, beanInfo.getIDAttributeName (), id);
                        }
                        else {
                            writeElement (namespaceUri, localName, qualifiedName, elementDescriptor, context);
                        }
                    }
                    else {
                        Expression idExpression = idAttribute.getTextExpression ();
                        if (idExpression == null) {
                            throw new IntrospectionException (""The specified id property wasn't found in the bean ("" + idAttribute + "")."");
                        }
                        Object exp = idExpression.evaluate (context);
                        if (exp == null) {
                            log.debug (""Using random id"");
                            id = idGenerator.nextId ();
                        }
                        else {
                            id = exp.toString ();
                        }
                        getBindingConfiguration ().getIdMappingStrategy ().setReference (context, bean, id);
                        writeElement (namespaceUri, localName, qualifiedName, elementDescriptor, context);
                    }
                }
                else {
                    if (! ignoreElement (elementDescriptor, namespaceUri, localName, qualifiedName, context)) {
                        writeIDREFElement (elementDescriptor, namespaceUri, localName, qualifiedName, beanInfo.getIDREFAttributeName (), ref);
                    }
                }
                popBean ();
            }
            context.popOptions ();
        }
    }
}
",331,489
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public IDGenerator getIdGenerator () {
    return idGenerator;
}
",497,500
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public void setIdGenerator (IDGenerator idGenerator) {
    this.idGenerator = idGenerator;
}
",509,512
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public BindingConfiguration getBindingConfiguration () {
    return bindingConfiguration;
}
",521,524
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public void setBindingConfiguration (BindingConfiguration bindingConfiguration) {
    this.bindingConfiguration = bindingConfiguration;
}
",531,534
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public boolean getWriteIDs () {
    return getBindingConfiguration ().getMapIDs ();
}
",545,548
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public void setWriteIDs (boolean writeIDs) {
    getBindingConfiguration ().setMapIDs (writeIDs);
}
",558,561
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public boolean getWriteEmptyElements () {
    return writeEmptyElements;
}
",574,577
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public void setWriteEmptyElements (boolean writeEmptyElements) {
    this.writeEmptyElements = writeEmptyElements;
}
",590,593
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public XMLIntrospector getXMLIntrospector () {
    return introspector;
}
",605,608
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public void setXMLIntrospector (XMLIntrospector introspector) {
    this.introspector = introspector;
}
",621,624
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public final Log getAbstractBeanWriterLog () {
    return log;
}
",631,634
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public final void setAbstractBeanWriterLog (Log log) {
    this.log = log;
}
",641,644
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void startElement (WriteContext context, String uri, String localName, String qName, Attributes attr) throws IOException, SAXException {
    startElement (uri, localName, qName, attr);
}
",661,673
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void endElement (WriteContext context, String uri, String localName, String qName) throws IOException, SAXException {
    endElement (uri, localName, qName);
}
",686,697
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void bodyText (WriteContext context, String text) throws IOException, SAXException {
    bodyText (text);
}
",708,713
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void startElement (String uri, String localName, String qName, Attributes attr) throws IOException, SAXException {
}
",730,737
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void endElement (String uri, String localName, String qName) throws IOException, SAXException {
}
",750,756
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void bodyText (String text) throws IOException, SAXException {
}
",767,767
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
private void writeElement (String namespaceUri, String localName, String qualifiedName, ElementDescriptor elementDescriptor, Context context) throws IOException, SAXException, IntrospectionException {
    if (log.isTraceEnabled ()) {
        log.trace (""Writing: "" + qualifiedName + "" element: "" + elementDescriptor);
    }
    if (! ignoreElement (elementDescriptor, namespaceUri, localName, qualifiedName, context)) {
        if (log.isTraceEnabled ()) {
            log.trace (""Element "" + elementDescriptor + "" is empty."");
        }
        Attributes attributes = addNamespaceDeclarations (new ElementAttributes (elementDescriptor, context), namespaceUri);
        writeContext.setCurrentDescriptor (elementDescriptor);
        startElement (writeContext, namespaceUri, localName, qualifiedName, attributes);
        writeElementContent (elementDescriptor, context);
        writeContext.setCurrentDescriptor (elementDescriptor);
        endElement (writeContext, namespaceUri, localName, qualifiedName);
    }
}
",784,821
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
private Attributes addNamespaceDeclarations (Attributes attributes, String elementNamespaceUri) {
    Attributes result = attributes;
    AttributesImpl withDeclarations = null;
    for (int i = - 1, size = attributes.getLength (); i < size; i ++) {
        String uri = null;
        if (i == - 1) {
            uri = elementNamespaceUri;
        }
        else {
            uri = attributes.getURI (i);
        }
        if (uri != null && ! """".equals (uri) && ! namespacesDeclared.contains (uri)) {
            if (withDeclarations == null) {
                withDeclarations = new AttributesImpl (attributes);
            }
            withDeclarations.addAttribute ("""", """", ""xmlns:"" + getXMLIntrospector ().getConfiguration ().getPrefixMapper ().getPrefix (uri), ""NOTATION"", uri);
            namespacesDeclared.add (uri);
        }
    }
    if (withDeclarations != null) {
        result = withDeclarations;
    }
    return result;
}
",829,861
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
private void writeElement (String namespaceUri, String localName, String qualifiedName, ElementDescriptor elementDescriptor, Context context, String idAttribute, String idValue) throws IOException, SAXException, IntrospectionException {
    if (! ignoreElement (elementDescriptor, namespaceUri, localName, qualifiedName, context)) {
        writeContext.setCurrentDescriptor (elementDescriptor);
        Attributes attributes = new IDElementAttributes (elementDescriptor, context, idAttribute, idValue);
        startElement (writeContext, namespaceUri, localName, qualifiedName, addNamespaceDeclarations (attributes, namespaceUri));
        writeElementContent (elementDescriptor, context);
        writeContext.setCurrentDescriptor (elementDescriptor);
        endElement (writeContext, namespaceUri, localName, qualifiedName);
    }
    else if (log.isTraceEnabled ()) {
        log.trace (""Element "" + qualifiedName + "" is empty."");
    }
}
",878,915
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
private void writeRestOfElement (String uri, String localName, String qualifiedName, ElementDescriptor elementDescriptor, Context context) throws IOException, SAXException, IntrospectionException {
    writeElementContent (elementDescriptor, context);
}
",930,943
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
private void writeIDREFElement (ElementDescriptor elementDescriptor, String uri, String localName, String qualifiedName, String idrefAttributeName, String idrefAttributeValue) throws IOException, SAXException, IntrospectionException {
    AttributesImpl attributes = new AttributesImpl ();
    attributes.addAttribute ("""", idrefAttributeName, idrefAttributeName, ""IDREF"", idrefAttributeValue);
    writeContext.setCurrentDescriptor (elementDescriptor);
    startElement (writeContext, uri, localName, qualifiedName, addNamespaceDeclarations (attributes, uri));
    endElement (writeContext, uri, localName, qualifiedName);
}
",957,984
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
private void writeElementContent (ElementDescriptor elementDescriptor, Context context) throws IOException, SAXException, IntrospectionException {
    writeContext.setCurrentDescriptor (elementDescriptor);
    Descriptor [] childDescriptors = elementDescriptor.getContentDescriptors ();
    if (childDescriptors != null && childDescriptors.length > 0) {
        for (int i = 0, size = childDescriptors.length; i < size; i ++) {
            if (childDescriptors [i] instanceof ElementDescriptor) {
                ElementDescriptor childDescriptor = (ElementDescriptor) childDescriptors [i];
                Context childContext = context;
                childContext.pushOptions (childDescriptor.getOptions ());
                Expression childExpression = childDescriptor.getContextExpression ();
                if (childExpression != null) {
                    Object childBean = childExpression.evaluate (context);
                    if (childBean != null) {
                        String qualifiedName = childDescriptor.getQualifiedName ();
                        String namespaceUri = childDescriptor.getURI ();
                        String localName = childDescriptor.getLocalName ();
                        if (childBean instanceof Iterator) {
                            for (Iterator iter = (Iterator) childBean; iter.hasNext ();) {
                                Object object = iter.next ();
                                if (object == null) {
                                    continue;
                                }
                                writeBean (namespaceUri, localName, qualifiedName, object, childDescriptor, context);
                            }
                        }
                        else {
                            writeBean (namespaceUri, localName, qualifiedName, childBean, childDescriptor, context);
                        }
                    }
                }
                else {
                    writeElement (childDescriptor.getURI (), childDescriptor.getLocalName (), childDescriptor.getQualifiedName (), childDescriptor, childContext);
                }
                childContext.popOptions ();
            }
            else {
                Expression expression = childDescriptors [i].getTextExpression ();
                if (expression != null) {
                    Object value = expression.evaluate (context);
                    String text = convertToString (value, childDescriptors [i], context);
                    if (text != null && text.length () > 0) {
                        bodyText (writeContext, text);
                    }
                }
            }
        }
    }
    else {
        Expression expression = elementDescriptor.getTextExpression ();
        if (expression != null) {
            Object value = expression.evaluate (context);
            String text = convertToString (value, elementDescriptor, context);
            if (text != null && text.length () > 0) {
                bodyText (writeContext, text);
            }
        }
    }
}
",996,1103
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void pushBean (Object bean) {
    if (! getBindingConfiguration ().getMapIDs ()) {
        Iterator it = beanStack.iterator ();
        while (it.hasNext ()) {
            Object next = it.next ();
            if (bean == next) {
                final String message = ""Cyclic reference at bean: "" + bean;
                log.error (message);
                StringBuffer buffer = new StringBuffer (message);
                buffer.append ("" Stack: "");
                Iterator errorStack = beanStack.iterator ();
                while (errorStack.hasNext ()) {
                    Object errorObj = errorStack.next ();
                    if (errorObj != null) {
                        buffer.append (errorObj.getClass ().getName ());
                        buffer.append ("": "");
                    }
                    buffer.append (errorObj);
                    buffer.append ("";"");
                }
                final String debugMessage = buffer.toString ();
                log.info (debugMessage);
                throw new CyclicReferenceException (debugMessage);
            }
        }
    }
    if (log.isTraceEnabled ()) {
        log.trace (""Pushing onto object stack: "" + bean);
    }
    beanStack.push (bean);
}
",1111,1151
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected Object popBean () {
    Object bean = beanStack.pop ();
    if (log.isTraceEnabled ()) {
        log.trace (""Popped from object stack: "" + bean);
    }
    return bean;
}
",1158,1166
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
private boolean ignoreElement (ElementDescriptor descriptor, String namespaceUri, String localName, String qualifiedName, Context context) throws IntrospectionException {
    if (getBindingConfiguration ().getValueSuppressionStrategy ().suppressElement (descriptor, namespaceUri, localName, qualifiedName, context.getBean ())) {
        return true;
    }
    if (! getWriteEmptyElements ()) {
        return isEmptyElement (descriptor, context);
    }
    return false;
}
",1176,1188
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
private boolean isEmptyElement (ElementDescriptor descriptor, Context context) throws IntrospectionException {
    if (log.isTraceEnabled ()) {
        log.trace (""Is "" + descriptor + "" empty?"");
    }
    if (descriptor.hasAttributes ()) {
        log.trace (""Element has attributes."");
        return false;
    }
    Expression expression = descriptor.getTextExpression ();
    if (expression != null) {
        Object value = expression.evaluate (context);
        String text = convertToString (value, descriptor, context);
        if (text != null && text.length () > 0) {
            log.trace (""Element has body text which isn't empty."");
            return false;
        }
    }
    if (descriptor.isCollective ()) {
        log.trace (""Loop type so not empty."");
        return false;
    }
    if (descriptor.hasChildren ()) {
        for (int i = 0, size = descriptor.getElementDescriptors ().length; i < size; i ++) {
            if (! isEmptyElement (descriptor.getElementDescriptors () [i], context)) {
                log.trace (""Element has child which isn't empty."");
                return false;
            }
        }
    }
    if (descriptor.isHollow ()) {
        Expression contentExpression = descriptor.getContextExpression ();
        if (contentExpression != null) {
            Object childBean = contentExpression.evaluate (context);
            if (childBean != null) {
                XMLBeanInfo xmlBeanInfo = findXMLBeanInfo (childBean, descriptor);
                Object currentBean = context.getBean ();
                context.setBean (childBean);
                boolean result = isEmptyElement (xmlBeanInfo.getElementDescriptor (), context);
                context.setBean (currentBean);
                return result;
            }
        }
    }
    log.trace (""Element is empty."");
    return true;
}
",1203,1273
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
ElementAttributes (ElementDescriptor descriptor, Context context) {
    this.context = context;
    init (descriptor.getAttributeDescriptors ());
}
",1298,1302
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
private void init (AttributeDescriptor [] baseAttributes) {
    attributes = new AttributeDescriptor [baseAttributes.length];
    values = new String [baseAttributes.length];
    int index = 0;
    for (int i = 0, size = baseAttributes.length; i < size; i ++) {
        AttributeDescriptor baseAttribute = baseAttributes [i];
        String attributeValue = valueAttribute (baseAttribute);
        if (attributeValue != null && ! context.getValueSuppressionStrategy ().suppressAttribute (baseAttribute, attributeValue)) {
            values [index] = attributeValue;
            attributes [index] = baseAttribute;
            index ++;
        }
    }
    length = index;
}
",1304,1323
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
private String valueAttribute (AttributeDescriptor attribute) {
    Expression expression = attribute.getTextExpression ();
    if (expression != null) {
        Object value = expression.evaluate (context);
        return convertToString (value, attribute, context);
    }
    return """";
}
",1325,1335
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public int getIndex (String qName) {
    for (int i = 0; i < attributes.length; i ++) {
        if (attributes [i].getQualifiedName () != null && attributes [i].getQualifiedName ().equals (qName)) {
            return i;
        }
    }
    return - 1;
}
",1343,1354
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public int getIndex (String uri, String localName) {
    for (int i = 0; i < attributes.length; i ++) {
        if (attributes [i].getURI () != null && attributes [i].getURI ().equals (uri) && attributes [i].getLocalName () != null && attributes [i].getURI ().equals (localName)) {
            return i;
        }
    }
    return - 1;
}
",1363,1378
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public int getLength () {
    return length;
}
",1385,1388
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public String getLocalName (int index) {
    if (indexInRange (index)) {
        return attributes [index].getLocalName ();
    }
    return null;
}
",1396,1404
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public String getQName (int index) {
    if (indexInRange (index)) {
        return attributes [index].getQualifiedName ();
    }
    return null;
}
",1412,1420
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public String getType (int index) {
    if (indexInRange (index)) {
        return ""CDATA"";
    }
    return null;
}
",1428,1435
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public String getType (String qName) {
    return getType (getIndex (qName));
}
",1443,1446
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public String getType (String uri, String localName) {
    return getType (getIndex (uri, localName));
}
",1455,1458
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public String getURI (int index) {
    if (indexInRange (index)) {
        return attributes [index].getURI ();
    }
    return null;
}
",1467,1474
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public String getValue (int index) {
    if (indexInRange (index)) {
        return values [index];
    }
    return null;
}
",1483,1490
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public String getValue (String qName) {
    return getValue (getIndex (qName));
}
",1500,1503
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public String getValue (String uri, String localName) {
    return getValue (getIndex (uri, localName));
}
",1514,1517
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
private boolean indexInRange (int index) {
    return (index >= 0 && index < getLength ());
}
",1525,1528
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
IDElementAttributes (ElementDescriptor descriptor, Context context, String idAttributeName, String idValue) {
    super (descriptor, context);
    this.idValue = idValue;
    this.idAttributeName = idAttributeName;
    AttributeDescriptor [] attributeDescriptors = descriptor.getAttributeDescriptors ();
    length = super.getLength ();
    for (int i = 0; i < length; i ++) {
        if (idAttributeName.equals (attributeDescriptors [i].getQualifiedName ())) {
            matchingAttribute = true;
            idIndex = i;
            break;
        }
    }
    if (! matchingAttribute) {
        length += 1;
        idIndex = length - 1;
    }
}
",1557,1584
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public int getIndex (String uri, String localName) {
    if (localName.equals (idAttributeName)) {
        return idIndex;
    }
    return super.getIndex (uri, localName);
}
",1586,1594
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public int getIndex (String qName) {
    if (qName.equals (idAttributeName)) {
        return idIndex;
    }
    return super.getIndex (qName);
}
",1596,1604
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public int getLength () {
    return length;
}
",1606,1609
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public String getLocalName (int index) {
    if (index == idIndex) {
        return idAttributeName;
    }
    return super.getLocalName (index);
}
",1611,1618
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public String getQName (int index) {
    if (index == idIndex) {
        return idAttributeName;
    }
    return super.getQName (index);
}
",1620,1627
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public String getType (int index) {
    if (index == idIndex) {
        return ""ID"";
    }
    return super.getType (index);
}
",1629,1636
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public String getType (String uri, String localName) {
    return getType (getIndex (uri, localName));
}
",1638,1641
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public String getType (String qName) {
    return getType (getIndex (qName));
}
",1643,1646
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public String getURI (int index) {
    if (index == idIndex) {
        return """";
    }
    return super.getURI (index);
}
",1648,1658
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public String getValue (int index) {
    if (index == idIndex) {
        return idValue;
    }
    return super.getValue (index);
}
",1660,1667
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public String getValue (String uri, String localName) {
    return getValue (getIndex (uri, localName));
}
",1669,1672
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public String getValue (String qName) {
    return getValue (getIndex (qName));
}
",1674,1677
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected int getIndentLevel () {
    return 0;
}
",1693,1696
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void expressElementStart (String qualifiedName) throws IOException, SAXException {
}
",1709,1713
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void expressElementStart (String uri, String localName, String qualifiedName) throws IOException, SAXException {
    expressElementStart (qualifiedName);
}
",1725,1729
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void expressTagClose () throws IOException, SAXException {
}
",1738,1738
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void expressElementEnd (String qualifiedName) throws IOException, SAXException {
}
",1749,1753
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void expressElementEnd (String uri, String localName, String qualifiedName) throws IOException, SAXException {
    expressElementEnd (qualifiedName);
}
",1766,1775
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void expressElementEnd () throws IOException, SAXException {
}
",1785,1785
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void expressBodyText (String text) throws IOException, SAXException {
}
",1796,1796
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void expressAttribute (String qualifiedName, String value) throws IOException, SAXException {
}
",1807,1815
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void expressAttribute (String namespaceUri, String localName, String qualifiedName, String value) throws IOException, SAXException {
    expressAttribute (qualifiedName, value);
}
",1828,1838
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void write (String qualifiedName, ElementDescriptor elementDescriptor, Context context) throws IOException, SAXException, IntrospectionException {
    writeElement ("""", qualifiedName, qualifiedName, elementDescriptor, context);
}
",1852,1862
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void write (String qualifiedName, ElementDescriptor elementDescriptor, Context context, String idAttribute, String idValue) throws IOException, SAXException, IntrospectionException {
    writeElement ("""", qualifiedName, qualifiedName, elementDescriptor, context, idAttribute, idValue);
}
",1877,1896
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void writeRestOfElement (String qualifiedName, ElementDescriptor elementDescriptor, Context context) throws IOException, SAXException, IntrospectionException {
    writeRestOfElement ("""", qualifiedName, qualifiedName, elementDescriptor, context);
}
",1909,1919
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void writeIDREFElement (String qualifiedName, String idrefAttributeName, String idrefAttributeValue) throws IOException, SAXException, IntrospectionException {
    AttributesImpl attributes = new AttributesImpl ();
    attributes.addAttribute ("""", idrefAttributeName, idrefAttributeName, ""IDREF"", idrefAttributeValue);
    startElement ("""", qualifiedName, qualifiedName, attributes);
    endElement ("""", qualifiedName, qualifiedName);
}
",1932,1951
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected boolean writeContent (ElementDescriptor elementDescriptor, Context context) throws IOException, SAXException, IntrospectionException {
    return false;
}
",1965,1974
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void writeAttributes (ElementDescriptor elementDescriptor, Context context) throws IOException, SAXException {
    if (! elementDescriptor.isWrapCollectionsInElement ()) {
        return;
    }
    AttributeDescriptor [] attributeDescriptors = elementDescriptor.getAttributeDescriptors ();
    if (attributeDescriptors != null) {
        for (int i = 0, size = attributeDescriptors.length; i < size; i ++) {
            AttributeDescriptor attributeDescriptor = attributeDescriptors [i];
            writeAttribute (attributeDescriptor, context);
        }
    }
}
",1986,2006
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void writeAttribute (AttributeDescriptor attributeDescriptor, Context context) throws IOException, SAXException {
    Expression expression = attributeDescriptor.getTextExpression ();
    if (expression != null) {
        Object value = expression.evaluate (context);
        if (value != null) {
            String text = value.toString ();
            if (text != null && text.length () > 0) {
                expressAttribute (attributeDescriptor.getURI (), attributeDescriptor.getLocalName (), attributeDescriptor.getQualifiedName (), text);
            }
        }
    }
}
",2018,2041
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void writePrintln () throws IOException {
}
",2049,2049
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
protected void writeIndent () throws IOException {
}
",2058,2058
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
private String convertToString (Object value, Descriptor descriptor, Context context) {
    return getBindingConfiguration ().getObjectStringConverter ().objectToString (value, descriptor.getPropertyType (), context);
}
",2068,2073
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
private Context makeContext (Object bean) {
    return new Context (bean, log, bindingConfiguration);
}
",2081,2084
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public ElementDescriptor getCurrentDescriptor () {
    return currentDescriptor;
}
",2098,2101
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/AbstractBeanWriter.java,"
public void setCurrentDescriptor (ElementDescriptor currentDescriptor) {
    this.currentDescriptor = currentDescriptor;
}
",2107,2110
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/CyclicReferenceException.java,"
public CyclicReferenceException () {
    super (DEFAULT_MESSAGE);
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/CyclicReferenceException.java,"
public CyclicReferenceException (String message) {
    super (message);
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/SimpleTypeBindAction.java,"
public void body (String text, ReadContext context) throws Exception {
    Updater updater = context.getCurrentUpdater ();
    if (updater != null) {
        updater.update (context, text);
    }
    else {
        if (context.getLog ().isDebugEnabled ()) {
            context.getLog ().debug (""No updater for simple type '"" + context.getCurrentElement () + ""'"");
        }
    }
}
",34,50
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/SimpleTypeBindAction.java,"
public MappingAction next (String namespace, String name, Attributes attributes, ReadContext context) throws Exception {
    return MappingAction.IGNORE;
}
",52,60
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ElementMapping.java,"
public ElementMapping () {
}
",43,43
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ElementMapping.java,"
public String getNamespace () {
    return namespace;
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ElementMapping.java,"
public void setNamespace (String namespace) {
    this.namespace = namespace;
}
",59,62
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ElementMapping.java,"
public String getName () {
    return name;
}
",68,71
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ElementMapping.java,"
public void setName (String name) {
    this.name = name;
}
",77,80
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ElementMapping.java,"
public Attributes getAttributes () {
    return attributes;
}
",86,89
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ElementMapping.java,"
public void setAttributes (Attributes attributes) {
    this.attributes = attributes;
}
",95,98
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ElementMapping.java,"
public Class getType () {
    return type;
}
",105,108
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ElementMapping.java,"
public void setType (Class type) {
    this.type = type;
}
",115,118
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ElementMapping.java,"
public ElementDescriptor getDescriptor () {
    return descriptor;
}
",124,127
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ElementMapping.java,"
public void setDescriptor (ElementDescriptor descriptor) {
    this.descriptor = descriptor;
}
",133,136
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ElementMapping.java,"
public String toString () {
    StringBuffer buffer = new StringBuffer ();
    buffer.append (""ElementMapping["");
    buffer.append (name);
    buffer.append ("" -> "");
    buffer.append (type);
    buffer.append (""]"");
    return buffer.toString ();
}
",142,151
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadConfiguration.java,"
public BeanCreationChain getBeanCreationChain () {
    return beanCreationChain;
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadConfiguration.java,"
public void setBeanCreationChain (BeanCreationChain beanCreationChain) {
    this.beanCreationChain = beanCreationChain;
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadConfiguration.java,"
public ActionMappingStrategy getActionMappingStrategy () {
    return actionMappingStrategy;
}
",58,61
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadConfiguration.java,"
public void setActionMappingStrategy (ActionMappingStrategy actionMappingStrategy) {
    this.actionMappingStrategy = actionMappingStrategy;
}
",68,71
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/MappingAction.java,"
public MappingAction next (String namespace, String name, Attributes attributes, ReadContext context) throws Exception {
    return this;
}
",81,84
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/MappingAction.java,"
public MappingAction begin (String namespace, String name, Attributes attributes, ReadContext context) throws Exception {
    return this;
}
",86,89
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/MappingAction.java,"
public void body (String text, ReadContext context) throws Exception {
}
",91,94
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/MappingAction.java,"
public void end (ReadContext context) throws Exception {
}
",96,99
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/MappingAction.java,"
public MappingAction next (String namespace, String name, Attributes attributes, ReadContext context) throws Exception {
    return context.getActionMappingStrategy ().getMappingAction (namespace, name, attributes, context);
}
",112,121
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/MappingAction.java,"
public MappingAction begin (String namespace, String name, Attributes attributes, ReadContext context) throws Exception {
    ElementDescriptor descriptor = context.getCurrentDescriptor ();
    if (descriptor != null) {
        AttributeDescriptor [] attributeDescriptors = descriptor.getAttributeDescriptors ();
        context.populateAttributes (attributeDescriptors, attributes);
    }
    return this;
}
",126,145
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/MappingAction.java,"
public void body (String text, ReadContext context) throws Exception {
}
",150,153
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/MappingAction.java,"
public void end (ReadContext context) throws Exception {
    context.popElement ();
}
",158,165
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public ReadContext (Context context, ReadConfiguration readConfiguration) {
    super (context);
    this.readConfiguration = readConfiguration;
}
",81,85
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public ReadContext (BindingConfiguration bindingConfiguration, ReadConfiguration readConfiguration) {
    this (LogFactory.getLog (ReadContext.class), bindingConfiguration, readConfiguration);
}
",92,100
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public ReadContext (Log log, BindingConfiguration bindingConfiguration, ReadConfiguration readConfiguration) {
    super (null, log, bindingConfiguration);
    this.readConfiguration = readConfiguration;
}
",108,115
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public ReadContext (ReadContext readContext) {
    super (readContext);
    classLoader = readContext.classLoader;
    readConfiguration = readContext.readConfiguration;
}
",122,127
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public void putBean (String id, Object bean) {
    getIdMappingStrategy ().setReference (this, bean, id);
}
",135,138
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public Object getBean (String id) {
    return getIdMappingStrategy ().getReferenced (this, id);
}
",146,149
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public void clearBeans () {
    getIdMappingStrategy ().reset ();
}
",154,157
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public ClassLoader getClassLoader () {
    return classLoader;
}
",163,166
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public void setClassLoader (ClassLoader classLoader) {
    this.classLoader = classLoader;
}
",172,175
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public BeanCreationChain getBeanCreationChain () {
    return readConfiguration.getBeanCreationChain ();
}
",182,185
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public ActionMappingStrategy getActionMappingStrategy () {
    return readConfiguration.getActionMappingStrategy ();
}
",192,195
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public String popElement () {
    if (! descriptorStack.isEmpty ()) {
        descriptorStack.pop ();
    }
    if (! updaterStack.isEmpty ()) {
        updaterStack.pop ();
    }
    popOptions ();
    Object top = null;
    if (! elementMappingStack.isEmpty ()) {
        top = elementMappingStack.pop ();
        if (top != null) {
            if (! (top instanceof String)) {
                return popElement ();
            }
        }
    }
    return (String) top;
}
",205,235
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public String getCurrentElement () {
    String result = null;
    int stackSize = elementMappingStack.size ();
    int i = 0;
    while (i < stackSize) {
        Object mappedElement = elementMappingStack.peek (i);
        if (mappedElement instanceof String) {
            result = (String) mappedElement;
            break;
        }
        ++ i;
    }
    return result;
}
",242,258
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public Class getLastMappedClass () {
    Class lastMapped = null;
    for (int i = 0, size = elementMappingStack.size (); i < size; i ++) {
        Object entry = elementMappingStack.peek (i);
        if (entry instanceof Class) {
            lastMapped = (Class) entry;
            break;
        }
    }
    return lastMapped;
}
",266,281
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
private ElementDescriptor getParentDescriptor () throws IntrospectionException {
    ElementDescriptor result = null;
    if (descriptorStack.size () > 1) {
        result = (ElementDescriptor) descriptorStack.peek (1);
    }
    return result;
}
",283,291
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public void pushElement (String elementName) throws Exception {
    elementMappingStack.push (elementName);
    ElementDescriptor nextDescriptor = null;
    if (elementMappingStack.size () == 1 && rootClass != null) {
        markClassMap (rootClass);
        XMLBeanInfo rootClassInfo = getXMLIntrospector ().introspect (rootClass);
        nextDescriptor = rootClassInfo.getElementDescriptor ();
    }
    else {
        ElementDescriptor currentDescriptor = getCurrentDescriptor ();
        if (currentDescriptor != null) {
            nextDescriptor = currentDescriptor.getElementDescriptor (elementName);
        }
    }
    Updater updater = null;
    Options options = null;
    if (nextDescriptor != null) {
        updater = nextDescriptor.getUpdater ();
        options = nextDescriptor.getOptions ();
    }
    updaterStack.push (updater);
    descriptorStack.push (nextDescriptor);
    pushOptions (options);
}
",300,332
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public void markClassMap (Class mappedClazz) throws IntrospectionException {
    if (mappedClazz.isArray ()) {
        mappedClazz = mappedClazz.getComponentType ();
    }
    elementMappingStack.push (mappedClazz);
    XMLBeanInfo mappedClassInfo = getXMLIntrospector ().introspect (mappedClazz);
    ElementDescriptor mappedElementDescriptor = mappedClassInfo.getElementDescriptor ();
    descriptorStack.push (mappedElementDescriptor);
    Updater updater = mappedElementDescriptor.getUpdater ();
    updaterStack.push (updater);
}
",340,354
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public MappingAction popMappingAction () {
    return (MappingAction) actionMappingStack.pop ();
}
",360,363
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public void pushMappingAction (MappingAction mappingAction) {
    actionMappingStack.push (mappingAction);
}
",369,372
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public MappingAction currentMappingAction () {
    if (actionMappingStack.size () == 0) {
        return null;
    }
    return (MappingAction) actionMappingStack.peek ();
}
",378,385
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public Object getBean () {
    return objectStack.peek ();
}
",387,390
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public void setBean (Object bean) {
}
",392,397
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public Object popBean () {
    return objectStack.pop ();
}
",404,407
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public void pushBean (Object bean) {
    objectStack.push (bean);
}
",413,416
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public XMLIntrospector getXMLIntrospector () {
    if (xmlIntrospector == null) {
        xmlIntrospector = new XMLIntrospector ();
    }
    return xmlIntrospector;
}
",423,432
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public void setXMLIntrospector (XMLIntrospector xmlIntrospector) {
    this.xmlIntrospector = xmlIntrospector;
}
",439,442
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public Class getRootClass () {
    return rootClass;
}
",444,447
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public void setRootClass (Class rootClass) {
    this.rootClass = rootClass;
}
",449,452
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public ElementDescriptor getCurrentDescriptor () throws Exception {
    ElementDescriptor result = null;
    if (! descriptorStack.empty ()) {
        result = (ElementDescriptor) descriptorStack.peek ();
    }
    return result;
}
",461,469
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public void populateAttributes (AttributeDescriptor [] attributeDescriptors, Attributes attributes) {
    Log log = getLog ();
    if (attributeDescriptors != null) {
        for (int i = 0, size = attributeDescriptors.length; i < size; i ++) {
            AttributeDescriptor attributeDescriptor = attributeDescriptors [i];
            String value = attributes.getValue (attributeDescriptor.getURI (), attributeDescriptor.getLocalName ());
            if (value == null) {
                value = attributes.getValue (attributeDescriptor.getQualifiedName ());
            }
            if (log.isTraceEnabled ()) {
                log.trace (""Attr URL:"" + attributeDescriptor.getURI ());
                log.trace (""Attr LocalName:"" + attributeDescriptor.getLocalName ());
                log.trace (value);
            }
            Updater updater = attributeDescriptor.getUpdater ();
            log.trace (updater);
            if (updater != null && value != null) {
                updater.update (this, value);
            }
        }
    }
}
",477,524
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public void pushUpdater (Updater updater) {
    updaterStack.push (updater);
}
",541,544
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public Updater popUpdater () {
    return (Updater) updaterStack.pop ();
}
",555,558
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public Updater getCurrentUpdater () {
    Updater result = null;
    if (! updaterStack.empty ()) {
        result = (Updater) updaterStack.peek ();
        if (result == null && updaterStack.size () > 1) {
            result = (Updater) updaterStack.peek (1);
        }
    }
    return result;
}
",571,588
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
public Class resolvePolymorphicType (ElementMapping mapping) {
    Class result = null;
    Log log = getLog ();
    try {
        ElementDescriptor currentDescriptor = getCurrentDescriptor ();
        if (currentDescriptor != null) {
            if (currentDescriptor.isPolymorphic ()) {
                PolymorphicReferenceResolver resolver = getXMLIntrospector ().getPolymorphicReferenceResolver ();
                result = resolver.resolveType (mapping, this);
                if (result == null) {
                    ElementDescriptor parent = getParentDescriptor ();
                    if (parent != null) {
                        ElementDescriptor [] descriptors = parent.getElementDescriptors ();
                        ElementDescriptor originalDescriptor = mapping.getDescriptor ();
                        boolean resolved = false;
                        for (int i = 0; i < descriptors.length; i ++) {
                            ElementDescriptor descriptor = descriptors [i];
                            if (descriptor.isPolymorphic ()) {
                                mapping.setDescriptor (descriptor);
                                result = resolver.resolveType (mapping, this);
                                if (result != null) {
                                    resolved = true;
                                    descriptorStack.pop ();
                                    popOptions ();
                                    descriptorStack.push (descriptor);
                                    pushOptions (descriptor.getOptions ());
                                    Updater originalUpdater = originalDescriptor.getUpdater ();
                                    Updater newUpdater = descriptor.getUpdater ();
                                    substituteUpdater (originalUpdater, newUpdater);
                                    break;
                                }
                            }
                        }
                        if (resolved) {
                            log.debug (""Resolved polymorphic type"");
                        }
                        else {
                            log.debug (""Failed to resolve polymorphic type"");
                            mapping.setDescriptor (originalDescriptor);
                        }
                    }
                }
            }
        }
    } catch (Exception e) {
        log.info (""Failed to resolved polymorphic type"");
        log.debug (mapping, e);
    }
    return result;
}
",597,660
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ReadContext.java,"
private void substituteUpdater (Updater originalUpdater, Updater newUpdater) {
    if (! updaterStack.isEmpty ()) {
        Updater updater = (Updater) updaterStack.pop ();
        if (originalUpdater == null && updater == null) {
            updaterStack.push (newUpdater);
        }
        else if (originalUpdater.equals (updater)) {
            updaterStack.push (newUpdater);
        }
        else {
            substituteUpdater (originalUpdater, newUpdater);
            updaterStack.push (updater);
        }
    }
}
",667,688
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ChainedBeanCreatorFactory.java,"
public Object create (ElementMapping elementMapping, ReadContext context, BeanCreationChain chain) {
    Log log = context.getLog ();
    String className = elementMapping.getAttributes ().getValue (context.getClassNameAttribute ());
    if (className != null) {
        try {
            ClassLoader classLoader = context.getClassLoader ();
            Class clazz = null;
            if (classLoader == null) {
                log.warn (""Read context classloader not set."");
            }
            else {
                try {
                    clazz = classLoader.loadClass (className);
                } catch (ClassNotFoundException e) {
                    log.info (""Class not found in context classloader:"");
                    log.debug (clazz, e);
                }
            }
            if (clazz == null) {
                clazz = Class.forName (className);
            }
            return newInstance (clazz, log);
        } catch (Exception e) {
            log.warn (""Could not create instance of type: "" + className);
            log.debug (""Create new instance failed: "", e);
            return null;
        }
    }
    else {
        return chain.create (elementMapping, context);
    }
}
",43,97
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ChainedBeanCreatorFactory.java,"
public static final ChainedBeanCreator createDerivedBeanCreator () {
    return derivedBeanCreator;
}
",105,108
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ChainedBeanCreatorFactory.java,"
private static final Object newInstance (Class theClass, Log log) throws Exception {
    Object result = null;
    try {
        Constructor constructor = theClass.getConstructor (EMPTY_CLASS_ARRAY);
        if (! constructor.isAccessible ()) {
            constructor.setAccessible (true);
        }
        result = constructor.newInstance (EMPTY_OBJECT_ARRAY);
    } catch (SecurityException e) {
        log.debug (""Cannot force accessibility to constructor"", e);
    } catch (NoSuchMethodException e) {
        if (log.isDebugEnabled ()) {
            log.debug (""Class "" + theClass + "" has no empty constructor."");
        }
    }
    if (result == null) {
        result = theClass.newInstance ();
    }
    return result;
}
",118,148
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ChainedBeanCreatorFactory.java,"
public Object create (ElementMapping element, ReadContext context, BeanCreationChain chain) {
    Log log = context.getLog ();
    Class theClass = null;
    ElementDescriptor descriptor = element.getDescriptor ();
    if (descriptor != null) {
        theClass = context.resolvePolymorphicType (element);
        if (theClass == null) {
            theClass = descriptor.getImplementationClass ();
        }
    }
    if (theClass == null) {
        theClass = element.getType ();
    }
    if (descriptor != null && descriptor.isPolymorphic ()) {
        try {
            XMLBeanInfo xmlBeanInfo = context.getXMLIntrospector ().introspect (theClass);
            String namespace = element.getNamespace ();
            String name = element.getName ();
            if (namespace == null) {
                if (! name.equals (xmlBeanInfo.getElementDescriptor ().getQualifiedName ())) {
                    context.getLog ().debug (""Polymorphic type does not match element"");
                    return null;
                }
            }
            else if (! namespace.equals (xmlBeanInfo.getElementDescriptor ().getURI ()) || ! name.equals (xmlBeanInfo.getElementDescriptor ().getLocalName ())) {
                context.getLog ().debug (""Polymorphic type does not match element"");
                return null;
            }
        } catch (IntrospectionException e) {
            context.getLog ().warn (""Could not introspect type to test introspection: "" + theClass.getName ());
            context.getLog ().debug (""Introspection failed: "", e);
            return null;
        }
    }
    if (log.isTraceEnabled ()) {
        log.trace (""Creating instance of class "" + theClass.getName () + "" for element "" + element.getName ());
    }
    try {
        Object result = newInstance (theClass, log);
        return result;
    } catch (Exception e) {
        context.getLog ().warn (""Could not create instance of type: "" + theClass.getName ());
        context.getLog ().debug (""Create new instance failed: "", e);
        return null;
    }
}
",154,237
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ChainedBeanCreatorFactory.java,"
public static final ChainedBeanCreator createElementTypeBeanCreator () {
    return elementTypeBeanCreator;
}
",244,247
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ChainedBeanCreatorFactory.java,"
public Object create (ElementMapping elementMapping, ReadContext context, BeanCreationChain chain) {
    if (context.getMapIDs ()) {
        String idref = elementMapping.getAttributes ().getValue (""idref"");
        if (idref != null) {
            context.getLog ().trace (""Found IDREF"");
            Object bean = context.getBean (idref);
            if (bean != null) {
                if (context.getLog ().isTraceEnabled ()) {
                    context.getLog ().trace (""Matched bean "" + bean);
                }
                return bean;
            }
            context.getLog ().trace (""No match found"");
        }
    }
    return chain.create (elementMapping, context);
}
",253,281
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ChainedBeanCreatorFactory.java,"
public static final ChainedBeanCreator createIDREFBeanCreator () {
    return idRefBeanCreator;
}
",288,291
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/BeanCreationList.java,"
public static final BeanCreationList createStandardChain () {
    BeanCreationList chain = new BeanCreationList ();
    chain.addBeanCreator (ChainedBeanCreatorFactory.createIDREFBeanCreator ());
    chain.addBeanCreator (ChainedBeanCreatorFactory.createDerivedBeanCreator ());
    chain.addBeanCreator (ChainedBeanCreatorFactory.createElementTypeBeanCreator ());
    return chain;
}
",44,51
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/BeanCreationList.java,"
public Object create (ElementMapping elementMapping, ReadContext readContext) {
    ChainWorker worker = new ChainWorker ();
    return worker.create (elementMapping, readContext);
}
",69,73
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/BeanCreationList.java,"
public int getSize () {
    return beanCreators.size ();
}
",81,84
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/BeanCreationList.java,"
public void insertBeanCreator (int index, ChainedBeanCreator beanCreator) throws IndexOutOfBoundsException {
    beanCreators.add (index, beanCreator);
}
",96,102
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/BeanCreationList.java,"
public void addBeanCreator (ChainedBeanCreator beanCreator) {
    beanCreators.add (beanCreator);
}
",108,111
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/BeanCreationList.java,"
public void clearBeanCreators () {
    beanCreators.clear ();
}
",116,119
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/BeanCreationList.java,"
ChainWorker () {
    iterator = beanCreators.iterator ();
}
",127,130
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/BeanCreationList.java,"
public Object create (ElementMapping elementMapping, ReadContext readContext) {
    if (iterator.hasNext ()) {
        ChainedBeanCreator beanCreator = (ChainedBeanCreator) iterator.next ();
        return beanCreator.create (elementMapping, readContext, this);
    }
    return null;
}
",135,144
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ArrayBindAction.java,"
public static final MappingAction createMappingAction (ElementDescriptor elementDescriptor) {
    MappingAction result = new ArrayBindAction ();
    if (elementDescriptor.getSingularPropertyType () != null && ! elementDescriptor.getSingularPropertyType ().isArray ()) {
        result = BeanBindAction.INSTANCE;
    }
    return result;
}
",50,59
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ArrayBindAction.java,"
public MappingAction begin (String namespace, String name, Attributes attributes, ReadContext context) throws Exception {
    context.pushBean (new ArrayList ());
    return this;
}
",70,80
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ArrayBindAction.java,"
public void end (ReadContext context) throws Exception {
    if (originalUpdater != null) {
        List values = (List) context.popBean ();
        originalUpdater.update (context, values);
    }
}
",87,95
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ArrayBindAction.java,"
public MappingAction next (String namespace, String name, Attributes attributes, ReadContext context) throws Exception {
    originalUpdater = context.getCurrentUpdater ();
    MappingAction nextBindAction = BeanBindAction.INSTANCE;
    beanMapping.setDelegate (nextBindAction);
    return beanMapping;
}
",98,109
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ArrayBindAction.java,"
public void update (Context context, Object newValue) {
    List values = (List) context.getBean ();
    values.add (newValue);
}
",120,124
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ArrayBindAction.java,"
BeanMapping () {
}
",132,132
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ArrayBindAction.java,"
MappingAction getDelegate () {
    return delegate;
}
",139,142
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ArrayBindAction.java,"
void setDelegate (MappingAction action) {
    delegate = action;
}
",148,151
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ArrayBindAction.java,"
public MappingAction begin (String namespace, String name, Attributes attributes, ReadContext context) throws Exception {
    context.pushUpdater (ListUpdater.INSTANCE);
    delegate = delegate.begin (namespace, name, attributes, context);
    return this;
}
",154,164
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ArrayBindAction.java,"
public void body (String text, ReadContext context) throws Exception {
    delegate.body (text, context);
}
",167,170
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ArrayBindAction.java,"
public void end (ReadContext context) throws Exception {
    delegate.end (context);
    Updater updater = context.popUpdater ();
}
",173,177
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/ArrayBindAction.java,"
public MappingAction next (String namespace, String name, Attributes attributes, ReadContext context) throws Exception {
    return delegate.next (namespace, name, attributes, context);
}
",180,188
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/BeanCreationChain.java,"
public static final BeanCreationChain createDefaultChain () {
    return BeanCreationList.createStandardChain ();
}
",35,40
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/BeanBindAction.java,"
public MappingAction begin (String namespace, String name, Attributes attributes, ReadContext context) throws Exception {
    Log log = context.getLog ();
    ElementDescriptor computedDescriptor = context.getCurrentDescriptor ();
    if (log.isTraceEnabled ()) {
        log.trace (""Element Pushed: "" + name);
    }
    MappingAction action = MappingAction.EMPTY;
    Object instance = null;
    Class beanClass = null;
    if (computedDescriptor == null) {
        log.trace (""No Descriptor"");
    }
    else {
        beanClass = computedDescriptor.getSingularPropertyType ();
    }
    if (beanClass != null && ! Map.class.isAssignableFrom (beanClass)) {
        instance = createBean (namespace, name, attributes, computedDescriptor, context);
        if (instance != null) {
            action = this;
            if (computedDescriptor.isUseBindTimeTypeForMapping ()) {
                beanClass = instance.getClass ();
            }
            context.markClassMap (beanClass);
            if (log.isTraceEnabled ()) {
                log.trace (""Marked: "" + beanClass);
            }
            context.pushBean (instance);
            ElementDescriptor typeDescriptor = getElementDescriptor (computedDescriptor, context);
            AttributeDescriptor [] attributeDescriptors = typeDescriptor.getAttributeDescriptors ();
            context.populateAttributes (attributeDescriptors, attributes);
            if (log.isTraceEnabled ()) {
                log.trace (""Created bean "" + instance);
            }
            if (context.getMapIDs ()) {
                String id = attributes.getValue (""id"");
                if (id != null) {
                    context.putBean (id, instance);
                }
            }
        }
    }
    return action;
}
",44,135
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/BeanBindAction.java,"
public void body (String text, ReadContext context) throws Exception {
    Log log = context.getLog ();
    ElementDescriptor currentDescriptor = context.getCurrentDescriptor ();
    if (currentDescriptor == null) {
        if (log.isTraceEnabled ()) {
            log.trace (""path descriptor is null:"");
        }
    }
    else {
        TextDescriptor bodyTextdescriptor = currentDescriptor.getPrimaryBodyTextDescriptor ();
        if (bodyTextdescriptor != null) {
            if (log.isTraceEnabled ()) {
                log.trace (""Setting mixed content for:"");
                log.trace (bodyTextdescriptor);
            }
            Updater updater = bodyTextdescriptor.getUpdater ();
            if (log.isTraceEnabled ()) {
                log.trace (""Updating mixed content with:"");
                log.trace (updater);
            }
            if (updater != null && text != null) {
                updater.update (context, text);
            }
        }
    }
}
",138,173
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/BeanBindAction.java,"
public void end (ReadContext context) throws Exception {
    Object instance = context.popBean ();
    update (context, instance);
}
",175,180
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/BeanBindAction.java,"
private void update (ReadContext context, Object value) throws Exception {
    Log log = context.getLog ();
    Updater updater = context.getCurrentUpdater ();
    if (updater == null) {
        if (context.getLog ().isTraceEnabled ()) {
            context.getLog ().trace (""No updater for "" + context.getCurrentElement ());
        }
    }
    else {
        updater.update (context, value);
    }
    String poppedElement = context.popElement ();
}
",182,201
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/BeanBindAction.java,"
protected Object createBean (String namespace, String name, Attributes attributes, ElementDescriptor descriptor, ReadContext context) {
    ElementMapping mapping = new ElementMapping ();
    Class beanClass = descriptor.getSingularPropertyType ();
    if (beanClass != null && beanClass.isArray ()) {
        beanClass = beanClass.getComponentType ();
    }
    mapping.setType (beanClass);
    mapping.setNamespace (namespace);
    mapping.setName (name);
    mapping.setAttributes (attributes);
    mapping.setDescriptor (descriptor);
    Object newInstance = context.getBeanCreationChain ().create (mapping, context);
    return newInstance;
}
",214,242
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/read/BeanBindAction.java,"
private ElementDescriptor getElementDescriptor (ElementDescriptor propertyDescriptor, ReadContext context) {
    Log log = context.getLog ();
    Class beanClass = propertyDescriptor.getSingularPropertyType ();
    if (propertyDescriptor.isUseBindTimeTypeForMapping ()) {
        Object current = context.getBean ();
        if (current != null) {
            beanClass = current.getClass ();
        }
    }
    if (beanClass != null && ! Map.class.isAssignableFrom (beanClass)) {
        if (beanClass.isArray ()) {
            beanClass = beanClass.getComponentType ();
        }
        if (log.isTraceEnabled ()) {
            log.trace (""Filling descriptor for: "" + beanClass);
        }
        try {
            XMLBeanInfo xmlInfo = context.getXMLIntrospector ().introspect (beanClass);
            return xmlInfo.getElementDescriptor ();
        } catch (Exception e) {
            log.warn (""Could not introspect class: "" + beanClass, e);
        }
    }
    return propertyDescriptor;
}
",254,296
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
private static final String getEOL () {
    String result = ""\n"";
    try {
        result = System.getProperty (""line.separator"", ""\n"");
    } catch (SecurityException se) {
        Log log = LogFactory.getLog (BeanWriter.class);
        log.warn (""Cannot load line separator property: "" + se.getMessage ());
        log.trace (""Caused by: "", se);
    }
    return result;
}
",87,102
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public BeanWriter () {
    this (System.out);
}
",137,140
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public BeanWriter (OutputStream out) {
    this.writer = new BufferedWriter (new OutputStreamWriter (out));
    this.autoFlush = true;
}
",147,151
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public BeanWriter (OutputStream out, String enc) throws UnsupportedEncodingException {
    this.writer = new BufferedWriter (new OutputStreamWriter (out, enc));
    this.autoFlush = true;
}
",162,166
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public BeanWriter (Writer writer) {
    this.writer = writer;
}
",173,176
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public void writeXmlDeclaration (String xmlDeclaration) throws IOException {
    writer.write (xmlDeclaration);
    printLine ();
}
",187,191
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public void flush () throws IOException {
    writer.flush ();
}
",198,201
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public void close () throws IOException {
    writer.close ();
}
",208,211
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public void write (Object bean) throws IOException, SAXException, IntrospectionException {
    super.write (bean);
    if (autoFlush) {
        writer.flush ();
    }
}
",221,230
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public void enablePrettyPrint () {
    endOfLine = EOL;
    indent = ""  "";
}
",238,242
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public String getEndOfLine () {
    return endOfLine;
}
",249,252
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public void setEndOfLine (String endOfLine) {
    this.endOfLine = endOfLine;
    for (int i = 0; i < endOfLine.length (); i ++) {
        if (! Character.isWhitespace (endOfLine.charAt (i))) {
            log.warn (""Invalid EndOfLine character(s)"");
            break;
        }
    }
}
",260,272
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public int getInitialIndentLevel () {
    return initialIndentLevel;
}
",280,283
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public void setInitialIndentLevel (int initialIndentLevel) {
    this.initialIndentLevel = initialIndentLevel;
}
",290,293
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public String getIndent () {
    return indent;
}
",301,304
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public void setIndent (String indent) {
    this.indent = indent;
}
",310,313
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public Log getLog () {
    return log;
}
",320,323
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public void setLog (Log log) {
    this.log = log;
}
",330,333
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public MixedContentEncodingStrategy getMixedContentEncodingStrategy () {
    return mixedContentEncodingStrategy;
}
",342,345
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public void setMixedContentEncodingStrategy (MixedContentEncodingStrategy strategy) {
    mixedContentEncodingStrategy = strategy;
}
",355,358
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public boolean isEndTagForEmptyElement () {
    return addEndTagForEmptyElement;
}
",371,374
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
public void setEndTagForEmptyElement (boolean addEndTagForEmptyElement) {
    this.addEndTagForEmptyElement = addEndTagForEmptyElement;
}
",386,389
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
protected void startElement (WriteContext context, String uri, String localName, String qualifiedName, Attributes attr) throws IOException, SAXException {
    if (! closedStartTag) {
        writer.write ('>');
        printLine ();
    }
    indentLevel ++;
    indent ();
    writer.write ('<');
    writer.write (qualifiedName);
    for (int i = 0; i < attr.getLength (); i ++) {
        writer.write (' ');
        writer.write (attr.getQName (i));
        writer.write (""=\"""");
        writer.write (XMLUtils.escapeAttributeValue (attr.getValue (i)));
        writer.write ('\""');
    }
    closedStartTag = false;
    currentElementIsEmpty = true;
    currentElementHasBodyText = false;
}
",408,441
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
protected void endElement (WriteContext context, String uri, String localName, String qualifiedName) throws IOException, SAXException {
    if (! addEndTagForEmptyElement && ! closedStartTag && currentElementIsEmpty) {
        writer.write (""/>"");
        closedStartTag = true;
    }
    else {
        if (addEndTagForEmptyElement && ! closedStartTag) {
            writer.write ("">"");
            closedStartTag = true;
        }
        else if (! currentElementHasBodyText) {
            indent ();
        }
        writer.write (""</"");
        writer.write (qualifiedName);
        writer.write ('>');
    }
    indentLevel --;
    printLine ();
    currentElementHasBodyText = false;
}
",454,497
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
protected void bodyText (WriteContext context, String text) throws IOException {
    if (text == null) {
        log.error (""[expressBodyText]Body text is null"");
    }
    else {
        if (! closedStartTag) {
            writer.write ('>');
            closedStartTag = true;
        }
        writer.write (mixedContentEncodingStrategy.encode (text, context.getCurrentDescriptor ()));
        currentElementIsEmpty = false;
        currentElementHasBodyText = true;
    }
}
",506,528
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
private void printLine () throws IOException {
    if (endOfLine != null) {
        writer.write (endOfLine);
    }
}
",535,541
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
private void indent () throws IOException {
    if (indent != null) {
        for (int i = 1 - initialIndentLevel; i < indentLevel; i ++) {
            writer.write (getIndent ());
        }
    }
}
",548,557
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
protected void writePrintln () throws IOException {
    if (endOfLine != null) {
        writer.write (endOfLine);
    }
}
",569,575
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
protected void writeIndent () throws IOException {
    if (indent != null) {
        for (int i = 0; i < indentLevel; i ++) {
            writer.write (getIndent ());
        }
    }
}
",583,592
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
protected String escapeBodyValue (Object value) {
    return XMLUtils.escapeBodyValue (value);
}
",602,605
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
protected String escapeAttributeValue (Object value) {
    return XMLUtils.escapeAttributeValue (value);
}
",616,619
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
protected void expressElementStart (String qualifiedName) throws IOException {
    if (qualifiedName == null) {
        log.fatal (""[expressElementStart]Qualified name is null."");
        throw new RuntimeException (""Qualified name is null."");
    }
    writePrintln ();
    writeIndent ();
    writer.write ('<');
    writer.write (qualifiedName);
}
",628,641
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
protected void expressTagClose () throws IOException {
    writer.write ('>');
}
",649,652
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
protected void expressElementEnd (String qualifiedName) throws IOException {
    if (qualifiedName == null) {
        log.fatal (""[expressElementEnd]Qualified name is null."");
        throw new RuntimeException (""Qualified name is null."");
    }
    writer.write (""</"");
    writer.write (qualifiedName);
    writer.write ('>');
}
",661,673
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
protected void expressElementEnd () throws IOException {
    writer.write (""/>"");
}
",681,684
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
protected void expressBodyText (String text) throws IOException {
    if (text == null) {
        log.error (""[expressBodyText]Body text is null"");
    }
    else {
        writer.write (XMLUtils.escapeBodyValue (text));
    }
}
",693,705
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanWriter.java,"
protected void expressAttribute (String qualifiedName, String value) throws IOException {
    if (value == null) {
        log.error (""Null attribute value."");
        return;
    }
    if (qualifiedName == null) {
        log.error (""Null attribute value."");
        return;
    }
    writer.write (' ');
    writer.write (qualifiedName);
    writer.write (""=\"""");
    writer.write (XMLUtils.escapeAttributeValue (value));
    writer.write ('\""');
}
",715,740
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/id/RandomIDGenerator.java,"
public RandomIDGenerator () {
}
",50,50
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/id/RandomIDGenerator.java,"
public RandomIDGenerator (boolean onlyPositiveIds) {
    setPositiveIds (onlyPositiveIds);
}
",57,60
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/id/RandomIDGenerator.java,"
public String nextIdImpl () {
    int next = random.nextInt ();
    if (onlyPositiveIds && next < 0) {
        return nextIdImpl ();
    }
    return Integer.toString (next);
}
",71,80
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/id/RandomIDGenerator.java,"
public boolean getPositiveIds () {
    return onlyPositiveIds;
}
",87,90
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/id/RandomIDGenerator.java,"
public void setPositiveIds (boolean onlyPositiveIds) {
    this.onlyPositiveIds = onlyPositiveIds;
}
",97,100
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/id/AbstractIDGenerator.java,"
public final String getLastId () {
    return lastId;
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/id/AbstractIDGenerator.java,"
public final String nextId () {
    lastId = nextIdImpl ();
    return lastId;
}
",56,60
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/id/SequentialIDGenerator.java,"
public SequentialIDGenerator () {
}
",42,42
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/id/SequentialIDGenerator.java,"
public SequentialIDGenerator (int start) {
    this.counter = start;
}
",54,57
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/id/SequentialIDGenerator.java,"
public String nextIdImpl () {
    return Integer.toString (++ counter);
}
",64,67
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/id/SequentialIDGenerator.java,"
public int getCount () {
    return counter;
}
",74,77
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
public static void setLog (Log aLog) {
    log = aLog;
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
public BeanCreateRule (ElementDescriptor descriptor, Class beanClass, String pathPrefix) {
    this (descriptor, beanClass, pathPrefix, true);
}
",84,90
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
public BeanCreateRule (ElementDescriptor descriptor, Class beanClass, String pathPrefix, boolean matchIDs) {
    this (descriptor, beanClass, new Context (), pathPrefix, matchIDs);
}
",100,112
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
public BeanCreateRule (ElementDescriptor descriptor, Class beanClass) {
    this (descriptor, beanClass, true);
}
",120,123
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
public BeanCreateRule (ElementDescriptor descriptor, Class beanClass, boolean matchIDs) {
    this (descriptor, beanClass, descriptor.getQualifiedName () + ""/"", matchIDs);
}
",132,135
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
public BeanCreateRule (ElementDescriptor descriptor, Context context, String pathPrefix) {
    this (descriptor, context, pathPrefix, true);
}
",144,150
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
public BeanCreateRule (ElementDescriptor descriptor, Context context, String pathPrefix, boolean matchIDs) {
    this (descriptor, descriptor.getSingularPropertyType (), context, pathPrefix, matchIDs);
}
",160,172
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
private BeanCreateRule (ElementDescriptor descriptor, Class beanClass, Context context, String pathPrefix, boolean matchIDs) {
    this.descriptor = descriptor;
    this.context = context;
    this.beanClass = beanClass;
    this.pathPrefix = pathPrefix;
    this.matchIDs = matchIDs;
    if (log.isTraceEnabled ()) {
        log.trace (""Created bean create rule"");
        log.trace (""Descriptor="" + descriptor);
        log.trace (""Class="" + beanClass);
        log.trace (""Path prefix="" + pathPrefix);
    }
}
",183,202
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
public void begin (Attributes attributes) {
    log.debug (""Called with descriptor: "" + descriptor + "" propertyType: "" + descriptor.getPropertyType ());
    if (log.isTraceEnabled ()) {
        int attributesLength = attributes.getLength ();
        if (attributesLength > 0) {
            log.trace (""Attributes:"");
        }
        for (int i = 0, size = attributesLength; i < size; i ++) {
            log.trace (""Local:"" + attributes.getLocalName (i));
            log.trace (""URI:"" + attributes.getURI (i));
            log.trace (""QName:"" + attributes.getQName (i));
        }
    }
    createdBean = false;
    Object instance = null;
    if (beanClass != null) {
        instance = createBean (attributes);
        if (instance != null) {
            createdBean = true;
            context.setBean (instance);
            digester.push (instance);
            ElementDescriptor typeDescriptor = getElementDescriptor (descriptor);
            AttributeDescriptor [] attributeDescriptors = typeDescriptor.getAttributeDescriptors ();
            if (attributeDescriptors != null) {
                for (int i = 0, size = attributeDescriptors.length; i < size; i ++) {
                    AttributeDescriptor attributeDescriptor = attributeDescriptors [i];
                    String value = attributes.getValue (attributeDescriptor.getURI (), attributeDescriptor.getLocalName ());
                    if (value == null) {
                        value = attributes.getValue (attributeDescriptor.getQualifiedName ());
                    }
                    if (log.isTraceEnabled ()) {
                        log.trace (""Attr URL:"" + attributeDescriptor.getURI ());
                        log.trace (""Attr LocalName:"" + attributeDescriptor.getLocalName ());
                        log.trace (value);
                    }
                    Updater updater = attributeDescriptor.getUpdater ();
                    log.trace (updater);
                    if (updater != null && value != null) {
                        updater.update (context, value);
                    }
                }
            }
            addChildRules ();
            if (matchIDs) {
                String id = attributes.getValue (""id"");
                if (id != null) {
                    getBeansById ().put (id, instance);
                }
            }
        }
    }
}
",214,314
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
public void end () {
    if (createdBean) {
        Updater updater = descriptor.getUpdater ();
        Object instance = context.getBean ();
        Object top = digester.pop ();
        if (digester.getCount () == 0) {
            context.setBean (null);
        }
        else {
            context.setBean (digester.peek ());
        }
        if (updater != null) {
            if (log.isDebugEnabled ()) {
                log.debug (""Calling updater for: "" + descriptor + "" with: "" + instance + "" on bean: "" + context.getBean ());
            }
            updater.update (context, instance);
        }
        else {
            if (log.isDebugEnabled ()) {
                log.debug (""No updater for: "" + descriptor + "" with: "" + instance + "" on bean: "" + context.getBean ());
            }
        }
    }
}
",319,356
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
public void finish () {
}
",361,361
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
public String getClassNameAttribute () {
    return classNameAttribute;
}
",376,379
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
public void setClassNameAttribute (String classNameAttribute) {
    this.classNameAttribute = classNameAttribute;
}
",390,393
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
protected Object createBean (Attributes attributes) {
    if (matchIDs) {
        String idref = attributes.getValue (""idref"");
        if (idref != null) {
            log.trace (""Found IDREF"");
            Object bean = getBeansById ().get (idref);
            if (bean != null) {
                if (log.isTraceEnabled ()) {
                    log.trace (""Matched bean "" + bean);
                }
                return bean;
            }
            log.trace (""No match found"");
        }
    }
    Class theClass = beanClass;
    try {
        String className = attributes.getValue (classNameAttribute);
        if (className != null) {
            theClass = getDigester ().getClassLoader ().loadClass (className);
        }
        if (log.isTraceEnabled ()) {
            log.trace (""Creating instance of "" + theClass);
        }
        return theClass.newInstance ();
    } catch (Exception e) {
        log.warn (""Could not create instance of type: "" + theClass.getName ());
        return null;
    }
}
",404,456
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
protected void addChildRules () {
    if (! addedChildren) {
        addedChildren = true;
        addChildRules (pathPrefix, descriptor);
    }
}
",459,467
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
protected void addChildRules (String prefix, ElementDescriptor currentDescriptor) {
    if (log.isTraceEnabled ()) {
        log.trace (""Adding child rules for "" + currentDescriptor + ""@"" + prefix);
    }
    ElementDescriptor typeDescriptor = getElementDescriptor (currentDescriptor);
    ElementDescriptor [] childDescriptors = typeDescriptor.getElementDescriptors ();
    if (childDescriptors != null) {
        for (int i = 0, size = childDescriptors.length; i < size; i ++) {
            final ElementDescriptor childDescriptor = childDescriptors [i];
            if (log.isTraceEnabled ()) {
                log.trace (""Processing child "" + childDescriptor);
            }
            String qualifiedName = childDescriptor.getQualifiedName ();
            if (qualifiedName == null) {
                log.trace (""Ignoring"");
                continue;
            }
            String path = prefix + qualifiedName;
            if (qualifiedName.equals (currentDescriptor.getQualifiedName ()) && currentDescriptor.getPropertyName () != null) {
                log.trace (""Creating generic rule for recursive elements"");
                int index = - 1;
                if (childDescriptor.isWrapCollectionsInElement ()) {
                    index = prefix.indexOf (qualifiedName);
                    if (index == - 1) {
                        log.debug (""Oops - this shouldn't happen"");
                        continue;
                    }
                    int removeSlash = prefix.endsWith (""/"") ? 1 : 0;
                    path = ""*/"" + prefix.substring (index, prefix.length () - removeSlash);
                }
                else {
                    ElementDescriptor [] desc = currentDescriptor.getElementDescriptors ();
                    if (desc.length == 1) {
                        path = ""*/"" + desc [0].getQualifiedName ();
                    }
                }
                Rule rule = new BeanCreateRule (childDescriptor, context, path, matchIDs);
                addRule (path, rule);
                continue;
            }
            if (childDescriptor.getUpdater () != null) {
                if (log.isTraceEnabled ()) {
                    log.trace (""Element has updater "" + ((MethodUpdater) childDescriptor.getUpdater ()).getMethod ().getName ());
                }
                if (childDescriptor.isPrimitiveType ()) {
                    addPrimitiveTypeRule (path, childDescriptor);
                }
                else {
                    ElementDescriptor [] grandChildren = childDescriptor.getElementDescriptors ();
                    if (grandChildren != null && grandChildren.length > 0) {
                        ElementDescriptor grandChild = grandChildren [0];
                        String grandChildQName = grandChild.getQualifiedName ();
                        if (grandChildQName != null && grandChildQName.length () > 0) {
                            if (childDescriptor.isWrapCollectionsInElement ()) {
                                path += '/' + grandChildQName;
                            }
                            else {
                                path = prefix + (prefix.endsWith (""/"") ? """" : ""/"") + grandChildQName;
                            }
                        }
                    }
                    Class beanClass = childDescriptor.getSingularPropertyType ();
                    if (XMLIntrospectorHelper.isPrimitiveType (beanClass)) {
                        addPrimitiveTypeRule (path, childDescriptor);
                    }
                    else {
                        Rule rule = new BeanCreateRule (childDescriptor, context, path + '/', matchIDs);
                        addRule (path, rule);
                    }
                }
            }
            else {
                log.trace (""Element does not have updater"");
            }
            ElementDescriptor [] grandChildren = childDescriptor.getElementDescriptors ();
            if (grandChildren != null && grandChildren.length > 0) {
                log.trace (""Adding grand children"");
                addChildRules (path + '/', childDescriptor);
            }
        }
    }
}
",475,606
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
protected BeanReader getBeanReader () {
    return (BeanReader) getDigester ();
}
",613,618
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
protected ElementDescriptor getElementDescriptor (ElementDescriptor propertyDescriptor) {
    Class beanClass = propertyDescriptor.getSingularPropertyType ();
    if (beanClass != null) {
        XMLIntrospector introspector = getBeanReader ().getXMLIntrospector ();
        try {
            XMLBeanInfo xmlInfo = introspector.introspect (beanClass);
            return xmlInfo.getElementDescriptor ();
        } catch (Exception e) {
            log.warn (""Could not introspect class: "" + beanClass, e);
        }
    }
    return propertyDescriptor;
}
",628,647
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
protected void addPrimitiveTypeRule (String path, final ElementDescriptor childDescriptor) {
    Rule rule = new Rule () {
        public void body (String text) throws Exception {
            childDescriptor.getUpdater ().update (context, text);
        }
    }
    ;
    addRule (path, rule);
}
",655,665
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
public void body (String text) throws Exception {
    childDescriptor.getUpdater ().update (context, text);
}
",659,662
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
protected void addRule (String path, Rule rule) {
    Rules rules = digester.getRules ();
    List matches = rules.match (null, path);
    if (matches.isEmpty ()) {
        if (log.isDebugEnabled ()) {
            log.debug (""Adding digester rule for path: "" + path + "" rule: "" + rule);
        }
        digester.addRule (path, rule);
    }
    else {
        if (log.isDebugEnabled ()) {
            log.debug (""Ignoring duplicate digester rule for path: "" + path + "" rule: "" + rule);
            log.debug (""New rule (not added): "" + rule);
            log.debug (""Existing rule:"" + matches.get (0));
        }
    }
}
",673,696
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
protected Map getBeansById () {
    Map beansById = (Map) context.getVariable (""beans-index"");
    if (beansById == null) {
        beansById = new HashMap ();
        context.setVariable (""beans-index"", beansById);
        log.trace (""Created new index-by-id map"");
    }
    return beansById;
}
",704,721
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanCreateRule.java,"
public String toString () {
    return ""BeanCreateRule [path prefix="" + pathPrefix + "" descriptor="" + descriptor + ""]"";
}
",728,731
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
public BeanReader () {
    setRules (new ExtendedBaseRules ());
}
",65,69
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
public BeanReader (SAXParser parser) {
    super (parser);
    setRules (new ExtendedBaseRules ());
}
",80,84
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
public BeanReader (XMLReader reader) {
    super (reader);
    setRules (new ExtendedBaseRules ());
}
",95,99
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
public void registerBeanClass (Class beanClass) throws IntrospectionException {
    if (! registeredClasses.contains (beanClass)) {
        register (beanClass, null);
    }
    else {
        if (log.isWarnEnabled ()) {
            log.warn (""Cannot add class "" + beanClass.getName () + "" since it already exists"");
        }
    }
}
",124,138
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
private void register (Class beanClass, String path) throws IntrospectionException {
    if (log.isTraceEnabled ()) {
        log.trace (""Registering class "" + beanClass);
    }
    XMLBeanInfo xmlInfo = introspector.introspect (beanClass);
    registeredClasses.add (beanClass);
    ElementDescriptor elementDescriptor = xmlInfo.getElementDescriptor ();
    if (path == null) {
        path = elementDescriptor.getQualifiedName ();
    }
    if (log.isTraceEnabled ()) {
        log.trace (""Added path: "" + path + "", mapped to: "" + beanClass.getName ());
    }
    addBeanCreateRule (path, elementDescriptor, beanClass);
}
",147,168
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
public void registerBeanClass (String path, Class beanClass) throws IntrospectionException {
    if (! registeredClasses.contains (beanClass)) {
        register (beanClass, path);
    }
    else {
        if (log.isWarnEnabled ()) {
            log.warn (""Cannot add class "" + beanClass.getName () + "" since it already exists"");
        }
    }
}
",196,211
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
public void registerMultiMapping (InputSource mapping) throws IntrospectionException, IOException, SAXException {
    Class [] mappedClasses = introspector.register (mapping);
    for (int i = 0, size = mappedClasses.length; i < size; i ++) {
        Class beanClass = mappedClasses [i];
        if (! registeredClasses.contains (beanClass)) {
            register (beanClass, null);
        }
    }
}
",233,245
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
public void registerBeanClass (InputSource mapping, Class beanClass) throws IntrospectionException, IOException, SAXException {
    if (! registeredClasses.contains (beanClass)) {
        introspector.register (beanClass, mapping);
        register (beanClass, null);
    }
    else {
        if (log.isWarnEnabled ()) {
            log.warn (""Cannot add class "" + beanClass.getName () + "" since it already exists"");
        }
    }
}
",267,283
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
public void flushRegisteredBeanClasses () {
    registeredClasses.clear ();
}
",294,297
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
public void deregisterBeanClass (Class beanClass) {
    registeredClasses.remove (beanClass);
}
",312,315
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
public XMLIntrospector getXMLIntrospector () {
    return introspector;
}
",330,333
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
public void setXMLIntrospector (XMLIntrospector introspector) {
    this.introspector = introspector;
}
",346,349
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
public Log getLog () {
    return log;
}
",356,359
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
public void setLog (Log log) {
    this.log = log;
    setLogger (log);
}
",366,370
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
public boolean getMatchIDs () {
    return getBindingConfiguration ().getMapIDs ();
}
",379,382
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
public void setMatchIDs (boolean matchIDs) {
    getBindingConfiguration ().setMapIDs (matchIDs);
}
",390,393
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
public BindingConfiguration getBindingConfiguration () {
    return bindingConfiguration;
}
",400,403
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
public void setBindingConfiguration (BindingConfiguration bindingConfiguration) {
    this.bindingConfiguration = bindingConfiguration;
}
",410,413
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
public ReadConfiguration getReadConfiguration () {
    return readConfiguration;
}
",420,423
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
public void setReadConfiguration (ReadConfiguration readConfiguration) {
    this.readConfiguration = readConfiguration;
}
",430,433
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
protected void addBeanCreateRule (String path, ElementDescriptor elementDescriptor, Class beanClass) {
    if (log.isTraceEnabled ()) {
        log.trace (""Adding BeanRuleSet for "" + beanClass);
    }
    RuleSet ruleSet = new BeanRuleSet (introspector, path, elementDescriptor, beanClass, makeContext ());
    addRuleSet (ruleSet);
}
",445,461
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/io/BeanReader.java,"
private ReadContext makeContext () {
    return new ReadContext (log, bindingConfiguration, readConfiguration);
}
",468,471
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/Options.java,"
public String getValue (String name) {
    return (String) valuesByName.get (name);
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/Options.java,"
public String [] getNames () {
    Set names = valuesByName.keySet ();
    return (String []) names.toArray (EMPTY_STRING_ARRAY);
}
",51,55
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/Options.java,"
public void addOption (String name, String value) {
    valuesByName.put (name, value);
}
",64,67
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/Options.java,"
public void addOptions (Options options) {
    valuesByName.putAll (options.valuesByName);
}
",78,81
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLUtils.java,"
public XMLUtils () {
}
",280,280
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLUtils.java,"
public static final String escapeBodyValue (Object value) {
    StringBuffer buffer = new StringBuffer (value.toString ());
    for (int i = 0, size = buffer.length (); i < size; i ++) {
        switch (buffer.charAt (i)) {
            case '<' :
                buffer.replace (i, i + 1, LESS_THAN_ENTITY);
                size += 3;
                i += 3;
                break;
            case '>' :
                buffer.replace (i, i + 1, GREATER_THAN_ENTITY);
                size += 3;
                i += 3;
                break;
            case '&' :
                buffer.replace (i, i + 1, AMPERSAND_ENTITY);
                size += 4;
                i += 4;
                break;
        }
    }
    return buffer.toString ();
}
",292,317
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLUtils.java,"
public static final String escapeAttributeValue (Object value) {
    StringBuffer buffer = new StringBuffer (value.toString ());
    for (int i = 0, size = buffer.length (); i < size; i ++) {
        switch (buffer.charAt (i)) {
            case '<' :
                buffer.replace (i, i + 1, LESS_THAN_ENTITY);
                size += 3;
                i += 3;
                break;
            case '>' :
                buffer.replace (i, i + 1, GREATER_THAN_ENTITY);
                size += 3;
                i += 3;
                break;
            case '&' :
                buffer.replace (i, i + 1, AMPERSAND_ENTITY);
                size += 4;
                i += 4;
                break;
            case '\'' :
                buffer.replace (i, i + 1, APOSTROPHE_ENTITY);
                size += 5;
                i += 5;
                break;
            case '\""' :
                buffer.replace (i, i + 1, QUOTE_ENTITY);
                size += 5;
                i += 5;
                break;
        }
    }
    return buffer.toString ();
}
",326,361
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLUtils.java,"
public static final String escapeCDATAContent (String content) {
    StringBuffer buffer = new StringBuffer (content);
    escapeCDATAContent (buffer);
    return buffer.toString ();
}
",374,379
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLUtils.java,"
public static final void escapeCDATAContent (StringBuffer bufferedContent) {
    for (int i = 2, size = bufferedContent.length (); i < size; i ++) {
        char at = bufferedContent.charAt (i);
        if (at == '>' && bufferedContent.charAt (i - 1) == ']' && bufferedContent.charAt (i - 2) == ']') {
            bufferedContent.replace (i, i + 1, GREATER_THAN_ENTITY);
            size += 3;
            i += 3;
        }
    }
}
",391,406
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLUtils.java,"
public static boolean isWellFormedXMLName (String name) {
    if (name == null) {
        return false;
    }
    if (name.length () == 0) {
        return false;
    }
    char ch = name.charAt (0);
    if (isNameStartChar (ch) == false) {
        return false;
    }
    for (int i = 1; i < name.length (); i ++) {
        ch = name.charAt (i);
        if (isNameChar (ch) == false) {
            return false;
        }
    }
    return true;
}
",424,452
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLUtils.java,"
public static boolean isNameChar (int c) {
    return c < 0x10000 && (CHARS [c] & MASK_NAME) != 0;
}
",461,464
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLUtils.java,"
public static boolean isNameStartChar (int c) {
    return c < 0x10000 && (CHARS [c] & MASK_NAME_START) != 0;
}
",473,476
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/registry/NoCacheRegistry.java,"
public XMLBeanInfo get (Class forThisClass) {
    return null;
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/registry/NoCacheRegistry.java,"
public void put (Class forThisClass, XMLBeanInfo beanInfo) {
}
",47,47
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/registry/NoCacheRegistry.java,"
public void flush () {
}
",55,57
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/registry/DefaultXMLBeanInfoRegistry.java,"
public XMLBeanInfo get (Class forThisClass) {
    return (XMLBeanInfo) xmlBeanInfos.get (forThisClass);
}
",49,52
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/registry/DefaultXMLBeanInfoRegistry.java,"
public void put (Class forThisClass, XMLBeanInfo beanInfo) {
    xmlBeanInfos.put (forThisClass, beanInfo);
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/registry/DefaultXMLBeanInfoRegistry.java,"
public void flush () {
    xmlBeanInfos.clear ();
}
",68,71
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/registry/DefaultXMLBeanInfoRegistry.java,"
public Class resolveType (ElementMapping mapping, ReadContext context) {
    Class result = null;
    Collection cachedClasses = getCachedClasses ();
    ElementDescriptor mappedDescriptor = mapping.getDescriptor ();
    Class mappedType = mappedDescriptor.getSingularPropertyType ();
    if (mappedType == null) {
        mappedType = mappedDescriptor.getPropertyType ();
    }
    for (Iterator it = cachedClasses.iterator (); it.hasNext ();) {
        XMLBeanInfo beanInfo = get ((Class) it.next ());
        ElementDescriptor typeDescriptor = beanInfo.getElementDescriptor ();
        boolean sameName = mapping.getName ().equals (typeDescriptor.getQualifiedName ());
        if (sameName) {
            boolean compatibleClass = mappedType.isAssignableFrom (beanInfo.getBeanClass ());
            if (compatibleClass) {
                result = beanInfo.getBeanClass ();
                break;
            }
        }
    }
    return result;
}
",80,107
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/registry/DefaultXMLBeanInfoRegistry.java,"
private Collection getCachedClasses () {
    return xmlBeanInfos.keySet ();
}
",114,117
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/AttributeDescriptor.java,"
public AttributeDescriptor () {
}
",30,32
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/AttributeDescriptor.java,"
public AttributeDescriptor (String localName) {
    super (localName);
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/AttributeDescriptor.java,"
public AttributeDescriptor (String localName, String qualifiedName, String uri) {
    super (localName, qualifiedName, uri);
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/AttributeDescriptor.java,"
public String toString () {
    return ""AttributeDescriptor[qname="" + getQualifiedName () + "",class="" + getPropertyType () + ""]"";
}
",61,65
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/TextDescriptor.java,"
public TextDescriptor () {
}
",37,39
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLBeanInfo.java,"
public XMLBeanInfo (Class beanClass) {
    this.beanClass = beanClass;
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLBeanInfo.java,"
public ElementDescriptor getElementDescriptor () {
    return elementDescriptor;
}
",66,69
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLBeanInfo.java,"
public void setElementDescriptor (ElementDescriptor elementDescriptor) {
    this.elementDescriptor = elementDescriptor;
}
",76,79
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLBeanInfo.java,"
public Class getBeanClass () {
    return beanClass;
}
",86,89
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLBeanInfo.java,"
public void setBeanClass (Class beanClass) {
    this.beanClass = beanClass;
}
",96,99
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLBeanInfo.java,"
public AttributeDescriptor getIDAttribute () {
    idAttributeDescriptor = findIDAttribute ();
    return idAttributeDescriptor;
}
",106,120
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLBeanInfo.java,"
private AttributeDescriptor findIDAttribute () {
    if (getElementDescriptor ().hasAttributes ()) {
        AttributeDescriptor [] attributes = getElementDescriptor ().getAttributeDescriptors ();
        if (attributes != null) {
            for (int i = 0, size = attributes.length; i < size; i ++) {
                if (getIDAttributeName ().equals (attributes [i].getQualifiedName ()) || getIDAttributeName ().equals (attributes [i].getLocalName ())) {
                    return attributes [i];
                }
            }
        }
    }
    return null;
}
",126,148
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLBeanInfo.java,"
public String getIDAttributeName () {
    return idAttributeName;
}
",159,162
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLBeanInfo.java,"
public void setIDAttributeName (String idAttributeName) {
    this.idAttributeName = idAttributeName;
}
",173,176
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLBeanInfo.java,"
public String getIDREFAttributeName () {
    return idrefAttributeName;
}
",186,189
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLBeanInfo.java,"
public void setIDREFAttributeName (String idrefAttributeName) {
    this.idrefAttributeName = idrefAttributeName;
}
",199,202
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLBeanInfo.java,"
public String toString () {
    return ""XMLBeanInfo [class="" + getBeanClass () + "", descriptor="" + getElementDescriptor () + ""]"";
}
",209,214
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BeanProperty.java,"
public BeanProperty (String propertyName, Class propertyType, Expression propertyExpression, Updater propertyUpdater) {
    this.propertyName = propertyName;
    this.propertyType = propertyType;
    this.propertyExpression = propertyExpression;
    this.propertyUpdater = propertyUpdater;
}
",66,76
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BeanProperty.java,"
public BeanProperty (PropertyDescriptor descriptor) {
    this.propertyName = descriptor.getName ();
    this.propertyType = descriptor.getPropertyType ();
    Method readMethod = descriptor.getReadMethod ();
    if (readMethod != null) {
        this.propertyExpression = new MethodExpression (readMethod);
    }
    Method writeMethod = descriptor.getWriteMethod ();
    if (writeMethod != null) {
        this.propertyUpdater = new MethodUpdater (writeMethod);
    }
}
",82,98
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BeanProperty.java,"
public BeanProperty (DynaProperty dynaProperty) {
    this.propertyName = dynaProperty.getName ();
    this.propertyType = dynaProperty.getType ();
    this.propertyExpression = new DynaBeanExpression (propertyName);
    this.propertyUpdater = new DynaBeanUpdater (propertyName, propertyType);
}
",104,110
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BeanProperty.java,"
public String getPropertyName () {
    return propertyName;
}
",117,120
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BeanProperty.java,"
public Class getPropertyType () {
    return propertyType;
}
",126,129
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BeanProperty.java,"
public Expression getPropertyExpression () {
    return propertyExpression;
}
",136,139
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BeanProperty.java,"
public Updater getPropertyUpdater () {
    return propertyUpdater;
}
",146,149
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BeanProperty.java,"
public Descriptor createXMLDescriptor (IntrospectionConfiguration configuration) {
    Log log = configuration.getIntrospectionLog ();
    if (log.isTraceEnabled ()) {
        log.trace (""Creating descriptor for property: name="" + getPropertyName () + "" type="" + getPropertyType ());
    }
    NodeDescriptor descriptor = null;
    Expression propertyExpression = getPropertyExpression ();
    Updater propertyUpdater = getPropertyUpdater ();
    if (propertyExpression == null) {
        if (log.isTraceEnabled ()) {
            log.trace (""No read method for property: name="" + getPropertyName () + "" type="" + getPropertyType ());
        }
        return null;
    }
    if (log.isTraceEnabled ()) {
        log.trace (""Property expression="" + propertyExpression);
    }
    TypeBindingStrategy.BindingType bindingType = configuration.getTypeBindingStrategy ().bindingType (getPropertyType ());
    if (bindingType.equals (TypeBindingStrategy.BindingType.PRIMITIVE)) {
        descriptor = createDescriptorForPrimitive (configuration, propertyExpression, propertyUpdater);
    }
    else if (configuration.isLoopType (getPropertyType ())) {
        if (log.isTraceEnabled ()) {
            log.trace (""Loop type: "" + getPropertyName ());
            log.trace (""Wrap in collections? "" + configuration.isWrapCollectionsInElement ());
        }
        if (Map.class.isAssignableFrom (getPropertyType ())) {
            descriptor = createDescriptorForMap (configuration, propertyExpression);
        }
        else {
            descriptor = createDescriptorForCollective (configuration, propertyUpdater, propertyExpression);
        }
    }
    else {
        if (log.isTraceEnabled ()) {
            log.trace (""Standard property: "" + getPropertyName ());
        }
        descriptor = createDescriptorForStandard (propertyExpression, propertyUpdater, configuration);
    }
    if (log.isTraceEnabled ()) {
        log.trace (""Created descriptor:"");
        log.trace (descriptor);
    }
    return descriptor;
}
",159,245
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BeanProperty.java,"
private void configureDescriptor (NodeDescriptor descriptor, IntrospectionConfiguration configuration) {
    NameMapper nameMapper = configuration.getElementNameMapper ();
    if (descriptor instanceof AttributeDescriptor) {
        nameMapper = configuration.getAttributeNameMapper ();
    }
    descriptor.setLocalName (nameMapper.mapTypeToElementName (propertyName));
    descriptor.setPropertyName (getPropertyName ());
    descriptor.setPropertyType (getPropertyType ());
}
",256,270
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BeanProperty.java,"
private ElementDescriptor createDescriptorForStandard (Expression propertyExpression, Updater propertyUpdater, IntrospectionConfiguration configuration) {
    ElementDescriptor result;
    ElementDescriptor elementDescriptor = new ElementDescriptor ();
    elementDescriptor.setContextExpression (propertyExpression);
    if (propertyUpdater != null) {
        elementDescriptor.setUpdater (propertyUpdater);
    }
    elementDescriptor.setHollow (true);
    result = elementDescriptor;
    configureDescriptor (result, configuration);
    return result;
}
",278,299
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BeanProperty.java,"
private ElementDescriptor createDescriptorForMap (IntrospectionConfiguration configuration, Expression propertyExpression) {
    ElementDescriptor result;
    ElementDescriptor entryDescriptor = new ElementDescriptor ();
    entryDescriptor.setContextExpression (new IteratorExpression (propertyExpression));
    entryDescriptor.setLocalName (""entry"");
    entryDescriptor.setPropertyName (getPropertyName ());
    entryDescriptor.setPropertyType (getPropertyType ());
    ElementDescriptor keyDescriptor = new ElementDescriptor (""key"");
    keyDescriptor.setHollow (true);
    entryDescriptor.addElementDescriptor (keyDescriptor);
    ElementDescriptor valueDescriptor = new ElementDescriptor (""value"");
    valueDescriptor.setHollow (true);
    entryDescriptor.addElementDescriptor (valueDescriptor);
    if (configuration.isWrapCollectionsInElement ()) {
        ElementDescriptor wrappingDescriptor = new ElementDescriptor ();
        wrappingDescriptor.setElementDescriptors (new ElementDescriptor [] {entryDescriptor});
        NameMapper nameMapper = configuration.getElementNameMapper ();
        wrappingDescriptor.setLocalName (nameMapper.mapTypeToElementName (propertyName));
        result = wrappingDescriptor;
    }
    else {
        result = entryDescriptor;
    }
    result.setCollective (true);
    return result;
}
",307,349
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BeanProperty.java,"
private ElementDescriptor createDescriptorForCollective (IntrospectionConfiguration configuration, Updater propertyUpdater, Expression propertyExpression) {
    ElementDescriptor result;
    ElementDescriptor loopDescriptor = new ElementDescriptor ();
    loopDescriptor.setContextExpression (new IteratorExpression (propertyExpression));
    loopDescriptor.setPropertyName (getPropertyName ());
    loopDescriptor.setPropertyType (getPropertyType ());
    loopDescriptor.setHollow (true);
    loopDescriptor.setUpdater (propertyUpdater);
    loopDescriptor.setCollective (true);
    if (configuration.isWrapCollectionsInElement ()) {
        ElementDescriptor wrappingDescriptor = new ElementDescriptor ();
        wrappingDescriptor.setElementDescriptors (new ElementDescriptor [] {loopDescriptor});
        wrappingDescriptor.setLocalName (configuration.getElementNameMapper ().mapTypeToElementName (propertyName));
        result = wrappingDescriptor;
    }
    else {
        result = loopDescriptor;
    }
    return result;
}
",358,394
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BeanProperty.java,"
private NodeDescriptor createDescriptorForPrimitive (IntrospectionConfiguration configuration, Expression propertyExpression, Updater propertyUpdater) {
    Log log = configuration.getIntrospectionLog ();
    NodeDescriptor descriptor;
    if (log.isTraceEnabled ()) {
        log.trace (""Primitive type: "" + getPropertyName ());
    }
    SimpleTypeMapper.Binding binding = configuration.getSimpleTypeMapper ().bind (propertyName, propertyType, configuration);
    if (SimpleTypeMapper.Binding.ATTRIBUTE.equals (binding)) {
        if (log.isTraceEnabled ()) {
            log.trace (""Adding property as attribute: "" + getPropertyName ());
        }
        descriptor = new AttributeDescriptor ();
    }
    else {
        if (log.isTraceEnabled ()) {
            log.trace (""Adding property as element: "" + getPropertyName ());
        }
        descriptor = new ElementDescriptor ();
    }
    descriptor.setTextExpression (propertyExpression);
    if (propertyUpdater != null) {
        descriptor.setUpdater (propertyUpdater);
    }
    configureDescriptor (descriptor, configuration);
    return descriptor;
}
",405,444
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalElement.java,"
public GlobalElement () {
}
",37,37
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalElement.java,"
public GlobalElement (String name, String type) {
    setName (name);
    setType (type);
}
",39,43
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalElement.java,"
public GlobalElement (String name, GlobalComplexType complexType) {
    setName (name);
    setComplexType (complexType);
}
",45,49
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalElement.java,"
public String getName () {
    return name;
}
",58,61
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalElement.java,"
public void setName (String string) {
    name = string;
}
",67,70
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalElement.java,"
public String getType () {
    return type;
}
",76,79
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalElement.java,"
public void setType (String string) {
    type = string;
}
",85,88
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalElement.java,"
public GlobalComplexType getComplexType () {
    return complexType;
}
",95,98
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalElement.java,"
public void setComplexType (GlobalComplexType type) {
    this.type = type.getName ();
    complexType = type;
}
",105,109
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalElement.java,"
public boolean equals (Object obj) {
    boolean result = false;
    if (obj instanceof GlobalElement) {
        GlobalElement element = (GlobalElement) obj;
        result = isEqual (type, element.type) && isEqual (name, element.name);
    }
    return result;
}
",111,121
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalElement.java,"
public int hashCode () {
    return 0;
}
",123,126
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalElement.java,"
private boolean isEqual (String one, String two) {
    boolean result = false;
    if (one == null) {
        result = (two == null);
    }
    else {
        result = one.equals (two);
    }
    return result;
}
",134,147
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalElement.java,"
public String toString () {
    StringBuffer buffer = new StringBuffer ();
    buffer.append (""<xsd:element name='"");
    buffer.append (name);
    buffer.append (""' type='"");
    buffer.append (type);
    buffer.append (""'>"");
    if (complexType != null) {
        buffer.append (complexType);
    }
    buffer.append (""</xsd:element>"");
    return buffer.toString ();
}
",149,164
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Schema.java,"
public Schema () {
    this (new XMLIntrospector ());
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Schema.java,"
public Schema (XMLIntrospector introspector) {
    this.introspector = introspector;
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Schema.java,"
public XMLBeanInfo introspect (Class type) throws IntrospectionException {
    return introspector.introspect (type);
}
",61,64
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Schema.java,"
public List getComplexTypes () {
    return complexTypes;
}
",70,73
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Schema.java,"
public void addComplexType (GlobalComplexType complexType) {
    complexTypes.add (complexType);
}
",80,83
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Schema.java,"
public List getElements () {
    return elements;
}
",90,93
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Schema.java,"
public void addElement (GlobalElement element) {
    elements.add (element);
}
",99,102
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Schema.java,"
public List getSimpleTypes () {
    return simpleTypes;
}
",108,111
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Schema.java,"
public void addSimpleType (SimpleType simpleType) {
    simpleTypes.add (simpleType);
}
",117,120
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Schema.java,"
public void addGlobalElementType (TranscriptionConfiguration configuration, ElementDescriptor elementDescriptor) throws IntrospectionException {
    GlobalElement element = new GlobalElement (elementDescriptor.getLocalName (), configuration.getSchemaTypeNamingStrategy ().nameSchemaType (elementDescriptor));
    addElement (element);
    addGlobalComplexType (configuration, elementDescriptor);
}
",127,136
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Schema.java,"
public GlobalComplexType addGlobalComplexType (TranscriptionConfiguration configuration, ElementDescriptor elementDescriptor) throws IntrospectionException {
    GlobalComplexType type = null;
    for (Iterator it = complexTypes.iterator (); it.hasNext ();) {
        GlobalComplexType complexType = (GlobalComplexType) it.next ();
        if (complexType.matches (elementDescriptor)) {
            type = complexType;
            break;
        }
    }
    if (type == null) {
        type = new GlobalComplexType (configuration, elementDescriptor, this);
        addComplexType (type);
        type.fill (configuration, elementDescriptor, this);
    }
    return type;
}
",148,167
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Schema.java,"
public boolean equals (Object obj) {
    boolean result = false;
    if (obj instanceof Schema) {
        Schema schema = (Schema) obj;
        result = equalContents (elements, schema.elements) && equalContents (complexTypes, schema.complexTypes) && equalContents (simpleTypes, schema.simpleTypes);
    }
    return result;
}
",169,181
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Schema.java,"
private boolean equalContents (Collection one, Collection two) {
    if (one.size () != two.size ()) {
        return false;
    }
    for (Iterator it = one.iterator (); it.hasNext ();) {
        Object object = it.next ();
        if (! two.contains (object)) {
            return false;
        }
    }
    return true;
}
",183,199
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Schema.java,"
public int hashCode () {
    return 0;
}
",201,204
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Schema.java,"
public String toString () {
    StringBuffer buffer = new StringBuffer ();
    buffer.append (""<?xml version='1.0'?>"");
    buffer.append (""<xsd:schema xmlns:xsd='http://www.w3c.org/2001/XMLSchema'>"");
    for (Iterator it = simpleTypes.iterator (); it.hasNext ();) {
        buffer.append (it.next ());
    }
    for (Iterator it = complexTypes.iterator (); it.hasNext ();) {
        buffer.append (it.next ());
    }
    for (Iterator it = elements.iterator (); it.hasNext ();) {
        buffer.append (it.next ());
    }
    buffer.append (""</xsd:schema>"");
    return buffer.toString ();
}
",208,231
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/LocalElement.java,"
public LocalElement (String name) {
    this.name = name;
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/LocalElement.java,"
public LocalElement (ElementDescriptor descriptor, Schema schema) throws IntrospectionException {
    setName (descriptor.getLocalName ());
    if (descriptor.isCollective ()) {
        setMaxOccurs (""unbounded"");
    }
}
",42,49
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/LocalElement.java,"
public String getName () {
    return name;
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/LocalElement.java,"
public void setName (String string) {
    name = string;
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/LocalElement.java,"
public int getMinOccurs () {
    return minOccurs;
}
",61,64
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/LocalElement.java,"
public void setMinOccurs (int minOccurs) {
    this.minOccurs = minOccurs;
}
",66,69
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/LocalElement.java,"
public String getMaxOccurs () {
    return maxOccurs;
}
",71,74
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/LocalElement.java,"
public void setMaxOccurs (String maxOccurs) {
    this.maxOccurs = maxOccurs;
}
",76,79
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/ComplexLocalElement.java,"
public ComplexLocalElement (TranscriptionConfiguration configuration, ElementDescriptor descriptor, Schema schema) throws IntrospectionException {
    super (descriptor, schema);
    setType (new LocalComplexType (configuration, descriptor, schema));
}
",32,36
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/ComplexLocalElement.java,"
public LocalComplexType getType () {
    return type;
}
",38,41
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/ComplexLocalElement.java,"
public void setType (LocalComplexType type) {
    this.type = type;
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SchemaTranscriber.java,"
public SchemaTranscriber () {
}
",49,49
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SchemaTranscriber.java,"
public TranscriptionConfiguration getConfiguration () {
    return configuration;
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SchemaTranscriber.java,"
public void setConfiguration (TranscriptionConfiguration configuration) {
    this.configuration = configuration;
}
",64,67
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SchemaTranscriber.java,"
public XMLIntrospector getXMLIntrospector () {
    return introspector;
}
",73,76
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SchemaTranscriber.java,"
public void setXMLIntrospector (XMLIntrospector introspector) {
    this.introspector = introspector;
}
",86,89
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SchemaTranscriber.java,"
public Schema generate (Class clazz) throws IntrospectionException {
    XMLBeanInfo beanInfo = introspector.introspect (clazz);
    return generate (beanInfo);
}
",96,100
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SchemaTranscriber.java,"
public Schema generate (XMLBeanInfo xmlBeanInfo) throws IntrospectionException {
    ElementDescriptor elementDescriptor = xmlBeanInfo.getElementDescriptor ();
    Schema schema = new Schema (introspector);
    schema.addGlobalElementType (configuration, elementDescriptor);
    return schema;
}
",107,113
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SchemaTranscriber.java,"
public IntrospectionConfiguration createSchemaIntrospectionConfiguration () {
    IntrospectionConfiguration configuration = new IntrospectionConfiguration ();
    configuration.getPrefixMapper ().setPrefix (W3C_SCHEMA_URI, ""xsd"");
    configuration.getPrefixMapper ().setPrefix (W3C_SCHEMA_INSTANCE_URI, ""xsi"");
    return configuration;
}
",125,131
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SchemaTranscriber.java,"
public BindingConfiguration createSchemaBindingConfiguration () {
    BindingConfiguration configuration = new BindingConfiguration ();
    configuration.setMapIDs (false);
    return configuration;
}
",141,146
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Attribute.java,"
public Attribute () {
}
",35,35
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Attribute.java,"
public Attribute (String name, String type) {
    setName (name);
    setType (type);
}
",37,41
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Attribute.java,"
public Attribute (AttributeDescriptor attributeDescriptor) {
    this (attributeDescriptor.getQualifiedName (), ""xsd:string"");
}
",43,46
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Attribute.java,"
public String getName () {
    return name;
}
",53,56
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Attribute.java,"
public void setName (String string) {
    name = string;
}
",62,65
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Attribute.java,"
public String getType () {
    return type;
}
",71,74
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Attribute.java,"
public void setType (String string) {
    type = string;
}
",80,83
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Attribute.java,"
public int hashCode () {
    return 0;
}
",85,88
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Attribute.java,"
public boolean equals (Object obj) {
    boolean result = false;
    if (obj instanceof Attribute) {
        Attribute attribute = (Attribute) obj;
        result = isEqual (type, attribute.type) && isEqual (name, attribute.name);
    }
    return result;
}
",90,100
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Attribute.java,"
private boolean isEqual (String one, String two) {
    boolean result = false;
    if (one == null) {
        result = (two == null);
    }
    else {
        result = one.equals (two);
    }
    return result;
}
",108,121
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/Attribute.java,"
public String toString () {
    return ""<xsd:attribute name='"" + name + ""' type='"" + type + ""'/>"";
}
",123,126
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/LocalComplexType.java,"
public LocalComplexType () {
}
",35,35
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/LocalComplexType.java,"
public LocalComplexType (TranscriptionConfiguration configuration, ElementDescriptor elementDescriptor, Schema schema) throws IntrospectionException {
    super (configuration, elementDescriptor, schema);
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/LocalComplexType.java,"
public boolean equals (Object obj) {
    boolean result = false;
    if (obj instanceof GlobalComplexType) {
        GlobalComplexType complexType = (GlobalComplexType) obj;
        result = equalContents (attributes, complexType.attributes) && equalContents (elements, complexType.elements);
    }
    return result;
}
",42,54
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/LocalComplexType.java,"
private boolean equalContents (Collection one, Collection two) {
    if (one.size () != two.size ()) {
        return false;
    }
    for (Iterator it = one.iterator (); it.hasNext ();) {
        Object object = it.next ();
        if (! two.contains (object)) {
            return false;
        }
    }
    return true;
}
",57,73
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/LocalComplexType.java,"
public int hashCode () {
    return 0;
}
",75,78
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/LocalComplexType.java,"
private boolean isEqual (String one, String two) {
    boolean result = false;
    if (one == null) {
        result = (two == null);
    }
    else {
        result = one.equals (two);
    }
    return result;
}
",86,99
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/LocalComplexType.java,"
public String toString () {
    StringBuffer buffer = new StringBuffer ();
    buffer.append (""<xsd:complexType>"");
    buffer.append (""<xsd:sequence>"");
    for (Iterator it = elements.iterator (); it.hasNext ();) {
        buffer.append (it.next ());
    }
    buffer.append (""</xsd:sequence>"");
    for (Iterator it = attributes.iterator (); it.hasNext ();) {
        buffer.append (it.next ());
    }
    buffer.append (""</xsd:complexType>"");
    return buffer.toString ();
}
",101,118
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalComplexType.java,"
public GlobalComplexType () {
}
",38,38
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalComplexType.java,"
public GlobalComplexType (TranscriptionConfiguration configuration, ElementDescriptor elementDescriptor, Schema schema) throws IntrospectionException {
    super (configuration, elementDescriptor, schema);
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalComplexType.java,"
protected void init (TranscriptionConfiguration configuration, ElementDescriptor elementDescriptor, Schema schema) throws IntrospectionException {
    this.configuration = configuration;
    setName (nameFromDescriptor (elementDescriptor));
}
",49,53
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalComplexType.java,"
protected void fill (TranscriptionConfiguration configuration, ElementDescriptor elementDescriptor, Schema schema) throws IntrospectionException {
    elementDescriptor = fillDescriptor (elementDescriptor, schema);
    super.init (configuration, elementDescriptor, schema);
}
",63,67
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalComplexType.java,"
private String nameFromDescriptor (ElementDescriptor elementDescriptor) {
    return configuration.getSchemaTypeNamingStrategy ().nameSchemaType (elementDescriptor);
}
",69,72
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalComplexType.java,"
public boolean matches (ElementDescriptor elementDescriptor) {
    String nameFromDescriptor = nameFromDescriptor (elementDescriptor);
    return nameFromDescriptor.equals (getName ());
}
",80,84
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalComplexType.java,"
public String getName () {
    return name;
}
",90,93
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalComplexType.java,"
public void setName (String string) {
    name = string;
}
",99,102
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalComplexType.java,"
public boolean equals (Object obj) {
    boolean result = false;
    if (obj instanceof GlobalComplexType) {
        GlobalComplexType complexType = (GlobalComplexType) obj;
        result = isEqual (name, complexType.name) && equalContents (attributes, complexType.attributes) && equalContents (elements, complexType.elements);
    }
    return result;
}
",104,116
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalComplexType.java,"
public int hashCode () {
    return 0;
}
",118,121
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalComplexType.java,"
private boolean equalContents (Collection one, Collection two) {
    if (one.size () != two.size ()) {
        return false;
    }
    for (Iterator it = one.iterator (); it.hasNext ();) {
        Object object = it.next ();
        if (! two.contains (object)) {
            return false;
        }
    }
    return true;
}
",123,139
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalComplexType.java,"
private boolean isEqual (String one, String two) {
    boolean result = false;
    if (one == null) {
        result = (two == null);
    }
    else {
        result = one.equals (two);
    }
    return result;
}
",147,160
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/GlobalComplexType.java,"
public String toString () {
    StringBuffer buffer = new StringBuffer ();
    buffer.append (""<xsd:complexType name='"");
    buffer.append (name);
    buffer.append (""'>"");
    buffer.append (""<xsd:sequence>"");
    for (Iterator it = elements.iterator (); it.hasNext ();) {
        buffer.append (it.next ());
    }
    buffer.append (""</xsd:sequence>"");
    for (Iterator it = attributes.iterator (); it.hasNext ();) {
        buffer.append (it.next ());
    }
    buffer.append (""</xsd:complexType>"");
    return buffer.toString ();
}
",162,181
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/DefaultDataTypeMapper.java,"
public String toXMLSchemaDataType (Class type) {
    String result = ""xsd:string"";
    if (String.class.equals (type)) {
        result = ""xsd:string"";
    }
    else if (BigInteger.class.equals (type)) {
        result = ""xsd:integer"";
    }
    else if (Integer.TYPE.equals (type)) {
        result = ""xsd:int"";
    }
    else if (Integer.class.equals (type)) {
        result = ""xsd:int"";
    }
    else if (Long.TYPE.equals (type)) {
        result = ""xsd:long"";
    }
    else if (Long.class.equals (type)) {
        result = ""xsd:long"";
    }
    else if (Short.TYPE.equals (type)) {
        result = ""xsd:short"";
    }
    else if (Short.class.equals (type)) {
        result = ""xsd:short"";
    }
    else if (BigDecimal.class.equals (type)) {
        result = ""xsd:decimal"";
    }
    else if (Float.TYPE.equals (type)) {
        result = ""xsd:float"";
    }
    else if (Float.class.equals (type)) {
        result = ""xsd:float"";
    }
    else if (Double.TYPE.equals (type)) {
        result = ""xsd:double"";
    }
    else if (Double.class.equals (type)) {
        result = ""xsd:double"";
    }
    else if (Boolean.TYPE.equals (type)) {
        result = ""xsd:boolean"";
    }
    else if (Boolean.class.equals (type)) {
        result = ""xsd:boolean"";
    }
    else if (Byte.TYPE.equals (type)) {
        result = ""xsd:byte"";
    }
    else if (Byte.class.equals (type)) {
        result = ""xsd:byte"";
    }
    else if (java.util.Date.class.equals (type)) {
        result = ""xsd:dateTime"";
    }
    else if (java.sql.Date.class.equals (type)) {
        result = ""xsd:date"";
    }
    else if (java.sql.Time.class.equals (type)) {
        result = ""xsd:time"";
    }
    return result;
}
",36,141
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/ComplexType.java,"
public ComplexType () {
}
",43,45
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/ComplexType.java,"
public ComplexType (TranscriptionConfiguration configuration, ElementDescriptor elementDescriptor, Schema schema) throws IntrospectionException {
    elementDescriptor = fillDescriptor (elementDescriptor, schema);
    init (configuration, elementDescriptor, schema);
}
",47,53
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/ComplexType.java,"
protected ElementDescriptor fillDescriptor (ElementDescriptor elementDescriptor, Schema schema) throws IntrospectionException {
    if (elementDescriptor.isHollow ()) {
        Class type = elementDescriptor.getSingularPropertyType ();
        if (type == null) {
            type = elementDescriptor.getPropertyType ();
        }
        if (type == null) {
        }
        else {
            XMLBeanInfo filledBeanInfo = schema.introspect (type);
            elementDescriptor = filledBeanInfo.getElementDescriptor ();
        }
    }
    return elementDescriptor;
}
",63,89
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/ComplexType.java,"
protected void init (TranscriptionConfiguration configuration, ElementDescriptor elementDescriptor, Schema schema) throws IntrospectionException {
    AttributeDescriptor [] attributeDescriptors = elementDescriptor.getAttributeDescriptors ();
    for (int i = 0, length = attributeDescriptors.length; i < length; i ++) {
        String uri = attributeDescriptors [i].getURI ();
        if (! SchemaTranscriber.W3C_SCHEMA_INSTANCE_URI.equals (uri)) {
            attributes.add (new Attribute (attributeDescriptors [i]));
        }
    }
    ElementDescriptor [] elementDescriptors = elementDescriptor.getElementDescriptors ();
    for (int i = 0, length = elementDescriptors.length; i < length; i ++) {
        if (elementDescriptors [i].isHollow ()) {
            elements.add (new ElementReference (configuration, elementDescriptors [i], schema));
        }
        else if (elementDescriptors [i].isSimple ()) {
            elements.add (new SimpleLocalElement (configuration, elementDescriptors [i], schema));
        }
        else {
            elements.add (new ComplexLocalElement (configuration, elementDescriptors [i], schema));
        }
    }
}
",91,130
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/ComplexType.java,"
public List getElements () {
    return elements;
}
",137,140
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/ComplexType.java,"
public void addElement (ElementReference element) {
    elements.add (element);
}
",147,150
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/ComplexType.java,"
public void addElement (LocalElement element) {
    elements.add (element);
}
",157,160
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/ComplexType.java,"
public List getAttributes () {
    return attributes;
}
",167,170
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/ComplexType.java,"
public void addAttribute (Attribute attribute) {
    attributes.add (attribute);
}
",177,180
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/strategy/impl/QualifiedPropertyTypeSchemaNamingStrategy.java,"
public String nameSchemaType (ElementDescriptor elementDescriptor) {
    String result = ""xsd:anyType"";
    Class type = elementDescriptor.getPropertyType ();
    if (type != null) {
        result = type.getName ();
    }
    return result;
}
",34,44
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/strategy/impl/QualifiedPropertyTypeSchemaNamingStrategy.java,"
public String toString () {
    return ""Fully Qualified Type"";
}
",49,52
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/strategy/impl/ClassNameSchemaNamingStrategy.java,"
public String nameSchemaType (ElementDescriptor elementDescriptor) {
    String result = ""xsd:anyType"";
    Class type = elementDescriptor.getPropertyType ();
    if (type != null) {
        String fullName = elementDescriptor.getPropertyType ().getName ();
        int lastIndexOf = fullName.lastIndexOf ('.');
        result = fullName.substring (++ lastIndexOf);
    }
    return result;
}
",34,46
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/strategy/impl/ClassNameSchemaNamingStrategy.java,"
public String toString () {
    return ""Simple Class Name"";
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/strategy/impl/ElementSchemaNamingStrategy.java,"
public String nameSchemaType (ElementDescriptor descriptor) {
    return descriptor.getLocalName ();
}
",35,38
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/strategy/impl/ElementSchemaNamingStrategy.java,"
public String toString () {
    return ""Element Schema Type Naming Strategy"";
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SimpleLocalElement.java,"
public SimpleLocalElement (String name, String type) {
    super (name);
    setType (type);
}
",33,37
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SimpleLocalElement.java,"
public SimpleLocalElement (TranscriptionConfiguration configuration, ElementDescriptor descriptor, Schema schema) throws IntrospectionException {
    super (descriptor, schema);
    setType (configuration.getDataTypeMapper ().toXMLSchemaDataType (descriptor.getPropertyType ()));
}
",39,47
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SimpleLocalElement.java,"
public String getType () {
    return type;
}
",49,52
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SimpleLocalElement.java,"
public void setType (String string) {
    type = string;
}
",54,57
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SimpleLocalElement.java,"
public int hashCode () {
    return getName ().hashCode ();
}
",59,62
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SimpleLocalElement.java,"
public boolean equals (Object obj) {
    boolean result = false;
    if (obj instanceof SimpleLocalElement) {
        SimpleLocalElement simpleLocalElement = (SimpleLocalElement) obj;
        result = isEqual (getName (), simpleLocalElement.getName ()) && isEqual (getType (), simpleLocalElement.getType ());
    }
    return result;
}
",64,75
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SimpleLocalElement.java,"
private boolean isEqual (String one, String two) {
    if (one == null) {
        return (two == null);
    }
    return one.equals (two);
}
",77,85
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SimpleLocalElement.java,"
public String toString () {
    StringBuffer buffer = new StringBuffer ();
    buffer.append (""<element name='"");
    buffer.append (getName ());
    buffer.append (""' type='"");
    buffer.append (getType ());
    buffer.append (""'/>"");
    return buffer.toString ();
}
",87,96
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SimpleType.java,"
public String getName () {
    return name;
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SimpleType.java,"
public void setName (String name) {
    this.name = name;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SimpleType.java,"
public boolean equals (Object obj) {
    boolean result = false;
    if (obj instanceof SimpleType) {
        SimpleType simpleType = (SimpleType) obj;
        result = isEqual (name, simpleType.name);
    }
    return result;
}
",50,59
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SimpleType.java,"
public int hashCode () {
    return 0;
}
",61,64
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SimpleType.java,"
private boolean isEqual (String one, String two) {
    boolean result = false;
    if (one == null) {
        result = (two == null);
    }
    else {
        result = one.equals (two);
    }
    return result;
}
",73,86
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/SimpleType.java,"
public String toString () {
    return ""<xsd:simpleType name='"" + name + ""'/>"";
}
",88,91
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/TranscriptionConfiguration.java,"
public DataTypeMapper getDataTypeMapper () {
    return dataTypeMapper;
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/TranscriptionConfiguration.java,"
public void setDataTypeMapper (DataTypeMapper mapper) {
    dataTypeMapper = mapper;
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/TranscriptionConfiguration.java,"
public SchemaTypeNamingStrategy getSchemaTypeNamingStrategy () {
    return schemaTypeNamingStrategy;
}
",61,64
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/TranscriptionConfiguration.java,"
public void setSchemaTypeNamingStrategy (SchemaTypeNamingStrategy schemaTypeNamingStrategy) {
    this.schemaTypeNamingStrategy = schemaTypeNamingStrategy;
}
",71,74
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/ElementReference.java,"
public ElementReference (String string, GlobalComplexType complexType) {
    super (string, complexType);
}
",35,39
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/ElementReference.java,"
public ElementReference (String name, String type) {
    super (name, type);
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/ElementReference.java,"
public ElementReference (TranscriptionConfiguration configuration, ElementDescriptor elementDescriptor, Schema schema) throws IntrospectionException {
    setName (elementDescriptor.getLocalName ());
    if (elementDescriptor.isHollow ()) {
        setComplexType (schema.addGlobalComplexType (configuration, elementDescriptor));
        if (elementDescriptor.isCollective ()) {
            maxOccurs = ""unbounded"";
        }
    }
    else {
        setType (""xsd:string"");
    }
}
",46,62
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/ElementReference.java,"
public int getMinOccurs () {
    return minOccurs;
}
",64,67
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/ElementReference.java,"
public void setMinOccurs (int minOccurs) {
    this.minOccurs = minOccurs;
}
",69,72
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/ElementReference.java,"
public String getMaxOccurs () {
    return maxOccurs;
}
",74,77
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/schema/ElementReference.java,"
public void setMaxOccurs (String maxOccurs) {
    this.maxOccurs = maxOccurs;
}
",79,82
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/NamespacePrefixMapper.java,"
public String getPrefix (String namespaceUri) {
    String prefix = (String) prefixesByUri.get (namespaceUri);
    if (prefix == null) {
        prefix = generatePrefix (namespaceUri);
        setPrefix (namespaceUri, prefix);
    }
    return prefix;
}
",47,56
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/NamespacePrefixMapper.java,"
public void setPrefix (String namespaceUri, String prefix) {
    prefixesByUri.put (namespaceUri, prefix);
}
",65,68
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/NamespacePrefixMapper.java,"
protected String generatePrefix (String namespaceUri) {
    String prefix = ""bt"" + ++ count;
    if (prefixesByUri.values ().contains (prefix)) {
        prefix = generatePrefix (namespaceUri);
    }
    return prefix;
}
",78,86
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/ElementSuppressionStrategy.java,"
public boolean suppress (ElementDescriptor descr) {
    return false;
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/DefaultActionMappingStrategy.java,"
public MappingAction getMappingAction (String namespace, String name, Attributes attributes, ReadContext context) throws Exception {
    MappingAction result = MappingAction.EMPTY;
    ElementDescriptor activeDescriptor = context.getCurrentDescriptor ();
    if (activeDescriptor != null) {
        if (activeDescriptor.isHollow ()) {
            if (isArrayDescriptor (activeDescriptor)) {
                result = ArrayBindAction.createMappingAction (activeDescriptor);
            }
            else {
                result = BeanBindAction.INSTANCE;
            }
        }
        else if (activeDescriptor.isSimple ()) {
            result = SimpleTypeBindAction.INSTANCE;
        }
        else {
            ElementDescriptor [] descriptors = activeDescriptor.getElementDescriptors ();
            if (descriptors.length == 1) {
                ElementDescriptor childDescriptor = descriptors [0];
                if (childDescriptor.isHollow () && isArrayDescriptor (childDescriptor)) {
                    result = ArrayBindAction.createMappingAction (childDescriptor);
                }
            }
        }
    }
    return result;
}
",44,87
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/DefaultActionMappingStrategy.java,"
private boolean isArrayDescriptor (ElementDescriptor descriptor) {
    boolean result = false;
    if (descriptor != null) {
        Class propertyType = descriptor.getPropertyType ();
        if (propertyType != null) {
            result = propertyType.isArray ();
        }
    }
    return result;
}
",94,106
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/HyphenatedNameMapper.java,"
public HyphenatedNameMapper () {
}
",47,49
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/HyphenatedNameMapper.java,"
public HyphenatedNameMapper (boolean upperCase) {
    this.upperCase = upperCase;
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/HyphenatedNameMapper.java,"
public HyphenatedNameMapper (boolean upperCase, String separator) {
    this.upperCase = upperCase;
    this.separator = separator;
}
",69,73
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/HyphenatedNameMapper.java,"
public String mapTypeToElementName (String typeName) {
    int length = typeName.length ();
    if (length == 0) {
        return """";
    }
    StringBuffer sb = new StringBuffer ();
    sb.append (convertChar (typeName.charAt (0)));
    for (int i = 1; i < length; i ++) {
        if (Character.isUpperCase (typeName.charAt (i))) {
            sb.append (separator);
            sb.append (convertChar (typeName.charAt (i)));
        }
        else {
            if (upperCase) {
                sb.append (convertChar (typeName.charAt (i)));
            }
            else {
                sb.append (typeName.charAt (i));
            }
        }
    }
    return sb.toString ();
}
",94,128
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/HyphenatedNameMapper.java,"
public String getSeparator () {
    return separator;
}
",137,140
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/HyphenatedNameMapper.java,"
public void setSeparator (String separator) {
    this.separator = separator;
}
",147,150
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/HyphenatedNameMapper.java,"
public boolean isUpperCase () {
    return upperCase;
}
",161,164
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/HyphenatedNameMapper.java,"
public void setUpperCase (boolean upperCase) {
    this.upperCase = upperCase;
}
",172,175
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/HyphenatedNameMapper.java,"
protected char convertChar (char ch) {
    if (upperCase) {
        return Character.toUpperCase (ch);
    }
    else {
        return Character.toLowerCase (ch);
    }
}
",187,198
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/HyphenatedNameMapper.java,"
public String toString () {
    return ""Hyphenated Name Mapper"";
}
",204,207
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/BaseMixedContentEncodingStrategy.java,"
protected String escapeCharacters (String bodyContent) {
    return XMLUtils.escapeBodyValue (bodyContent);
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/BaseMixedContentEncodingStrategy.java,"
protected String encodeInCDATA (String bodyContent) {
    StringBuffer buffer = new StringBuffer (bodyContent);
    buffer.ensureCapacity (12);
    XMLUtils.escapeCDATAContent (buffer);
    return buffer.insert (0, ""<![CDATA["").append (""]]>"").toString ();
}
",56,62
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/BaseMixedContentEncodingStrategy.java,"
public String encode (String bodyContent, ElementDescriptor element) {
    if (encodeAsCDATA (element)) {
        return encodeInCDATA (bodyContent);
    }
    return escapeCharacters (bodyContent);
}
",72,80
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/IdStoringStrategy.java,"
public static IdStoringStrategy createDefault () {
    return new DefaultIdStoringStrategy ();
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/AttributeSuppressionStrategy.java,"
public boolean suppress (AttributeDescriptor description) {
    return false;
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/DefaultPluralStemmer.java,"
public ElementDescriptor findPluralDescriptor (String propertyName, Map map) {
    int foundKeyCount = 0;
    String keyFound = null;
    ElementDescriptor answer = (ElementDescriptor) map.get (propertyName + ""s"");
    if (answer == null && ! propertyName.endsWith (""y"")) {
        answer = (ElementDescriptor) map.get (propertyName + ""es"");
    }
    if (answer == null) {
        int length = propertyName.length ();
        if (propertyName.endsWith (""y"") && length > 1) {
            String key = propertyName.substring (0, length - 1) + ""ies"";
            answer = (ElementDescriptor) map.get (key);
        }
        if (answer == null) {
            for (Iterator iter = map.keySet ().iterator (); iter.hasNext ();) {
                String key = (String) iter.next ();
                if (key.startsWith (propertyName)) {
                    if (answer == null) {
                        answer = (ElementDescriptor) map.get (key);
                        if (key.equals (propertyName)) {
                            break;
                        }
                        foundKeyCount ++;
                        keyFound = key;
                    }
                    else {
                        if (keyFound.length () > key.length ()) {
                            answer = (ElementDescriptor) map.get (key);
                            keyFound = key;
                        }
                        foundKeyCount ++;
                    }
                }
            }
        }
    }
    if (foundKeyCount > 1) {
        log.warn (""More than one type matches, using closest match "" + answer.getQualifiedName ());
    }
    return answer;
}
",59,120
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/impl/OverrideCollectiveTypeStategy.java,"
public OverrideCollectiveTypeStategy () {
    this (CollectiveTypeStrategy.DEFAULT);
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/impl/OverrideCollectiveTypeStategy.java,"
public OverrideCollectiveTypeStategy (CollectiveTypeStrategy delegate) {
    super ();
    this.delegate = delegate;
    collectiveClasses = new ArrayList ();
    notCollectiveClasses = new ArrayList ();
}
",51,57
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/impl/OverrideCollectiveTypeStategy.java,"
public void overrideCollective (Class type) {
    collectiveClasses.add (type);
}
",63,66
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/impl/OverrideCollectiveTypeStategy.java,"
public void overrideNotCollective (Class type) {
    notCollectiveClasses.add (type);
}
",72,75
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/impl/OverrideCollectiveTypeStategy.java,"
public boolean isCollective (Class type) {
    boolean result = delegate.isCollective (type);
    if (collectiveClasses.contains (type)) {
        result = true;
    }
    else if (notCollectiveClasses.contains (type)) {
        result = false;
    }
    return result;
}
",80,92
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/impl/propertysuppression/PackageSuppressor.java,"
public PackageSuppressor (String suppressedPackage) {
    if (suppressedPackage.endsWith ("".*"")) {
        exact = false;
        suppressedPackage = suppressedPackage.substring (0, suppressedPackage.length () - 2);
    }
    else {
        exact = true;
    }
    this.suppressedPackage = suppressedPackage;
}
",40,52
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/impl/propertysuppression/PackageSuppressor.java,"
public boolean suppressProperty (Class classContainingTheProperty, Class propertyType, String propertyName) {
    boolean result = false;
    if (propertyType != null) {
        Package propertyTypePackage = propertyType.getPackage ();
        if (propertyTypePackage != null) {
            String packageName = propertyTypePackage.getName ();
            if (exact) {
                result = suppressedPackage.equals (packageName);
            }
            else if (packageName != null) {
                result = packageName.startsWith (suppressedPackage);
            }
        }
    }
    return result;
}
",54,74
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/impl/propertysuppression/PackageSuppressor.java,"
public String toString () {
    StringBuffer buffer = new StringBuffer (""Suppressing package "");
    buffer.append (suppressedPackage);
    if (exact) {
        buffer.append (""(exact)"");
    }
    return buffer.toString ();
}
",76,85
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/PropertySuppressionStrategy.java,"
public boolean suppressProperty (Class clazz, Class propertyType, String propertyName) {
    boolean result = false;
    if (Class.class.equals (propertyType) && ""class"".equals (propertyName)) {
        result = true;
    }
    if (""empty"".equals (propertyName) && Collection.class.isAssignableFrom (clazz)) {
        result = true;
    }
    return result;
}
",40,55
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/PropertySuppressionStrategy.java,"
public String toString () {
    return ""Default Properties Suppressed"";
}
",57,60
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/PropertySuppressionStrategy.java,"
public boolean suppressProperty (Class classContainingTheProperty, Class propertyType, String propertyName) {
    boolean result = false;
    for (Iterator it = strategies.iterator (); it.hasNext ();) {
        PropertySuppressionStrategy strategy = (PropertySuppressionStrategy) it.next ();
        if (strategy.suppressProperty (classContainingTheProperty, propertyType, propertyName)) {
            result = true;
            break;
        }
    }
    return result;
}
",74,88
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/PropertySuppressionStrategy.java,"
public void addStrategy (PropertySuppressionStrategy strategy) {
    strategies.add (strategy);
}
",94,97
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/ValueSuppressionStrategy.java,"
public boolean suppressAttribute (AttributeDescriptor attributeDescriptor, String value) {
    return false;
}
",37,40
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/ValueSuppressionStrategy.java,"
public boolean suppressAttribute (AttributeDescriptor attributeDescriptor, String value) {
    return """".equals (value);
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/ValueSuppressionStrategy.java,"
public boolean suppressElement (ElementDescriptor element, String namespaceUri, String localName, String qualifiedName, Object value) {
    return false;
}
",86,89
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/CapitalizeNameMapper.java,"
public String mapTypeToElementName (String typeName) {
    if (typeName == null || typeName.length () == 0) {
        return typeName;
    }
    StringBuffer sb = new StringBuffer (typeName);
    char upperChar = Character.toUpperCase (typeName.charAt (0));
    sb.delete (0, 1);
    sb.insert (0, upperChar);
    return sb.toString ();
}
",36,47
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/CapitalizeNameMapper.java,"
public String toString () {
    return ""Capitalize Type Name Mapper"";
}
",53,56
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/DefaultObjectStringConverter.java,"
public String objectToString (Object object, Class type, String flavour, Context context) {
    if (object != null) {
        if (object instanceof Class) {
            return ((Class) object).getName ();
        }
        if (object instanceof java.util.Date && isUtilDate (type)) {
            return formatter.format ((java.util.Date) object);
        }
        else {
            return super.objectToString (object, type, flavour, context);
        }
    }
    return """";
}
",66,88
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/DefaultObjectStringConverter.java,"
public Object stringToObject (String value, Class type, String flavour, Context context) {
    if (isUtilDate (type)) {
        try {
            return formatter.parse (value);
        } catch (ParseException ex) {
            handleException (ex);
            return value;
        }
    }
    else {
        return super.stringToObject (value, type, flavour, context);
    }
}
",100,124
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/DefaultObjectStringConverter.java,"
protected void handleException (Exception e) {
    throw new ConversionException (""String to object conversion failed: "" + e.getMessage (), e);
}
",133,136
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/DefaultObjectStringConverter.java,"
private boolean isUtilDate (Class type) {
    return (java.util.Date.class.isAssignableFrom (type) && ! java.sql.Date.class.isAssignableFrom (type) && ! java.sql.Time.class.isAssignableFrom (type) && ! java.sql.Timestamp.class.isAssignableFrom (type));
}
",143,149
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/DefaultNameMapper.java,"
public String mapTypeToElementName (String typeName) {
    return typeName;
}
",44,47
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/DefaultNameMapper.java,"
public String mapTypeToElementName (String typeName) {
    return badCharacterReplacementNMapper.mapTypeToElementName (typeName);
}
",58,61
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/CollectiveTypeStrategy.java,"
public boolean isCollective (Class type) {
    if (type == null) {
        return false;
    }
    return type.isArray () || Map.class.isAssignableFrom (type) || Collection.class.isAssignableFrom (type) || Enumeration.class.isAssignableFrom (type) || Iterator.class.isAssignableFrom (type) || Map.Entry.class.isAssignableFrom (type);
}
",54,69
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/SimpleTypeMapper.java,"
private Binding (int code) {
    this.code = code;
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/SimpleTypeMapper.java,"
public boolean equals (Object obj) {
    boolean result = false;
    if (obj == this) {
        result = true;
    }
    return result;
}
",60,68
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/SimpleTypeMapper.java,"
public int hashCode () {
    return code;
}
",73,76
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/SimpleTypeMapper.java,"
public String toString () {
    String result = ""[Binding]"";
    switch (code) {
        case ELEMENT_CODE :
            result = ""[Binding: ELEMENT]"";
            break;
        case ATTRIBUTE_CODE :
            result = ""[Binding: ATTRIBUTE]"";
            break;
    }
    return result;
}
",81,95
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/MixedContentEncodingStrategy.java,"
protected boolean encodeAsCDATA (ElementDescriptor element) {
    boolean result = false;
    if (element != null) {
        String optionValue = element.getOptions ().getValue (ENCODING_OPTION_NAME);
        result = CDATA_ENCODING.equals (optionValue);
    }
    return result;
}
",70,79
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/MixedContentEncodingStrategy.java,"
protected boolean encodeAsCDATA (ElementDescriptor element) {
    return true;
}
",92,95
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/MixedContentEncodingStrategy.java,"
protected boolean encodeAsCDATA (ElementDescriptor element) {
    return false;
}
",108,111
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/MappingDerivationStrategy.java,"
public boolean useBindTimeTypeForMapping (Class propertyType, Class singluarPropertyType) {
    return true;
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/MappingDerivationStrategy.java,"
public boolean useBindTimeTypeForMapping (Class propertyType, Class singluarPropertyType) {
    return false;
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/ConvertUtilsObjectStringConverter.java,"
public String objectToString (Object object, Class type, String flavour, Context context) {
    if (object != null) {
        String text = ConvertUtils.convert (object);
        if (text != null) {
            return text;
        }
    }
    return """";
}
",41,52
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/ConvertUtilsObjectStringConverter.java,"
public Object stringToObject (String value, Class type, String flavour, Context context) {
    if (value == null || """".equals (value)) {
        return null;
    }
    return ConvertUtils.convert (value, type);
}
",65,73
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/DefaultIdStoringStrategy.java,"
public DefaultIdStoringStrategy () {
    this (new HashMap (), new HashMap ());
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/DefaultIdStoringStrategy.java,"
public DefaultIdStoringStrategy (Map idByBeanMap, Map beanByIdMap) {
    this.idByBeanMap = idByBeanMap;
    this.beanByIdMap = beanByIdMap;
}
",60,64
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/DefaultIdStoringStrategy.java,"
public String getReferenceFor (Context context, Object bean) {
    return (String) idByBeanMap.get (bean);
}
",79,82
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/DefaultIdStoringStrategy.java,"
public void setReference (Context context, Object bean, String id) {
    if (! idByBeanMap.containsKey (bean)) {
        idByBeanMap.put (bean, id);
        beanByIdMap.put (id, bean);
    }
}
",97,104
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/DefaultIdStoringStrategy.java,"
public Object getReferenced (Context context, String id) {
    return beanByIdMap.get (id);
}
",113,116
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/DefaultIdStoringStrategy.java,"
public void reset () {
    idByBeanMap.clear ();
    beanByIdMap.clear ();
}
",121,125
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/ObjectStringConverter.java,"
public String objectToString (Object object, Class type, String flavour, Context context) {
    if (object != null) {
        return object.toString ();
    }
    return """";
}
",63,70
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/ObjectStringConverter.java,"
public Object stringToObject (String value, Class type, String flavour, Context context) {
    return value;
}
",88,91
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/ObjectStringConverter.java,"
public String objectToString (Object object, Class type, Context context) {
    String flavour = getFlavour (context);
    return objectToString (object, type, flavour, context);
}
",105,109
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/ObjectStringConverter.java,"
public Object stringToObject (String value, Class type, Context context) {
    String flavour = getFlavour (context);
    return stringToObject (value, type, flavour, context);
}
",123,127
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/ObjectStringConverter.java,"
private String getFlavour (Context context) {
    String flavour = null;
    Options options = context.getOptions ();
    if (options != null) {
        flavour = options.getValue (FLAVOUR_OPTION_NAME);
    }
    return flavour;
}
",133,142
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/TypeBindingStrategy.java,"
private BindingType (int type) {
    this.type = type;
}
",74,77
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/TypeBindingStrategy.java,"
public boolean equals (Object object) {
    boolean result = false;
    if (object instanceof BindingType) {
        BindingType bindingType = (BindingType) object;
        result = (type == bindingType.type);
    }
    return result;
}
",83,92
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/TypeBindingStrategy.java,"
public int hashCode () {
    return type;
}
",97,100
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/TypeBindingStrategy.java,"
public String toString () {
    StringBuffer buffer = new StringBuffer ();
    buffer.append (""BindingType: "");
    switch (type) {
        case (COMPLEX_INDICATOR) :
            buffer.append (""COMPLEX"");
            break;
        case (PRIMITIVE_INDICATOR) :
            buffer.append (""PRIMITIVE"");
            break;
    }
    return buffer.toString ();
}
",105,121
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/TypeBindingStrategy.java,"
public BindingType bindingType (Class type) {
    BindingType result = BindingType.COMPLEX;
    if (isStandardPrimitive (type)) {
        result = BindingType.PRIMITIVE;
    }
    return result;
}
",165,174
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/TypeBindingStrategy.java,"
protected boolean isStandardPrimitive (Class type) {
    if (type == null) {
        return false;
    }
    else if (type.isPrimitive ()) {
        return true;
    }
    else if (type.equals (Object.class)) {
        return false;
    }
    for (int i = 0, size = INHERITED_SIMPLE.length; i < size; i ++) {
        if (INHERITED_SIMPLE [i].equals (type)) {
            return true;
        }
    }
    for (int i = 0, size = INHERITED_COMPLEX.length; i < size; i ++) {
        if (INHERITED_COMPLEX [i].equals (type)) {
            return false;
        }
    }
    for (int i = 0, size = INHERITED_COMPLEX.length; i < size; i ++) {
        if (INHERITED_COMPLEX [i].isAssignableFrom (type)) {
            return false;
        }
    }
    if (type.getName ().startsWith (""java.lang."")) {
        return true;
    }
    for (int i = 0, size = INHERITED_SIMPLE.length; i < size; i ++) {
        if (INHERITED_SIMPLE [i].isAssignableFrom (type)) {
            return true;
        }
    }
    return false;
}
",181,234
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/ClassNormalizer.java,"
public Class getNormalizedClass (Object object) {
    if (object == null) {
        throw new IllegalArgumentException (""Cannot get class for null object."");
    }
    return normalize (object.getClass ());
}
",56,63
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/ClassNormalizer.java,"
public Class normalize (Class clazz) {
    return clazz;
}
",76,79
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/StandardSimpleTypeMapper.java,"
public Binding bind (String propertyName, Class propertyType, IntrospectionConfiguration configuration) {
    if (configuration.isAttributesForPrimitives ()) {
        return StandardSimpleTypeMapper.Binding.ATTRIBUTE;
    }
    else {
        return StandardSimpleTypeMapper.Binding.ELEMENT;
    }
}
",35,49
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/BadCharacterReplacingNMapper.java,"
public BadCharacterReplacingNMapper (NameMapper chainedMapper) {
    this.chainedMapper = chainedMapper;
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/BadCharacterReplacingNMapper.java,"
public Character getReplacement () {
    return replacement;
}
",49,52
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/BadCharacterReplacingNMapper.java,"
public void setReplacement (Character replacement) {
    this.replacement = replacement;
}
",59,62
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/BadCharacterReplacingNMapper.java,"
public String mapTypeToElementName (String typeName) {
    StringBuffer buffer = new StringBuffer (typeName);
    for (int i = 0, size = buffer.length (); i < size; i ++) {
        char nextChar = buffer.charAt (i);
        boolean bad = false;
        if (i == 0) {
            bad = ! XMLUtils.isNameStartChar (nextChar);
        }
        else {
            bad = ! XMLUtils.isNameChar (nextChar);
        }
        if (bad) {
            if (replacement != null) {
                buffer.setCharAt (i, replacement.charValue ());
            }
            else {
                buffer.deleteCharAt (i);
                i --;
                size --;
            }
        }
    }
    if (buffer.length () == 0) {
        throw new IllegalArgumentException (""Element name contains no legal characters and no replacements have been set."");
    }
    typeName = buffer.toString ();
    if (chainedMapper == null) {
        return typeName;
    }
    return chainedMapper.mapTypeToElementName (typeName);
}
",74,120
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/ListedClassNormalizer.java,"
public boolean isStrickCheck () {
    return strickCheck;
}
",48,51
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/ListedClassNormalizer.java,"
public void setStrickCheck (boolean strickCheck) {
    this.strickCheck = strickCheck;
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/ListedClassNormalizer.java,"
public void addSubstitution (Class match, Class substitute) {
    normalizations.add (new ListEntry (match, substitute));
}
",71,74
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/ListedClassNormalizer.java,"
public void addSubstitution (Class substitute) {
    addSubstitution (substitute, substitute);
}
",83,86
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/ListedClassNormalizer.java,"
public Class normalize (Class clazz) {
    Iterator it = normalizations.iterator ();
    while (it.hasNext ()) {
        ListEntry entry = (ListEntry) it.next ();
        if (strickCheck) {
            if (entry.match.equals (clazz)) {
                return entry.substitute;
            }
        }
        else {
            if (entry.match.isAssignableFrom (clazz)) {
                return entry.substitute;
            }
        }
    }
    return clazz;
}
",100,123
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/ListedClassNormalizer.java,"
ListEntry (Class match, Class substitute) {
    this.match = match;
    this.substitute = substitute;
}
",138,142
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/DecapitalizeNameMapper.java,"
public String mapTypeToElementName (String typeName) {
    return Introspector.decapitalize (typeName);
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/strategy/DecapitalizeNameMapper.java,"
public String toString () {
    return ""Decapitalize Type Name Mapper"";
}
",56,59
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public XMLIntrospector () {
    this (new IntrospectionConfiguration ());
}
",109,112
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public XMLIntrospector (IntrospectionConfiguration configuration) {
    setConfiguration (configuration);
    DefaultXMLBeanInfoRegistry defaultRegistry = new DefaultXMLBeanInfoRegistry ();
    setRegistry (defaultRegistry);
    setPolymorphicReferenceResolver (defaultRegistry);
}
",120,127
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public Log getLog () {
    return getConfiguration ().getIntrospectionLog ();
}
",137,140
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public void setLog (Log log) {
    getConfiguration ().setIntrospectionLog (log);
}
",146,149
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public XMLBeanInfoRegistry getRegistry () {
    return registry;
}
",163,166
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public void setRegistry (XMLBeanInfoRegistry registry) {
    this.registry = registry;
}
",185,188
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public IntrospectionConfiguration getConfiguration () {
    return configuration;
}
",198,201
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public void setConfiguration (IntrospectionConfiguration configuration) {
    this.configuration = configuration;
}
",211,214
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public ClassNormalizer getClassNormalizer () {
    return getConfiguration ().getClassNormalizer ();
}
",227,230
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public void setClassNormalizer (ClassNormalizer classNormalizer) {
    getConfiguration ().setClassNormalizer (classNormalizer);
}
",243,246
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public PolymorphicReferenceResolver getPolymorphicReferenceResolver () {
    return polymorphicReferenceResolver;
}
",266,269
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public void setPolymorphicReferenceResolver (PolymorphicReferenceResolver polymorphicReferenceResolver) {
    this.polymorphicReferenceResolver = polymorphicReferenceResolver;
}
",287,291
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public boolean isCachingEnabled () {
    return true;
}
",299,302
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public void setCachingEnabled (boolean cachingEnabled) {
}
",310,313
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public boolean isAttributesForPrimitives () {
    return getConfiguration ().isAttributesForPrimitives ();
}
",321,324
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public void setAttributesForPrimitives (boolean attributesForPrimitives) {
    getConfiguration ().setAttributesForPrimitives (attributesForPrimitives);
}
",332,335
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public boolean isWrapCollectionsInElement () {
    return getConfiguration ().isWrapCollectionsInElement ();
}
",343,346
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public void setWrapCollectionsInElement (boolean wrapCollectionsInElement) {
    getConfiguration ().setWrapCollectionsInElement (wrapCollectionsInElement);
}
",355,358
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public PluralStemmer getPluralStemmer () {
    return getConfiguration ().getPluralStemmer ();
}
",366,369
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public void setPluralStemmer (PluralStemmer pluralStemmer) {
    getConfiguration ().setPluralStemmer (pluralStemmer);
}
",377,380
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public NameMapper getNameMapper () {
    return getElementNameMapper ();
}
",389,392
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public void setNameMapper (NameMapper nameMapper) {
    setElementNameMapper (nameMapper);
}
",400,403
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public NameMapper getElementNameMapper () {
    return getConfiguration ().getElementNameMapper ();
}
",413,416
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public void setElementNameMapper (NameMapper nameMapper) {
    getConfiguration ().setElementNameMapper (nameMapper);
}
",423,426
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public NameMapper getAttributeNameMapper () {
    return getConfiguration ().getAttributeNameMapper ();
}
",436,439
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public void setAttributeNameMapper (NameMapper nameMapper) {
    getConfiguration ().setAttributeNameMapper (nameMapper);
}
",447,450
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public boolean useBeanInfoSearchPath () {
    return getConfiguration ().useBeanInfoSearchPath ();
}
",459,462
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public void setUseBeanInfoSearchPath (boolean useBeanInfoSearchPath) {
    getConfiguration ().setUseBeanInfoSearchPath (useBeanInfoSearchPath);
}
",470,473
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public void flushCache () {
}
",483,483
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public XMLBeanInfo introspect (Object bean) throws IntrospectionException {
    if (getLog ().isDebugEnabled ()) {
        getLog ().debug (""Introspecting..."");
        getLog ().debug (bean);
    }
    if (bean instanceof DynaBean) {
        XMLBeanInfo xmlBeanInfo = findByXMLDescriptor (bean.getClass ());
        if (xmlBeanInfo != null) {
            return xmlBeanInfo;
        }
        return introspect (((DynaBean) bean).getDynaClass ());
    }
    else {
        Class normalClass = getClassNormalizer ().getNormalizedClass (bean);
        return introspect (normalClass);
    }
}
",494,520
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public XMLBeanInfo introspect (DynaClass dynaClass) {
    XMLBeanInfo xmlInfo = createXMLBeanInfo (dynaClass);
    DynaClassBeanType beanClass = new DynaClassBeanType (dynaClass);
    populate (xmlInfo, beanClass);
    return xmlInfo;
}
",530,546
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public synchronized XMLBeanInfo introspect (Class aClass, InputSource source) throws IOException, SAXException {
    configureDigester (aClass);
    XMLBeanInfo result = (XMLBeanInfo) digester.parse (source);
    return result;
}
",565,571
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public XMLBeanInfo introspect (Class aClass) throws IntrospectionException {
    String [] searchPath = null;
    if (! getConfiguration ().useBeanInfoSearchPath ()) {
        try {
            searchPath = Introspector.getBeanInfoSearchPath ();
            Introspector.setBeanInfoSearchPath (new String [] {});
        } catch (SecurityException e) {
            getLog ().warn (""Security manager does not allow bean info search path to be set"");
            getLog ().debug (""Security exception whilst setting bean info search page"", e);
        }
    }
    XMLBeanInfo xmlInfo = registry.get (aClass);
    if (xmlInfo == null) {
        if (getLog ().isDebugEnabled ()) {
            getLog ().debug (""Attempting to lookup an XML descriptor for class: "" + aClass);
        }
        xmlInfo = findByXMLDescriptor (aClass);
        if (xmlInfo == null) {
            BeanInfo info;
            if (getConfiguration ().ignoreAllBeanInfo ()) {
                info = Introspector.getBeanInfo (aClass, Introspector.IGNORE_ALL_BEANINFO);
            }
            else {
                info = Introspector.getBeanInfo (aClass);
            }
            xmlInfo = introspect (info);
        }
        if (xmlInfo != null) {
            registry.put (aClass, xmlInfo);
        }
    }
    else {
        getLog ().trace (""Used cached XMLBeanInfo."");
    }
    if (getLog ().isTraceEnabled ()) {
        getLog ().trace (xmlInfo);
    }
    if (! getConfiguration ().useBeanInfoSearchPath () && searchPath != null) {
        try {
            Introspector.setBeanInfoSearchPath (searchPath);
        } catch (SecurityException e) {
            getLog ().warn (""Security manager does not allow bean info search path to be set"");
            getLog ().debug (""Security exception whilst setting bean info search page"", e);
        }
    }
    return xmlInfo;
}
",582,656
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public XMLBeanInfo introspect (BeanInfo beanInfo) throws IntrospectionException {
    XMLBeanInfo xmlBeanInfo = createXMLBeanInfo (beanInfo);
    populate (xmlBeanInfo, new JavaBeanType (beanInfo));
    return xmlBeanInfo;
}
",666,671
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public synchronized Class [] register (InputSource source) throws IntrospectionException, IOException, SAXException {
    Map xmlBeanInfoByClass = loadMultiMapping (source);
    Set keySet = xmlBeanInfoByClass.keySet ();
    Class mappedClasses [] = new Class [keySet.size ()];
    int i = 0;
    for (Iterator it = keySet.iterator (); it.hasNext ();) {
        Class clazz = (Class) it.next ();
        mappedClasses [i ++] = clazz;
        XMLBeanInfo xmlBeanInfo = (XMLBeanInfo) xmlBeanInfoByClass.get (clazz);
        if (xmlBeanInfo != null) {
            getRegistry ().put (clazz, xmlBeanInfo);
        }
    }
    return mappedClasses;
}
",689,706
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
private synchronized Map loadMultiMapping (InputSource mapping) throws IOException, SAXException {
    if (multiMappingdigester == null) {
        multiMappingdigester = new MultiMappingBeanInfoDigester ();
        multiMappingdigester.setXMLIntrospector (this);
    }
    Map multiBeanInfoMap = (Map) multiMappingdigester.parse (mapping);
    return multiBeanInfoMap;
}
",716,727
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public void register (Class aClass, InputSource source) throws IOException, SAXException {
    XMLBeanInfo xmlBeanInfo = introspect (aClass, source);
    getRegistry ().put (aClass, xmlBeanInfo);
}
",743,747
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
private void populate (XMLBeanInfo xmlBeanInfo, BeanType bean) {
    String name = bean.getBeanName ();
    ElementDescriptor elementDescriptor = new ElementDescriptor ();
    elementDescriptor.setLocalName (getElementNameMapper ().mapTypeToElementName (name));
    elementDescriptor.setPropertyType (bean.getElementType ());
    if (getLog ().isTraceEnabled ()) {
        getLog ().trace (""Populating:"" + bean);
    }
    if (bean.isPrimitiveType ()) {
        getLog ().trace (""Bean is primitive"");
        elementDescriptor.setTextExpression (StringExpression.getInstance ());
    }
    else {
        getLog ().trace (""Bean is standard type"");
        boolean isLoopType = bean.isLoopType ();
        List elements = new ArrayList ();
        List attributes = new ArrayList ();
        List contents = new ArrayList ();
        if (! (isLoopType && isBasicCollection (bean.getClass ()))) {
            addProperties (bean.getProperties (), elements, attributes, contents);
        }
        if (isLoopType) {
            getLog ().trace (""Bean is loop"");
            ElementDescriptor loopDescriptor = new ElementDescriptor ();
            loopDescriptor.setCollective (true);
            loopDescriptor.setHollow (true);
            loopDescriptor.setSingularPropertyType (Object.class);
            loopDescriptor.setContextExpression (new IteratorExpression (EmptyExpression.getInstance ()));
            loopDescriptor.setUpdater (CollectionUpdater.getInstance ());
            if (bean.isMapType ()) {
                loopDescriptor.setQualifiedName (""entry"");
            }
            elements.add (loopDescriptor);
        }
        int size = elements.size ();
        if (size > 0) {
            ElementDescriptor [] descriptors = new ElementDescriptor [size];
            elements.toArray (descriptors);
            elementDescriptor.setElementDescriptors (descriptors);
        }
        size = attributes.size ();
        if (size > 0) {
            AttributeDescriptor [] descriptors = new AttributeDescriptor [size];
            attributes.toArray (descriptors);
            elementDescriptor.setAttributeDescriptors (descriptors);
        }
        size = contents.size ();
        if (size > 0) {
            if (size > 0) {
                Descriptor [] descriptors = new Descriptor [size];
                contents.toArray (descriptors);
                elementDescriptor.setContentDescriptors (descriptors);
            }
        }
    }
    xmlBeanInfo.setElementDescriptor (elementDescriptor);
    defaultAddMethods (elementDescriptor, bean.getElementType ());
    if (getLog ().isTraceEnabled ()) {
        getLog ().trace (""Populated descriptor:"");
        getLog ().trace (elementDescriptor);
    }
}
",755,848
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
private boolean isBasicCollection (Class type) {
    return type.getName ().startsWith (""java.util"");
}
",859,862
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
protected XMLBeanInfo createXMLBeanInfo (DynaClass dynaClass) {
    XMLBeanInfo beanInfo = new XMLBeanInfo (dynaClass.getClass ());
    return beanInfo;
}
",872,877
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public Descriptor createDescriptor (PropertyDescriptor propertyDescriptor, boolean useAttributesForPrimitives) throws IntrospectionException {
    return createXMLDescriptor (new BeanProperty (propertyDescriptor));
}
",893,899
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public Descriptor createXMLDescriptor (BeanProperty beanProperty) {
    return beanProperty.createXMLDescriptor (configuration);
}
",910,913
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public void defaultAddMethods (ElementDescriptor rootDescriptor, Class beanClass) {
    defaultAddMethods (rootDescriptor, beanClass, false);
}
",941,946
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public void defaultAddMethods (ElementDescriptor rootDescriptor, Class beanClass, boolean preservePropertyName) {
    if (beanClass != null) {
        ArrayList singleParameterAdders = new ArrayList ();
        ArrayList twinParameterAdders = new ArrayList ();
        Method [] methods = beanClass.getMethods ();
        for (int i = 0, size = methods.length; i < size; i ++) {
            Method method = methods [i];
            String name = method.getName ();
            if (name.startsWith (""add"")) {
                Class [] types = method.getParameterTypes ();
                if (types != null) {
                    if (getLog ().isTraceEnabled ()) {
                        getLog ().trace (""Searching for match for "" + method);
                    }
                    switch (types.length) {
                        case 1 :
                            singleParameterAdders.add (method);
                            break;
                        case 2 :
                            twinParameterAdders.add (method);
                            break;
                        default :
                            break;
                    }
                }
            }
        }
        Map elementsByPropertyName = makeElementDescriptorMap (rootDescriptor);
        for (Iterator it = singleParameterAdders.iterator (); it.hasNext ();) {
            Method singleParameterAdder = (Method) it.next ();
            setIteratorAdder (elementsByPropertyName, singleParameterAdder, preservePropertyName);
        }
        for (Iterator it = twinParameterAdders.iterator (); it.hasNext ();) {
            Method twinParameterAdder = (Method) it.next ();
            setMapAdder (elementsByPropertyName, twinParameterAdder);
        }
        configureMappingDerivation (rootDescriptor);
    }
}
",973,1036
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
private void configureMappingDerivation (ElementDescriptor descriptor) {
    boolean useBindTime = getConfiguration ().getMappingDerivationStrategy ().useBindTimeTypeForMapping (descriptor.getPropertyType (), descriptor.getSingularPropertyType ());
    descriptor.setUseBindTimeTypeForMapping (useBindTime);
    ElementDescriptor [] childDescriptors = descriptor.getElementDescriptors ();
    for (int i = 0, size = childDescriptors.length; i < size; i ++) {
        configureMappingDerivation (childDescriptors [i]);
    }
}
",1044,1054
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
private void setIteratorAdder (Map elementsByPropertyName, Method singleParameterAdderMethod, boolean preserveNullPropertyName) {
    String adderName = singleParameterAdderMethod.getName ();
    String propertyName = Introspector.decapitalize (adderName.substring (3));
    ElementDescriptor matchingDescriptor = getMatchForAdder (propertyName, elementsByPropertyName);
    if (matchingDescriptor != null) {
        Class singularType = singleParameterAdderMethod.getParameterTypes () [0];
        if (getLog ().isTraceEnabled ()) {
            getLog ().trace (adderName + ""->"" + propertyName);
        }
        getLog ().trace (""Matching collection or iteration"");
        matchingDescriptor.setUpdater (new MethodUpdater (singleParameterAdderMethod));
        matchingDescriptor.setSingularPropertyType (singularType);
        matchingDescriptor.setHollow (! isPrimitiveType (singularType));
        String localName = matchingDescriptor.getLocalName ();
        if (! preserveNullPropertyName && (localName == null || localName.length () == 0)) {
            matchingDescriptor.setLocalName (getConfiguration ().getElementNameMapper ().mapTypeToElementName (propertyName));
        }
        if (getLog ().isDebugEnabled ()) {
            getLog ().debug (""!! "" + singleParameterAdderMethod);
            getLog ().debug (""!! "" + singularType);
        }
    }
}
",1061,1099
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
private void setMapAdder (Map elementsByPropertyName, Method twinParameterAdderMethod) {
    String adderName = twinParameterAdderMethod.getName ();
    String propertyName = Introspector.decapitalize (adderName.substring (3));
    ElementDescriptor matchingDescriptor = getMatchForAdder (propertyName, elementsByPropertyName);
    assignAdder (twinParameterAdderMethod, matchingDescriptor);
}
",1106,1114
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public void assignAdder (Method twinParameterAdderMethod, ElementDescriptor matchingDescriptor) {
    if (matchingDescriptor != null && Map.class.isAssignableFrom (matchingDescriptor.getPropertyType ())) {
        getLog ().trace (""Matching map"");
        ElementDescriptor [] children = matchingDescriptor.getElementDescriptors ();
        if (children.length == 0) {
            getLog ().info (""'entry' descriptor is missing for map. "" + ""Updaters cannot be set"");
        }
        else {
            assignAdder (twinParameterAdderMethod, children);
        }
    }
}
",1122,1144
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
private void assignAdder (Method twinParameterAdderMethod, ElementDescriptor [] children) {
    Class [] types = twinParameterAdderMethod.getParameterTypes ();
    Class keyType = types [0];
    Class valueType = types [1];
    MapEntryAdder adder = new MapEntryAdder (twinParameterAdderMethod);
    for (int n = 0, noOfGrandChildren = children.length; n < noOfGrandChildren; n ++) {
        if (""key"".equals (children [n].getLocalName ())) {
            children [n].setUpdater (adder.getKeyUpdater ());
            children [n].setSingularPropertyType (keyType);
            if (children [n].getPropertyType () == null) {
                children [n].setPropertyType (valueType);
            }
            if (isPrimitiveType (keyType)) {
                children [n].setHollow (false);
            }
            if (getLog ().isTraceEnabled ()) {
                getLog ().trace (""Key descriptor: "" + children [n]);
            }
        }
        else if (""value"".equals (children [n].getLocalName ())) {
            children [n].setUpdater (adder.getValueUpdater ());
            children [n].setSingularPropertyType (valueType);
            if (children [n].getPropertyType () == null) {
                children [n].setPropertyType (valueType);
            }
            if (isPrimitiveType (valueType)) {
                children [n].setHollow (false);
            }
            if (isLoopType (valueType)) {
                ElementDescriptor loopDescriptor = new ElementDescriptor ();
                loopDescriptor.setHollow (true);
                loopDescriptor.setSingularPropertyType (valueType);
                loopDescriptor.setPropertyType (valueType);
                children [n].addElementDescriptor (loopDescriptor);
                loopDescriptor.setCollective (true);
            }
            if (getLog ().isTraceEnabled ()) {
                getLog ().trace (""Value descriptor: "" + children [n]);
            }
        }
    }
}
",1151,1216
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
private ElementDescriptor getMatchForAdder (String propertyName, Map elementsByPropertyName) {
    ElementDescriptor matchingDescriptor = null;
    if (propertyName.length () > 0) {
        if (getLog ().isTraceEnabled ()) {
            getLog ().trace (""findPluralDescriptor( "" + propertyName + "" ):root property name="" + propertyName);
        }
        PluralStemmer stemmer = getPluralStemmer ();
        matchingDescriptor = stemmer.findPluralDescriptor (propertyName, elementsByPropertyName);
        if (getLog ().isTraceEnabled ()) {
            getLog ().trace (""findPluralDescriptor( "" + propertyName + "" ):ElementDescriptor="" + matchingDescriptor);
        }
    }
    return matchingDescriptor;
}
",1224,1248
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
private Map makeElementDescriptorMap (ElementDescriptor rootDescriptor) {
    Map result = new HashMap ();
    String rootPropertyName = rootDescriptor.getPropertyName ();
    if (rootPropertyName != null) {
        result.put (rootPropertyName, rootDescriptor);
    }
    makeElementDescriptorMap (rootDescriptor, result);
    return result;
}
",1257,1267
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
private void makeElementDescriptorMap (ElementDescriptor rootDescriptor, Map map) {
    ElementDescriptor [] children = rootDescriptor.getElementDescriptors ();
    if (children != null) {
        for (int i = 0, size = children.length; i < size; i ++) {
            ElementDescriptor child = children [i];
            String propertyName = child.getPropertyName ();
            if (propertyName != null) {
                map.put (propertyName, child);
            }
            makeElementDescriptorMap (child, map);
        }
    }
}
",1276,1292
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
protected PluralStemmer createPluralStemmer () {
    return new DefaultPluralStemmer ();
}
",1302,1305
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
protected NameMapper createNameMapper () {
    return new DefaultNameMapper ();
}
",1315,1318
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
protected synchronized XMLBeanInfo findByXMLDescriptor (Class aClass) {
    String name = aClass.getName ();
    int idx = name.lastIndexOf ('.');
    if (idx >= 0) {
        name = name.substring (idx + 1);
    }
    name += "".betwixt"";
    URL url = aClass.getResource (name);
    if (url != null) {
        try {
            String urlText = url.toString ();
            if (getLog ().isDebugEnabled ()) {
                getLog ().debug (""Parsing Betwixt XML descriptor: "" + urlText);
            }
            configureDigester (aClass);
            return (XMLBeanInfo) digester.parse (urlText);
        } catch (Exception e) {
            getLog ().warn (""Caught exception trying to parse: "" + name, e);
        }
    }
    if (getLog ().isTraceEnabled ()) {
        getLog ().trace (""Could not find betwixt file "" + name);
    }
    return null;
}
",1329,1366
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
private synchronized void configureDigester (Class aClass) {
    if (digester == null) {
        digester = new XMLBeanInfoDigester ();
        digester.setXMLIntrospector (this);
    }
    digester.setBeanClass (aClass);
}
",1372,1380
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
protected void addProperties (BeanInfo beanInfo, List elements, List attributes, List contents) throws IntrospectionException {
    PropertyDescriptor [] descriptors = beanInfo.getPropertyDescriptors ();
    if (descriptors != null) {
        for (int i = 0, size = descriptors.length; i < size; i ++) {
            addProperty (beanInfo, descriptors [i], elements, attributes, contents);
        }
    }
    if (getLog ().isTraceEnabled ()) {
        getLog ().trace (elements);
        getLog ().trace (attributes);
        getLog ().trace (contents);
    }
}
",1392,1414
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
protected void addProperties (BeanProperty [] beanProperties, List elements, List attributes, List contents) {
    if (beanProperties != null) {
        if (getLog ().isTraceEnabled ()) {
            getLog ().trace (beanProperties.length + "" properties to be added"");
        }
        for (int i = 0, size = beanProperties.length; i < size; i ++) {
            addProperty (beanProperties [i], elements, attributes, contents);
        }
    }
    if (getLog ().isTraceEnabled ()) {
        getLog ().trace (""After properties have been added (elements, attributes, contents):"");
        getLog ().trace (elements);
        getLog ().trace (attributes);
        getLog ().trace (contents);
    }
}
",1424,1448
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
protected void addProperty (BeanInfo beanInfo, PropertyDescriptor propertyDescriptor, List elements, List attributes, List contents) throws IntrospectionException {
    addProperty (propertyDescriptor, elements, attributes, contents);
}
",1465,1475
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
protected void addProperty (PropertyDescriptor propertyDescriptor, List elements, List attributes, List contents) throws IntrospectionException {
    addProperty (new BeanProperty (propertyDescriptor), elements, attributes, contents);
}
",1489,1498
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
protected void addProperty (BeanProperty beanProperty, List elements, List attributes, List contents) {
    Descriptor nodeDescriptor = createXMLDescriptor (beanProperty);
    if (nodeDescriptor == null) {
        return;
    }
    if (nodeDescriptor instanceof ElementDescriptor) {
        elements.add (nodeDescriptor);
    }
    else if (nodeDescriptor instanceof AttributeDescriptor) {
        attributes.add (nodeDescriptor);
    }
    else {
        contents.add (nodeDescriptor);
    }
}
",1511,1534
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
protected void addProperties (BeanInfo beanInfo, List elements, List attributes) throws IntrospectionException {
    PropertyDescriptor [] descriptors = beanInfo.getPropertyDescriptors ();
    if (descriptors != null) {
        for (int i = 0, size = descriptors.length; i < size; i ++) {
            addProperty (beanInfo, descriptors [i], elements, attributes);
        }
    }
    if (getLog ().isTraceEnabled ()) {
        getLog ().trace (elements);
        getLog ().trace (attributes);
    }
}
",1546,1566
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
protected void addProperty (BeanInfo beanInfo, PropertyDescriptor propertyDescriptor, List elements, List attributes) throws IntrospectionException {
    NodeDescriptor nodeDescriptor = XMLIntrospectorHelper.createDescriptor (propertyDescriptor, isAttributesForPrimitives (), this);
    if (nodeDescriptor == null) {
        return;
    }
    if (nodeDescriptor instanceof ElementDescriptor) {
        elements.add (nodeDescriptor);
    }
    else {
        attributes.add (nodeDescriptor);
    }
}
",1581,1605
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
protected XMLBeanInfo createXMLBeanInfo (BeanInfo beanInfo) {
    XMLBeanInfo xmlBeanInfo = new XMLBeanInfo (beanInfo.getBeanDescriptor ().getBeanClass ());
    return xmlBeanInfo;
}
",1614,1618
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public boolean isLoopType (Class type) {
    return getConfiguration ().isLoopType (type);
}
",1626,1629
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public boolean isPrimitiveType (Class type) {
    TypeBindingStrategy.BindingType bindingType = configuration.getTypeBindingStrategy ().bindingType (type);
    boolean result = (bindingType.equals (TypeBindingStrategy.BindingType.PRIMITIVE));
    return result;
}
",1638,1646
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public String toString () {
    return ""Bean[name="" + getBeanName () + "", type="" + getElementType ();
}
",1692,1695
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public JavaBeanType (BeanInfo beanInfo) {
    this.beanInfo = beanInfo;
    BeanDescriptor beanDescriptor = beanInfo.getBeanDescriptor ();
    beanClass = beanDescriptor.getBeanClass ();
    name = beanDescriptor.getName ();
    if (beanClass.isArray ()) {
        name = ""Array"";
    }
}
",1714,1727
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public Class getElementType () {
    return beanClass;
}
",1730,1733
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public String getBeanName () {
    return name;
}
",1736,1739
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public boolean isPrimitiveType () {
    return XMLIntrospector.this.isPrimitiveType (beanClass);
}
",1742,1745
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public boolean isLoopType () {
    return getConfiguration ().isLoopType (beanClass);
}
",1748,1751
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public boolean isMapType () {
    return Map.class.isAssignableFrom (beanClass);
}
",1754,1757
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public BeanProperty [] getProperties () {
    if (properties == null) {
        ArrayList propertyDescriptors = new ArrayList ();
        PropertyDescriptor [] descriptors = beanInfo.getPropertyDescriptors ();
        if (descriptors != null) {
            for (int i = 0, size = descriptors.length; i < size; i ++) {
                if (! getConfiguration ().getPropertySuppressionStrategy ().suppressProperty (beanClass, descriptors [i].getPropertyType (), descriptors [i].getName ())) {
                    propertyDescriptors.add (descriptors [i]);
                }
            }
        }
        BeanInfo [] additionals = beanInfo.getAdditionalBeanInfo ();
        if (additionals != null) {
            for (int i = 0, outerSize = additionals.length; i < outerSize; i ++) {
                BeanInfo additionalInfo = additionals [i];
                descriptors = additionalInfo.getPropertyDescriptors ();
                if (descriptors != null) {
                    for (int j = 0, innerSize = descriptors.length; j < innerSize; j ++) {
                        if (! getConfiguration ().getPropertySuppressionStrategy ().suppressProperty (beanClass, descriptors [j].getPropertyType (), descriptors [j].getName ())) {
                            propertyDescriptors.add (descriptors [j]);
                        }
                    }
                }
            }
        }
        addAllSuperinterfaces (beanClass, propertyDescriptors);
        properties = new BeanProperty [propertyDescriptors.size ()];
        int count = 0;
        for (Iterator it = propertyDescriptors.iterator (); it.hasNext (); count ++) {
            PropertyDescriptor propertyDescriptor = (PropertyDescriptor) it.next ();
            properties [count] = new BeanProperty (propertyDescriptor);
        }
    }
    return properties;
}
",1760,1820
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
private void addAllSuperinterfaces (Class clazz, ArrayList propertyDescriptors) {
    if (clazz.isInterface ()) {
        Class [] superinterfaces = clazz.getInterfaces ();
        for (int i = 0, size = superinterfaces.length; i < size; i ++) {
            try {
                BeanInfo beanInfo;
                if (getConfiguration ().ignoreAllBeanInfo ()) {
                    beanInfo = Introspector.getBeanInfo (superinterfaces [i], Introspector.IGNORE_ALL_BEANINFO);
                }
                else {
                    beanInfo = Introspector.getBeanInfo (superinterfaces [i]);
                }
                PropertyDescriptor [] descriptors = beanInfo.getPropertyDescriptors ();
                for (int j = 0, descriptorLength = descriptors.length; j < descriptorLength; j ++) {
                    if (! getConfiguration ().getPropertySuppressionStrategy ().suppressProperty (beanClass, descriptors [j].getPropertyType (), descriptors [j].getName ())) {
                        propertyDescriptors.add (descriptors [j]);
                    }
                }
                addAllSuperinterfaces (superinterfaces [i], propertyDescriptors);
            } catch (IntrospectionException ex) {
                log.info (""Introspection on superinterface failed."", ex);
            }
        }
    }
}
",1829,1869
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public DynaClassBeanType (DynaClass dynaClass) {
    this.dynaClass = dynaClass;
    DynaProperty [] dynaProperties = dynaClass.getDynaProperties ();
    properties = new BeanProperty [dynaProperties.length];
    for (int i = 0, size = dynaProperties.length; i < size; i ++) {
        properties [i] = new BeanProperty (dynaProperties [i]);
    }
}
",1885,1894
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public String getBeanName () {
    return dynaClass.getName ();
}
",1897,1900
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public Class getElementType () {
    return DynaClass.class;
}
",1902,1905
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public boolean isPrimitiveType () {
    return false;
}
",1907,1910
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public boolean isMapType () {
    return false;
}
",1912,1915
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public boolean isLoopType () {
    return false;
}
",1917,1920
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/XMLIntrospector.java,"
public BeanProperty [] getProperties () {
    return properties;
}
",1922,1925
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public Context () {
    this (null, LogFactory.getLog (Context.class));
}
",72,75
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public Context (Object bean, Log log) {
    this (bean, log, new BindingConfiguration ());
}
",83,86
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public Context (Object bean, Log log, BindingConfiguration bindingConfiguration) {
    this (bean, new HashMap (), log, bindingConfiguration);
}
",95,98
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public Context (Context context) {
    this (context.bean, context.variables, context.log, context.bindingConfiguration);
}
",105,108
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public Context (Object bean, Map variables, Log log) {
    this (bean, variables, log, new BindingConfiguration ());
}
",118,121
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public Context (Object bean, Map variables, Log log, BindingConfiguration bindingConfiguration) {
    this.bean = bean;
    this.variables = variables;
    this.log = log;
    this.bindingConfiguration = bindingConfiguration;
}
",130,136
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public Context newContext (Object newBean) {
    Context context = new Context (this);
    context.setBean (newBean);
    return context;
}
",145,150
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public Object getBean () {
    return bean;
}
",156,159
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public void setBean (Object bean) {
    this.bean = bean;
}
",165,168
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public Map getVariables () {
    return variables;
}
",174,177
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public void setVariables (Map variables) {
    this.variables = variables;
}
",183,186
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public Object getVariable (String name) {
    return variables.get (name);
}
",193,196
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public void setVariable (String name, Object value) {
    variables.put (name, value);
}
",203,206
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public Log getLog () {
    return log;
}
",213,216
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public void setLog (Log log) {
    this.log = log;
}
",223,226
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public ObjectStringConverter getObjectStringConverter () {
    return bindingConfiguration.getObjectStringConverter ();
}
",233,236
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public boolean getMapIDs () {
    return bindingConfiguration.getMapIDs ();
}
",246,249
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public String getClassNameAttribute () {
    return bindingConfiguration.getClassNameAttribute ();
}
",260,263
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public void setClassNameAttribute (String classNameAttribute) {
    bindingConfiguration.setClassNameAttribute (classNameAttribute);
}
",275,278
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public ValueSuppressionStrategy getValueSuppressionStrategy () {
    return bindingConfiguration.getValueSuppressionStrategy ();
}
",286,289
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public void setValueSuppressionStrategy (ValueSuppressionStrategy valueSuppressionStrategy) {
    bindingConfiguration.setValueSuppressionStrategy (valueSuppressionStrategy);
}
",297,301
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public IdStoringStrategy getIdMappingStrategy () {
    return bindingConfiguration.getIdMappingStrategy ();
}
",308,311
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public Options getOptions () {
    Options results = null;
    if (! optionStack.isEmpty ()) {
        results = (Options) optionStack.peek ();
    }
    return results;
}
",319,327
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public void pushOptions (Options options) {
    optionStack.push (options);
}
",339,342
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public void popOptions () {
    if (optionStack.isEmpty ()) {
        log.debug (""Cannot pop options off empty stack"");
    }
    else {
        optionStack.pop ();
    }
}
",353,363
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/Context.java,"
public String getInheritedOption (String name) {
    String result = null;
    for (int i = 0; i < optionStack.size (); i ++) {
        Options options = (Options) optionStack.peek (i);
        if (options != null) {
            result = options.getValue (name);
            if (result != null) {
                break;
            }
        }
    }
    return result;
}
",375,391
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/VariableExpression.java,"
public VariableExpression () {
}
",32,34
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/VariableExpression.java,"
public VariableExpression (String variableName) {
    this.variableName = variableName;
}
",41,44
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/VariableExpression.java,"
public Object evaluate (Context context) {
    return context.getVariable (variableName);
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/VariableExpression.java,"
public String getVariableName () {
    return variableName;
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/VariableExpression.java,"
public void setVariableName (String variableName) {
    this.variableName = variableName;
}
",70,73
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/VariableExpression.java,"
public void update (Context context, String newValue) {
}
",79,82
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/VariableExpression.java,"
public String toString () {
    return ""VariableExpression [variable name="" + variableName + ""]"";
}
",88,91
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/ConstantExpression.java,"
public ConstantExpression () {
}
",34,36
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/ConstantExpression.java,"
public ConstantExpression (Object value) {
    this.value = value;
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/ConstantExpression.java,"
public Object evaluate (Context context) {
    return value;
}
",53,56
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/ConstantExpression.java,"
public void update (Context context, String newValue) {
}
",62,65
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/ConstantExpression.java,"
public Object getValue () {
    return value;
}
",71,74
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/ConstantExpression.java,"
public void setValue (Object value) {
    this.value = value;
}
",80,83
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/ConstantExpression.java,"
public String toString () {
    return ""ConstantExpression [value="" + value + ""]"";
}
",89,92
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MethodUpdater.java,"
public static void setLog (Log aLog) {
    log = aLog;
}
",42,45
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MethodUpdater.java,"
public MethodUpdater () {
}
",50,52
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MethodUpdater.java,"
public MethodUpdater (Method method) {
    setMethod (method);
}
",58,61
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MethodUpdater.java,"
public Method getMethod () {
    return method;
}
",68,71
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MethodUpdater.java,"
public void setMethod (Method method) {
    this.method = method;
    Class [] types = method.getParameterTypes ();
    if (types == null || types.length <= 0) {
        throw new IllegalArgumentException (""The Method must have at least one parameter"");
    }
    setValueType (types [0]);
}
",77,86
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MethodUpdater.java,"
public String toString () {
    return ""MethodUpdater [method="" + method + ""]"";
}
",97,100
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MethodUpdater.java,"
protected void executeUpdate (Context context, Object bean, Object newValue) throws Exception {
    if (log.isDebugEnabled ()) {
        log.debug (""Calling setter method: "" + method.getName () + "" on bean: "" + bean + "" with new value: "" + newValue);
    }
    Object [] arguments = {newValue};
    try {
        method.invoke (bean, arguments);
    } catch (IllegalAccessException e) {
        method.setAccessible (true);
        method.invoke (bean, arguments);
    }
}
",106,125
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MethodExpression.java,"
public MethodExpression () {
}
",38,40
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MethodExpression.java,"
public MethodExpression (Method method) {
    this.method = method;
}
",47,50
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MethodExpression.java,"
public Object evaluate (Context context) {
    Object bean = context.getBean ();
    if (bean != null) {
        Object [] arguments = getArguments ();
        try {
            return method.invoke (bean, arguments);
        } catch (IllegalAccessException e) {
            Method alternate = null;
            try {
                Class type = bean.getClass ();
                alternate = findAlternateMethod (type, method);
                if (alternate != null) {
                    try {
                        return alternate.invoke (bean, arguments);
                    } catch (IllegalAccessException ex) {
                        alternate.setAccessible (true);
                        return alternate.invoke (bean, arguments);
                    }
                }
                else {
                    method.setAccessible (true);
                    return method.invoke (bean, arguments);
                }
            } catch (Exception e2) {
                handleException (context, e2, alternate);
            }
        } catch (Exception e) {
            handleException (context, e, method);
        }
    }
    return null;
}
",60,108
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MethodExpression.java,"
public void update (Context context, String newValue) {
}
",114,117
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MethodExpression.java,"
public Method getMethod () {
    return method;
}
",124,127
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MethodExpression.java,"
public void setMethod (Method method) {
    this.method = method;
}
",134,137
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MethodExpression.java,"
protected Object [] getArguments () {
    return NULL_ARGUMENTS;
}
",146,149
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MethodExpression.java,"
protected Method findAlternateMethod (Class type, Method method) {
    Class [] interfaces = type.getInterfaces ();
    if (interfaces != null) {
        String name = method.getName ();
        for (int i = 0, size = interfaces.length; i < size; i ++) {
            Class otherType = interfaces [i];
            try {
                Method alternate = otherType.getMethod (name, NULL_CLASSES);
                if (alternate != null && alternate != method) {
                    return alternate;
                }
            } catch (NoSuchMethodException e) {
            }
        }
    }
    return null;
}
",159,191
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MethodExpression.java,"
protected void handleException (Context context, Exception e, Method m) {
    context.getLog ().error (""[MethodExpression] Cannot evaluate method "" + m, e);
}
",202,206
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MethodExpression.java,"
protected void handleException (Context context, Exception e) {
    context.getLog ().error (""[MethodExpression] Cannot evaluate method "", e);
}
",216,220
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MethodExpression.java,"
public String toString () {
    return ""MethodExpression [method="" + method + ""]"";
}
",226,229
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/DynaBeanExpression.java,"
public DynaBeanExpression () {
    super ();
}
",39,42
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/DynaBeanExpression.java,"
public DynaBeanExpression (String propertyName) {
    super ();
    setPropertyName (propertyName);
}
",49,53
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/DynaBeanExpression.java,"
public Object evaluate (Context context) {
    if (context.getBean () instanceof DynaBean && propertyName != null) {
        return ((DynaBean) context.getBean ()).get (propertyName);
    }
    else {
        return null;
    }
}
",64,75
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/DynaBeanExpression.java,"
public void update (Context context, String newValue) {
}
",81,84
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/DynaBeanExpression.java,"
public String getPropertyName () {
    return propertyName;
}
",90,93
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/DynaBeanExpression.java,"
public void setPropertyName (String propertyName) {
    if (propertyName == null) {
        throw new IllegalArgumentException (""propertyName is null"");
    }
    this.propertyName = propertyName;
}
",99,106
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/ClassNameExpression.java,"
public ClassNameExpression () {
}
",30,32
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/ClassNameExpression.java,"
public Object evaluate (Context context) {
    Object bean = context.getBean ();
    if (bean != null) {
        return bean.getClass ().getName ();
    }
    return null;
}
",40,48
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/ClassNameExpression.java,"
public void update (Context context, String newValue) {
}
",54,57
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/ClassNameExpression.java,"
public String toString () {
    return ""ClassNameExpression"";
}
",63,66
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/DynaBeanUpdater.java,"
public DynaBeanUpdater (DynaProperty dynaProperty) {
    this (dynaProperty.getName (), dynaProperty.getType ());
}
",38,41
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/DynaBeanUpdater.java,"
public DynaBeanUpdater (String propertyName, Class type) {
    this.propertyName = propertyName;
    setValueType (type);
}
",49,53
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/DynaBeanUpdater.java,"
protected void executeUpdate (Context context, Object bean, Object value) throws Exception {
    if (bean instanceof DynaBean) {
        DynaBean dynaBean = (DynaBean) bean;
        dynaBean.set (propertyName, value);
    }
    else {
        handleException (context, new IllegalArgumentException (""DynaBean required.""));
    }
}
",60,71
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/DynaBeanUpdater.java,"
public String toString () {
    return ""DynaBeanUpdater [property="" + propertyName + ""]"";
}
",76,79
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/CollectionUpdater.java,"
public static synchronized CollectionUpdater getInstance () {
    if (INSTANCE == null) {
        INSTANCE = new CollectionUpdater ();
    }
    return INSTANCE;
}
",34,41
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/CollectionUpdater.java,"
public void update (Context context, Object newValue) {
    if (newValue != null) {
        Object subject = context.getBean ();
        if (subject != null && subject instanceof Collection) {
            Collection collection = (Collection) subject;
            collection.add (newValue);
        }
    }
}
",48,59
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/EmptyExpression.java,"
public static EmptyExpression getInstance () {
    return singleton;
}
",36,39
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/EmptyExpression.java,"
public EmptyExpression () {
}
",43,45
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/EmptyExpression.java,"
public Object evaluate (Context context) {
    return context.getBean ();
}
",50,53
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/EmptyExpression.java,"
public void update (Context context, String newValue) {
}
",58,61
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/EmptyExpression.java,"
public String toString () {
    return ""EmptyExpression"";
}
",67,70
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public IteratorExpression (Expression expression) {
    this.expression = expression;
}
",45,48
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public Object evaluate (Context context) {
    Object value = expression.evaluate (context);
    if (value instanceof Iterator) {
        return (Iterator) value;
    }
    else if (value instanceof Collection) {
        Collection collection = (Collection) value;
        return collection.iterator ();
    }
    else if (value instanceof Map) {
        Map map = (Map) value;
        return map.entrySet ().iterator ();
    }
    else if (value instanceof Enumeration) {
        return new EnumerationIterator ((Enumeration) value);
    }
    else if (value != null) {
        Class type = value.getClass ();
        if (type.isArray ()) {
            return new ArrayIterator (value);
        }
    }
    return Collections.EMPTY_LIST.iterator ();
}
",54,100
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public void update (Context context, String newValue) {
}
",106,109
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public String toString () {
    return ""IteratorExpression [expression="" + expression + ""]"";
}
",115,118
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public ArrayIterator () {
    super ();
}
",155,158
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public ArrayIterator (final Object array) {
    super ();
    setArray (array);
}
",171,175
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public ArrayIterator (final Object array, final int startIndex) {
    super ();
    setArray (array);
    checkBound (startIndex, ""start"");
    this.startIndex = startIndex;
    this.index = startIndex;
}
",192,199
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public ArrayIterator (final Object array, final int startIndex, final int endIndex) {
    super ();
    setArray (array);
    checkBound (startIndex, ""start"");
    checkBound (endIndex, ""end"");
    if (endIndex < startIndex) {
        throw new IllegalArgumentException (""End index must not be less than start index."");
    }
    this.startIndex = startIndex;
    this.endIndex = endIndex;
    this.index = startIndex;
}
",218,233
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
protected void checkBound (final int bound, final String type) {
    if (bound > this.endIndex) {
        throw new ArrayIndexOutOfBoundsException (""Attempt to make an ArrayIterator that "" + type + ""s beyond the end of the array. "");
    }
    if (bound < 0) {
        throw new ArrayIndexOutOfBoundsException (""Attempt to make an ArrayIterator that "" + type + ""s before the start of the array. "");
    }
}
",245,259
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public boolean hasNext () {
    return (index < endIndex);
}
",268,271
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public Object next () {
    if (hasNext () == false) {
        throw new NoSuchElementException ();
    }
    return Array.get (array, index ++);
}
",281,288
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public void remove () {
    throw new UnsupportedOperationException (""remove() method is not supported"");
}
",296,300
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public Object getArray () {
    return array;
}
",312,315
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public void setArray (final Object array) {
    this.endIndex = Array.getLength (array);
    this.startIndex = 0;
    this.array = array;
    this.index = 0;
}
",333,347
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public void reset () {
    this.index = this.startIndex;
}
",352,355
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public EnumerationIterator () {
    this (null, null);
}
",386,389
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public EnumerationIterator (final Enumeration enumeration) {
    this (enumeration, null);
}
",397,400
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public EnumerationIterator (final Enumeration enumeration, final Collection collection) {
    super ();
    this.enumeration = enumeration;
    this.collection = collection;
    this.last = null;
}
",409,416
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public boolean hasNext () {
    return enumeration.hasMoreElements ();
}
",426,429
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public Object next () {
    last = enumeration.nextElement ();
    return last;
}
",437,441
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public void remove () {
    if (collection != null) {
        if (last != null) {
            collection.remove (last);
        }
        else {
            throw new IllegalStateException (""next() must have been called for remove() to function"");
        }
    }
    else {
        throw new UnsupportedOperationException (""No Collection associated with this Iterator"");
    }
}
",453,472
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public Enumeration getEnumeration () {
    return enumeration;
}
",481,484
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/IteratorExpression.java,"
public void setEnumeration (final Enumeration enumeration) {
    this.enumeration = enumeration;
}
",491,494
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/StringExpression.java,"
public static StringExpression getInstance () {
    return singleton;
}
",34,37
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/StringExpression.java,"
public StringExpression () {
}
",40,42
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/StringExpression.java,"
public Object evaluate (Context context) {
    Object value = context.getBean ();
    if (value != null) {
        return value.toString ();
    }
    return null;
}
",49,57
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/StringExpression.java,"
public void update (Context context, String newValue) {
}
",63,66
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/StringExpression.java,"
public String toString () {
    return ""StringExpression"";
}
",72,75
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/TypedUpdater.java,"
public void update (Context context, Object newValue) {
    Object bean = context.getBean ();
    if (bean != null) {
        if (newValue instanceof String) {
            if (log.isTraceEnabled ()) {
                log.trace (""Converting primitive to "" + valueType);
            }
            newValue = context.getObjectStringConverter ().stringToObject ((String) newValue, valueType, context);
        }
        if (newValue != null) {
        }
        if (newValue instanceof Collection && valueType.isArray ()) {
            Collection valuesAsCollection = (Collection) newValue;
            Class componentType = valueType.getComponentType ();
            if (componentType != null) {
                Object [] valuesAsArray = (Object []) Array.newInstance (componentType, valuesAsCollection.size ());
                newValue = valuesAsCollection.toArray (valuesAsArray);
            }
        }
        try {
            executeUpdate (context, bean, newValue);
        } catch (Exception e) {
            String valueTypeName = (newValue != null) ? newValue.getClass ().getName () : ""null"";
            log.warn (""Cannot evaluate: "" + this.toString () + "" on bean: "" + bean + "" of type: "" + bean.getClass ().getName () + "" with value: "" + newValue + "" of type: "" + valueTypeName);
            handleException (context, e);
        }
    }
}
",47,107
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/TypedUpdater.java,"
public Class getValueType () {
    return valueType;
}
",118,121
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/TypedUpdater.java,"
public void setValueType (Class valueType) {
    this.valueType = valueType;
}
",130,133
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/TypedUpdater.java,"
protected void handleException (Context context, Exception e) {
    log.info (""Caught exception: "" + e, e);
}
",147,150
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MapEntryAdder.java,"
public static void setLog (Log newLog) {
    log = newLog;
}
",61,64
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MapEntryAdder.java,"
public MapEntryAdder (Method method) {
    Class [] types = method.getParameterTypes ();
    if (types == null || types.length != 2) {
        throw new IllegalArgumentException (""Method used to add entries to maps must have two parameter."");
    }
    this.adderMethod = method;
}
",92,102
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MapEntryAdder.java,"
public Updater getKeyUpdater () {
    return new Updater () {
        public void update (Context context, Object keyValue) {
            if (! keyUpdated) {
                keyUpdated = true;
                key = keyValue;
                if (log.isTraceEnabled ()) {
                    log.trace (""Setting entry key to "" + key);
                    log.trace (""Current entry value is "" + value);
                }
                if (valueUpdated) {
                    callAdderMethod (context);
                }
            }
        }
    }
    ;
}
",115,139
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MapEntryAdder.java,"
public void update (Context context, Object keyValue) {
    if (! keyUpdated) {
        keyUpdated = true;
        key = keyValue;
        if (log.isTraceEnabled ()) {
            log.trace (""Setting entry key to "" + key);
            log.trace (""Current entry value is "" + value);
        }
        if (valueUpdated) {
            callAdderMethod (context);
        }
    }
}
",120,137
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MapEntryAdder.java,"
public Updater getValueUpdater () {
    return new Updater () {
        public void update (Context context, Object valueValue) {
            if (! valueUpdated) {
                valueUpdated = true;
                value = valueValue;
                if (log.isTraceEnabled ()) {
                    log.trace (""Setting entry value to "" + value);
                    log.trace (""Current entry key is "" + key);
                }
                if (keyUpdated) {
                    callAdderMethod (context);
                }
            }
        }
    }
    ;
}
",149,173
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MapEntryAdder.java,"
public void update (Context context, Object valueValue) {
    if (! valueUpdated) {
        valueUpdated = true;
        value = valueValue;
        if (log.isTraceEnabled ()) {
            log.trace (""Setting entry value to "" + value);
            log.trace (""Current entry key is "" + key);
        }
        if (keyUpdated) {
            callAdderMethod (context);
        }
    }
}
",154,171
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/expression/MapEntryAdder.java,"
private void callAdderMethod (Context context) {
    log.trace (""Calling adder method"");
    keyUpdated = false;
    valueUpdated = false;
    Class [] types = adderMethod.getParameterTypes ();
    Class keyType = types [0];
    Class valueType = types [1];
    Object bean = context.getBean ();
    if (bean != null) {
        if (key instanceof String) {
            key = context.getObjectStringConverter ().stringToObject ((String) key, keyType, context);
        }
        if (value instanceof String) {
            value = context.getObjectStringConverter ().stringToObject ((String) value, valueType, context);
        }
        if (value instanceof Collection && valueType.isArray ()) {
            Collection valuesAsCollection = (Collection) value;
            Class componentType = valueType.getComponentType ();
            if (componentType != null) {
                Object [] valuesAsArray = (Object []) Array.newInstance (componentType, valuesAsCollection.size ());
                value = valuesAsCollection.toArray (valuesAsArray);
            }
        }
        Object [] arguments = {key, value};
        try {
            if (log.isTraceEnabled ()) {
                log.trace (""Calling adder method: "" + adderMethod.getName () + "" on bean: "" + bean + "" with key: "" + key + "" and value: "" + value);
            }
            adderMethod.invoke (bean, arguments);
        } catch (Exception e) {
            log.warn (""Cannot evaluate adder method: "" + adderMethod.getName () + "" on bean: "" + bean + "" of type: "" + bean.getClass ().getName () + "" with value: "" + value + "" of type: "" + valueType + "" and key: "" + key + "" of type: "" + keyType);
            log.debug (e);
        }
    }
}
",186,263
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/NodeDescriptor.java,"
public NodeDescriptor () {
}
",39,41
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/NodeDescriptor.java,"
public NodeDescriptor (String localName) {
    this.localName = localName;
    this.qualifiedName = localName;
}
",49,53
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/NodeDescriptor.java,"
public NodeDescriptor (String localName, String qualifiedName, String uri) {
    this.localName = localName;
    this.qualifiedName = qualifiedName;
    this.uri = uri;
}
",62,67
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/NodeDescriptor.java,"
public String getLocalName () {
    return localName;
}
",73,76
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/NodeDescriptor.java,"
public void setLocalName (String localName) {
    this.localName = localName;
}
",82,85
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/NodeDescriptor.java,"
public String getQualifiedName () {
    if (qualifiedName == null) {
        qualifiedName = localName;
    }
    return qualifiedName;
}
",91,98
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/NodeDescriptor.java,"
public void setQualifiedName (String qualifiedName) {
    this.qualifiedName = qualifiedName;
}
",104,107
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/NodeDescriptor.java,"
public String getURI () {
    return uri;
}
",114,117
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/NodeDescriptor.java,"
public void setURI (String uri) {
    if (uri == null) {
        throw new IllegalArgumentException (""The namespace URI cannot be null. "" + ""No namespace URI is specified with the empty string"");
    }
    this.uri = uri;
}
",124,134
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/ClassRule.java,"
public ClassRule () {
}
",38,40
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/ClassRule.java,"
public void begin (Attributes attributes) throws SAXException {
    String className = attributes.getValue (""name"");
    if (className == null || """".equals (className)) {
        throw new SAXException (""Invalid 'class' element.  "" + ""Attribute 'name' is required but was not found but was not found."");
    }
    try {
        Class beanClass = Class.forName (className);
        XMLBeanInfo xmlBeanInfo = new XMLBeanInfo (beanClass);
        XMLBeanInfoDigester xmlBeanInfoDigester = (XMLBeanInfoDigester) getDigester ();
        xmlBeanInfoDigester.setBeanClass (beanClass);
        xmlBeanInfoDigester.push (xmlBeanInfo);
    } catch (ClassNotFoundException e) {
        throw new SAXException (""Invalid 'class' element.  Unable to find class: "" + className, e);
    }
}
",50,73
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/ClassRule.java,"
public void end () {
    XMLBeanInfo xmlBeanInfo = (XMLBeanInfo) getDigester ().pop ();
    MultiMappingBeanInfoDigester digester = (MultiMappingBeanInfoDigester) getDigester ();
    Map xmlBeanInfoMapping = digester.getBeanInfoMap ();
    xmlBeanInfoMapping.put (xmlBeanInfo.getBeanClass (), xmlBeanInfo);
    digester.setBeanClass (null);
}
",78,85
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/AddDefaultsRule.java,"
public AddDefaultsRule () {
}
",47,49
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/AddDefaultsRule.java,"
public void begin (String name, String namespace, Attributes attributes) throws Exception {
    boolean addProperties = true;
    String addPropertiesAttributeValue = attributes.getValue (""add-properties"");
    if (addPropertiesAttributeValue != null) {
        addProperties = Boolean.valueOf (addPropertiesAttributeValue).booleanValue ();
    }
    boolean addAdders = true;
    String addAddersAttributeValue = attributes.getValue (""add-adders"");
    if (addAddersAttributeValue != null) {
        addAdders = Boolean.valueOf (addAddersAttributeValue).booleanValue ();
    }
    boolean guessNames = true;
    String guessNamesAttributeValue = attributes.getValue (""guess-names"");
    if (guessNamesAttributeValue != null) {
        guessNames = Boolean.valueOf (guessNamesAttributeValue).booleanValue ();
    }
    if (addProperties) {
        addDefaultProperties ();
    }
    if (addAdders) {
        addAdders (guessNames);
    }
}
",60,92
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/AddDefaultsRule.java,"
private void addAdders (boolean guessNames) {
    Class beanClass = getBeanClass ();
    getXMLIntrospector ().defaultAddMethods (getRootElementDescriptor (), beanClass, ! guessNames);
}
",97,104
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/AddDefaultsRule.java,"
private void addDefaultProperties () {
    Class beanClass = getBeanClass ();
    Set processedProperties = getProcessedPropertyNameSet ();
    if (beanClass != null) {
        try {
            boolean attributesForPrimitives = getXMLInfoDigester ().isAttributesForPrimitives ();
            BeanInfo beanInfo;
            if (getXMLIntrospector ().getConfiguration ().ignoreAllBeanInfo ()) {
                beanInfo = Introspector.getBeanInfo (beanClass, Introspector.IGNORE_ALL_BEANINFO);
            }
            else {
                beanInfo = Introspector.getBeanInfo (beanClass);
            }
            PropertyDescriptor [] descriptors = beanInfo.getPropertyDescriptors ();
            if (descriptors != null) {
                for (int i = 0, size = descriptors.length; i < size; i ++) {
                    PropertyDescriptor descriptor = descriptors [i];
                    String propertyName = descriptor.getName ();
                    if (processedProperties.contains (propertyName)) {
                        continue;
                    }
                    if (! getXMLIntrospector ().getConfiguration ().getPropertySuppressionStrategy ().suppressProperty (beanClass, descriptor.getPropertyType (), descriptor.getName ())) {
                        Descriptor nodeDescriptor = getXMLIntrospector ().createXMLDescriptor (new BeanProperty (descriptor));
                        if (nodeDescriptor != null) {
                            addDescriptor (nodeDescriptor);
                        }
                    }
                }
            }
        } catch (Exception e) {
            log.info (""Caught introspection exception"", e);
        }
    }
}
",110,161
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/AddDefaultsRule.java,"
protected void addDescriptor (NodeDescriptor nodeDescriptor) throws SAXException {
    addDescriptor ((Descriptor) nodeDescriptor);
}
",176,179
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/AddDefaultsRule.java,"
protected void addDescriptor (Descriptor nodeDescriptor) throws SAXException {
    Object top = digester.peek ();
    if (top instanceof XMLBeanInfo) {
        log.warn (""It is advisable to put an <addDefaults/> element inside an <element> tag"");
        XMLBeanInfo beanInfo = (XMLBeanInfo) top;
        if (nodeDescriptor instanceof ElementDescriptor) {
            ElementDescriptor elementDescriptor = (ElementDescriptor) nodeDescriptor;
            ElementDescriptor root = beanInfo.getElementDescriptor ();
            if (root == null) {
                beanInfo.setElementDescriptor (elementDescriptor);
            }
            else {
                root.addElementDescriptor (elementDescriptor);
            }
        }
        else {
            throw new SAXException (""the <addDefaults> element should be within an <element> tag"");
        }
    }
    else if (top instanceof ElementDescriptor) {
        ElementDescriptor parent = (ElementDescriptor) top;
        if (nodeDescriptor instanceof ElementDescriptor) {
            parent.addElementDescriptor ((ElementDescriptor) nodeDescriptor);
        }
        else {
            parent.addAttributeDescriptor ((AttributeDescriptor) nodeDescriptor);
        }
    }
    else {
        throw new SAXException (""Invalid use of <addDefaults>. It should be nested inside <element> element"");
    }
}
",190,236
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/AddDefaultsRule.java,"
protected ElementDescriptor getRootElementDescriptor () {
    Object top = digester.peek ();
    if (top instanceof XMLBeanInfo) {
        XMLBeanInfo beanInfo = (XMLBeanInfo) top;
        return beanInfo.getElementDescriptor ();
    }
    else if (top instanceof ElementDescriptor) {
        ElementDescriptor parent = (ElementDescriptor) top;
        return parent;
    }
    return null;
}
",245,261
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/MappedPropertyRule.java,"
public MappedPropertyRule () {
    this.classLoader = getClass ().getClassLoader ();
}
",40,43
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/MappedPropertyRule.java,"
protected PropertyDescriptor getPropertyDescriptor (Class beanClass, String propertyName) {
    if (beanClass != null && propertyName != null) {
        if (log.isTraceEnabled ()) {
            log.trace (""Searching for property "" + propertyName + "" on "" + beanClass);
        }
        try {
            BeanInfo beanInfo;
            if (getXMLIntrospector ().getConfiguration ().ignoreAllBeanInfo ()) {
                beanInfo = Introspector.getBeanInfo (beanClass, Introspector.IGNORE_ALL_BEANINFO);
            }
            else {
                beanInfo = Introspector.getBeanInfo (beanClass);
            }
            PropertyDescriptor [] descriptors = beanInfo.getPropertyDescriptors ();
            if (descriptors != null) {
                for (int i = 0, size = descriptors.length; i < size; i ++) {
                    PropertyDescriptor descriptor = descriptors [i];
                    if (propertyName.equals (descriptor.getName ())) {
                        log.trace (""Found matching method."");
                        return descriptor;
                    }
                }
            }
            if (beanClass.isInterface ()) {
                Class [] superinterfaces = beanClass.getInterfaces ();
                for (int i = 0, size = superinterfaces.length; i < size; i ++) {
                    PropertyDescriptor descriptor = getPropertyDescriptor (superinterfaces [i], propertyName);
                    if (descriptor != null) {
                        return descriptor;
                    }
                }
            }
            log.trace (""No match found."");
            return null;
        } catch (Exception e) {
            log.warn (""Caught introspection exception"", e);
        }
    }
    return null;
}
",59,119
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/MappedPropertyRule.java,"
protected Class getPropertyType (String propertyClassName, Class beanClass, String propertyName) {
    if (propertyClassName != null) {
        try {
            Class answer = classLoader.loadClass (propertyClassName);
            if (answer != null) {
                if (log.isTraceEnabled ()) {
                    log.trace (""Used specified type "" + answer);
                }
                return answer;
            }
        } catch (Exception e) {
            log.warn (""Cannot load specified type"", e);
        }
    }
    PropertyDescriptor descriptor = getPropertyDescriptor (beanClass, propertyName);
    if (descriptor != null) {
        return descriptor.getPropertyType ();
    }
    if (log.isTraceEnabled ()) {
        log.trace (""Cannot find property type."");
        log.trace (""  className="" + propertyClassName + "" base="" + beanClass + "" name="" + propertyName);
    }
    return null;
}
",130,169
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/MultiMappingBeanInfoDigester.java,"
protected void configure () {
    if (! configured) {
        configured = true;
        addRule (""betwixt-config"", new ConfigRule ());
        addRule (""betwixt-config/class"", new ClassRule ());
        addRuleSet (new CommonRuleSet ());
    }
    getProcessedPropertyNameSet ().clear ();
    getXMLIntrospector ().getRegistry ().flush ();
}
",39,55
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/MultiMappingBeanInfoDigester.java,"
public Map getBeanInfoMap () {
    return beanInfoMap;
}
",63,66
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/MultiMappingBeanInfoDigester.java,"
public void setBeanInfoMap (Map beanInfoMap) {
    this.beanInfoMap = beanInfoMap;
}
",72,75
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/ConfigRule.java,"
public ConfigRule () {
}
",36,38
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/ConfigRule.java,"
public void begin (Attributes attributes) throws SAXException {
    String value = attributes.getValue (""primitiveTypes"");
    if (value != null) {
        if (value.equalsIgnoreCase (""element"")) {
            getXMLInfoDigester ().setAttributesForPrimitives (false);
        }
        else if (value.equalsIgnoreCase (""attribute"")) {
            getXMLInfoDigester ().setAttributesForPrimitives (true);
        }
        else {
            throw new SAXException (""Invalid value inside element <betwixt-config> for attribute 'primitiveTypes'."" + "" Value should be 'element' or 'attribute'"");
        }
    }
    MultiMappingBeanInfoDigester digester = (MultiMappingBeanInfoDigester) getDigester ();
    getDigester ().push (digester.getBeanInfoMap ());
}
",47,70
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/ConfigRule.java,"
public void end () {
    Object top = getDigester ().pop ();
}
",74,77
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/ElementRule.java,"
public static final void setLog (Log newLog) {
    log = newLog;
}
",59,62
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/ElementRule.java,"
public ElementRule () {
}
",68,70
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/ElementRule.java,"
public void begin (String name, String namespace, Attributes attributes) throws SAXException {
    String nameAttributeValue = attributes.getValue (""name"");
    ElementDescriptor descriptor = new ElementDescriptor ();
    descriptor.setLocalName (nameAttributeValue);
    String uri = attributes.getValue (""uri"");
    String qName = nameAttributeValue;
    if (uri != null && nameAttributeValue != null) {
        descriptor.setURI (uri);
        String prefix = getXMLIntrospector ().getConfiguration ().getPrefixMapper ().getPrefix (uri);
        qName = prefix + "":"" + nameAttributeValue;
    }
    descriptor.setQualifiedName (qName);
    String propertyName = attributes.getValue (""property"");
    descriptor.setPropertyName (propertyName);
    String propertyType = attributes.getValue (""type"");
    if (log.isTraceEnabled ()) {
        log.trace (""(BEGIN) name="" + nameAttributeValue + "" uri="" + uri + "" property="" + propertyName + "" type="" + propertyType);
    }
    String mappingDerivation = attributes.getValue (""mappingDerivation"");
    if (""introspection"".equals (mappingDerivation)) {
        descriptor.setUseBindTimeTypeForMapping (false);
    }
    else if (""bind"".equals (mappingDerivation)) {
        descriptor.setUseBindTimeTypeForMapping (true);
    }
    descriptor.setPropertyType (getPropertyType (propertyType, beanClass, propertyName));
    boolean isCollective = getXMLIntrospector ().getConfiguration ().isLoopType (descriptor.getPropertyType ());
    descriptor.setCollective (isCollective);
    if (! isCollective && (nameAttributeValue == null || nameAttributeValue.trim ().equals (""""))) {
        log.info (""No name attribute has been specified. This element will be polymorphic."");
    }
    if (nameAttributeValue != null && ! XMLUtils.isWellFormedXMLName (nameAttributeValue)) {
        throw new SAXException (""'"" + nameAttributeValue + ""' would not be a well formed xml element name."");
    }
    String implementationClass = attributes.getValue (""class"");
    if (log.isTraceEnabled ()) {
        log.trace (""'class' attribute="" + implementationClass);
    }
    if (implementationClass != null) {
        try {
            Class clazz = Class.forName (implementationClass);
            descriptor.setImplementationClass (clazz);
        } catch (Exception e) {
            if (log.isDebugEnabled ()) {
                log.debug (""Cannot load class named: "" + implementationClass, e);
            }
            throw new SAXException (""Cannot load class named: "" + implementationClass);
        }
    }
    if (propertyName != null && propertyName.length () > 0) {
        boolean forceAccessible = ""true"".equals (attributes.getValue (""forceAccessible""));
        configureDescriptor (descriptor, attributes.getValue (""updater""), forceAccessible);
    }
    else {
        String value = attributes.getValue (""value"");
        if (value != null) {
            descriptor.setTextExpression (new ConstantExpression (value));
        }
    }
    Object top = digester.peek ();
    if (top instanceof XMLBeanInfo) {
        XMLBeanInfo beanInfo = (XMLBeanInfo) top;
        beanInfo.setElementDescriptor (descriptor);
        beanClass = beanInfo.getBeanClass ();
        descriptor.setPropertyType (beanClass);
    }
    else if (top instanceof ElementDescriptor) {
        ElementDescriptor parent = (ElementDescriptor) top;
        parent.addElementDescriptor (descriptor);
    }
    else {
        throw new SAXException (""Invalid use of <element>. It should "" + ""be nested inside <info> or other <element> nodes"");
    }
    digester.push (descriptor);
}
",86,219
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/ElementRule.java,"
public void end (String name, String namespace) {
    ElementDescriptor descriptor = (ElementDescriptor) digester.pop ();
    final Object peek = digester.peek ();
    if (peek instanceof ElementDescriptor) {
        ElementDescriptor parent = (ElementDescriptor) digester.peek ();
        if (getXMLIntrospector ().getConfiguration ().getElementSuppressionStrategy ().suppress (descriptor)) {
            parent.removeElementDescriptor (descriptor);
        }
    }
}
",224,240
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/ElementRule.java,"
protected void configureDescriptor (ElementDescriptor elementDescriptor) {
    configureDescriptor (elementDescriptor, null);
}
",253,256
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/ElementRule.java,"
protected void configureDescriptor (ElementDescriptor elementDescriptor, String updateMethodName) {
    configureDescriptor (elementDescriptor, null, false);
}
",274,278
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/ElementRule.java,"
private void configureDescriptor (ElementDescriptor elementDescriptor, String updateMethodName, boolean forceAccessible) {
    Class beanClass = getBeanClass ();
    if (beanClass != null) {
        String name = elementDescriptor.getPropertyName ();
        PropertyDescriptor descriptor = getPropertyDescriptor (beanClass, name);
        if (descriptor == null) {
            if (log.isDebugEnabled ()) {
                log.debug (""Cannot find property matching "" + name);
            }
        }
        else {
            configureProperty (elementDescriptor, descriptor, updateMethodName, forceAccessible, beanClass);
            getProcessedPropertyNameSet ().add (name);
        }
    }
}
",293,318
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/ElementRule.java,"
private void configureProperty (ElementDescriptor elementDescriptor, PropertyDescriptor propertyDescriptor, String updateMethodName, boolean forceAccessible, Class beanClass) {
    Class type = propertyDescriptor.getPropertyType ();
    Method readMethod = propertyDescriptor.getReadMethod ();
    Method writeMethod = propertyDescriptor.getWriteMethod ();
    elementDescriptor.setPropertyType (type);
    if (readMethod == null) {
        log.trace (""No read method"");
        return;
    }
    if (log.isTraceEnabled ()) {
        log.trace (""Read method="" + readMethod.getName ());
    }
    final MethodExpression methodExpression = new MethodExpression (readMethod);
    if (getXMLIntrospector ().isPrimitiveType (type)) {
        elementDescriptor.setTextExpression (methodExpression);
    }
    else if (getXMLIntrospector ().isLoopType (type)) {
        log.trace (""Loop type ??"");
        Expression expression = methodExpression;
        boolean standardProperty = false;
        if (updateMethodName != null && writeMethod != null && writeMethod.getName ().equals (updateMethodName)) {
            final Class [] parameters = writeMethod.getParameterTypes ();
            if (parameters.length == 1) {
                Class setterType = parameters [0];
                if (type.equals (setterType)) {
                    standardProperty = true;
                }
            }
        }
        if (! standardProperty) {
            expression = new IteratorExpression (methodExpression);
        }
        elementDescriptor.setContextExpression (expression);
        elementDescriptor.setHollow (true);
        writeMethod = null;
        if (Map.class.isAssignableFrom (type)) {
            elementDescriptor.setLocalName (""entry"");
            ElementDescriptor keyDescriptor = new ElementDescriptor (""key"");
            keyDescriptor.setHollow (true);
            elementDescriptor.addElementDescriptor (keyDescriptor);
            ElementDescriptor valueDescriptor = new ElementDescriptor (""value"");
            valueDescriptor.setHollow (true);
            elementDescriptor.addElementDescriptor (valueDescriptor);
        }
    }
    else {
        log.trace (""Standard property"");
        elementDescriptor.setHollow (true);
        elementDescriptor.setContextExpression (methodExpression);
    }
    if (updateMethodName == null) {
        if (writeMethod != null) {
            elementDescriptor.setUpdater (new MethodUpdater (writeMethod));
        }
    }
    else {
        if (log.isTraceEnabled ()) {
            log.trace (""Finding custom method: "");
            log.trace (""  on:"" + beanClass);
            log.trace (""  name:"" + updateMethodName);
        }
        Method updateMethod;
        boolean isMapTypeProperty = Map.class.isAssignableFrom (type);
        if (forceAccessible) {
            updateMethod = findAnyMethod (updateMethodName, beanClass, isMapTypeProperty);
        }
        else {
            updateMethod = findPublicMethod (updateMethodName, beanClass, isMapTypeProperty);
        }
        if (updateMethod == null) {
            if (log.isInfoEnabled ()) {
                log.info (""No method with name '"" + updateMethodName + ""' found for update"");
            }
        }
        else {
            if (Map.class.isAssignableFrom (type)) {
                getXMLIntrospector ().assignAdder (updateMethod, elementDescriptor);
            }
            else {
                elementDescriptor.setUpdater (new MethodUpdater (updateMethod));
                Class singularType = updateMethod.getParameterTypes () [0];
                elementDescriptor.setSingularPropertyType (singularType);
                if (singularType != null) {
                    boolean isPrimitive = getXMLIntrospector ().isPrimitiveType (singularType);
                    if (isPrimitive) {
                        log.debug (""Primitive collective: setting hollow to false"");
                        elementDescriptor.setHollow (false);
                    }
                }
                if (log.isTraceEnabled ()) {
                    log.trace (""Set custom updater on "" + elementDescriptor);
                }
            }
        }
    }
}
",340,501
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/ElementRule.java,"
private Method findPublicMethod (String updateMethodName, Class beanType, boolean isMapTypeProperty) {
    Method [] methods = beanType.getMethods ();
    Method updateMethod = searchMethodsForMatch (updateMethodName, methods, isMapTypeProperty);
    return updateMethod;
}
",503,508
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/ElementRule.java,"
private Method searchMethodsForMatch (String updateMethodName, Method [] methods, boolean isMapType) {
    Method updateMethod = null;
    for (int i = 0, size = methods.length; i < size; i ++) {
        Method method = methods [i];
        if (updateMethodName.equals (method.getName ())) {
            int numParams = 1;
            if (isMapType) {
                numParams = 2;
            }
            if (methods [i].getParameterTypes ().length == numParams) {
                updateMethod = methods [i];
                if (log.isTraceEnabled ()) {
                    log.trace (""Matched method:"" + updateMethod);
                }
                break;
            }
        }
    }
    return updateMethod;
}
",510,544
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/ElementRule.java,"
private Method findAnyMethod (String updateMethodName, Class beanType, boolean isMapTypeProperty) {
    Method updateMethod = null;
    Class classToTry = beanType;
    do {
        Method [] methods = classToTry.getDeclaredMethods ();
        updateMethod = searchMethodsForMatch (updateMethodName, methods, isMapTypeProperty);
        classToTry = classToTry.getSuperclass ();
    }
    while (updateMethod == null && classToTry != null);
    if (updateMethod != null) {
        boolean isPublic = Modifier.isPublic (updateMethod.getModifiers ()) && Modifier.isPublic (beanType.getModifiers ());
        if (! isPublic) {
            updateMethod.setAccessible (true);
        }
    }
    return updateMethod;
}
",546,574
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLIntrospectorHelper.java,"
public XMLIntrospectorHelper () {
}
",62,64
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLIntrospectorHelper.java,"
public static Log getLog () {
    return log;
}
",71,74
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLIntrospectorHelper.java,"
public static void setLog (Log aLog) {
    log = aLog;
}
",81,84
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLIntrospectorHelper.java,"
public static NodeDescriptor createDescriptor (PropertyDescriptor propertyDescriptor, boolean useAttributesForPrimitives, XMLIntrospector introspector) throws IntrospectionException {
    String name = propertyDescriptor.getName ();
    Class type = propertyDescriptor.getPropertyType ();
    if (log.isTraceEnabled ()) {
        log.trace (""Creating descriptor for property: name="" + name + "" type="" + type);
    }
    NodeDescriptor nodeDescriptor = null;
    Method readMethod = propertyDescriptor.getReadMethod ();
    Method writeMethod = propertyDescriptor.getWriteMethod ();
    if (readMethod == null) {
        if (log.isTraceEnabled ()) {
            log.trace (""No read method for property: name="" + name + "" type="" + type);
        }
        return null;
    }
    if (log.isTraceEnabled ()) {
        log.trace (""Read method="" + readMethod.getName ());
    }
    if (Class.class.equals (type) && ""class"".equals (name)) {
        log.trace (""Ignoring class property"");
        return null;
    }
    if (isPrimitiveType (type)) {
        if (log.isTraceEnabled ()) {
            log.trace (""Primitive type: "" + name);
        }
        if (useAttributesForPrimitives) {
            if (log.isTraceEnabled ()) {
                log.trace (""Adding property as attribute: "" + name);
            }
            nodeDescriptor = new AttributeDescriptor ();
        }
        else {
            if (log.isTraceEnabled ()) {
                log.trace (""Adding property as element: "" + name);
            }
            nodeDescriptor = new ElementDescriptor (true);
        }
        nodeDescriptor.setTextExpression (new MethodExpression (readMethod));
        if (writeMethod != null) {
            nodeDescriptor.setUpdater (new MethodUpdater (writeMethod));
        }
    }
    else if (isLoopType (type)) {
        if (log.isTraceEnabled ()) {
            log.trace (""Loop type: "" + name);
            log.trace (""Wrap in collections? "" + introspector.isWrapCollectionsInElement ());
        }
        ElementDescriptor loopDescriptor = new ElementDescriptor ();
        loopDescriptor.setContextExpression (new IteratorExpression (new MethodExpression (readMethod)));
        loopDescriptor.setWrapCollectionsInElement (introspector.isWrapCollectionsInElement ());
        if (Map.class.isAssignableFrom (type)) {
            loopDescriptor.setQualifiedName (""entry"");
            loopDescriptor.addElementDescriptor (new ElementDescriptor (""key""));
            loopDescriptor.addElementDescriptor (new ElementDescriptor (""value""));
        }
        ElementDescriptor elementDescriptor = new ElementDescriptor ();
        elementDescriptor.setWrapCollectionsInElement (introspector.isWrapCollectionsInElement ());
        elementDescriptor.setElementDescriptors (new ElementDescriptor [] {loopDescriptor});
        nodeDescriptor = elementDescriptor;
    }
    else {
        if (log.isTraceEnabled ()) {
            log.trace (""Standard property: "" + name);
        }
        ElementDescriptor elementDescriptor = new ElementDescriptor ();
        elementDescriptor.setContextExpression (new MethodExpression (readMethod));
        if (writeMethod != null) {
            elementDescriptor.setUpdater (new MethodUpdater (writeMethod));
        }
        nodeDescriptor = elementDescriptor;
    }
    if (nodeDescriptor instanceof AttributeDescriptor) {
        nodeDescriptor.setLocalName (introspector.getAttributeNameMapper ().mapTypeToElementName (name));
    }
    else {
        nodeDescriptor.setLocalName (introspector.getElementNameMapper ().mapTypeToElementName (name));
    }
    nodeDescriptor.setPropertyName (propertyDescriptor.getName ());
    nodeDescriptor.setPropertyType (type);
    if (log.isTraceEnabled ()) {
        log.trace (""Created descriptor:"");
        log.trace (nodeDescriptor);
    }
    return nodeDescriptor;
}
",100,242
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLIntrospectorHelper.java,"
public static void configureProperty (ElementDescriptor elementDescriptor, PropertyDescriptor propertyDescriptor) {
    configureProperty (elementDescriptor, propertyDescriptor, null, null);
}
",252,258
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLIntrospectorHelper.java,"
public static void configureProperty (ElementDescriptor elementDescriptor, PropertyDescriptor propertyDescriptor, String updateMethodName, Class beanClass) {
    Class type = propertyDescriptor.getPropertyType ();
    Method readMethod = propertyDescriptor.getReadMethod ();
    Method writeMethod = propertyDescriptor.getWriteMethod ();
    elementDescriptor.setLocalName (propertyDescriptor.getName ());
    elementDescriptor.setPropertyType (type);
    if (readMethod == null) {
        log.trace (""No read method"");
        return;
    }
    if (log.isTraceEnabled ()) {
        log.trace (""Read method="" + readMethod.getName ());
    }
    if (Class.class.equals (type) && ""class"".equals (propertyDescriptor.getName ())) {
        log.trace (""Ignoring class property"");
        return;
    }
    if (isPrimitiveType (type)) {
        elementDescriptor.setTextExpression (new MethodExpression (readMethod));
    }
    else if (isLoopType (type)) {
        log.trace (""Loop type ??"");
        elementDescriptor.setContextExpression (new IteratorExpression (new MethodExpression (readMethod)));
        writeMethod = null;
    }
    else {
        log.trace (""Standard property"");
        elementDescriptor.setContextExpression (new MethodExpression (readMethod));
    }
    if (updateMethodName == null) {
        if (writeMethod != null) {
            elementDescriptor.setUpdater (new MethodUpdater (writeMethod));
        }
    }
    else {
        if (log.isTraceEnabled ()) {
            log.trace (""Finding custom method: "");
            log.trace (""  on:"" + beanClass);
            log.trace (""  name:"" + updateMethodName);
        }
        Method updateMethod = null;
        Method [] methods = beanClass.getMethods ();
        for (int i = 0, size = methods.length; i < size; i ++) {
            Method method = methods [i];
            if (updateMethodName.equals (method.getName ())) {
                if (methods [i].getParameterTypes ().length == 1) {
                    updateMethod = methods [i];
                    if (log.isTraceEnabled ()) {
                        log.trace (""Matched method:"" + updateMethod);
                    }
                    break;
                }
            }
        }
        if (updateMethod == null) {
            if (log.isInfoEnabled ()) {
                log.info (""No method with name '"" + updateMethodName + ""' found for update"");
            }
        }
        else {
            elementDescriptor.setUpdater (new MethodUpdater (updateMethod));
            elementDescriptor.setSingularPropertyType (updateMethod.getParameterTypes () [0]);
            if (log.isTraceEnabled ()) {
                log.trace (""Set custom updater on "" + elementDescriptor);
            }
        }
    }
}
",273,395
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLIntrospectorHelper.java,"
public static void configureProperty (AttributeDescriptor attributeDescriptor, PropertyDescriptor propertyDescriptor) {
    Class type = propertyDescriptor.getPropertyType ();
    Method readMethod = propertyDescriptor.getReadMethod ();
    Method writeMethod = propertyDescriptor.getWriteMethod ();
    if (readMethod == null) {
        log.trace (""No read method"");
        return;
    }
    if (log.isTraceEnabled ()) {
        log.trace (""Read method="" + readMethod);
    }
    if (Class.class.equals (type) && ""class"".equals (propertyDescriptor.getName ())) {
        log.trace (""Ignoring class property"");
        return;
    }
    if (isLoopType (type)) {
        log.warn (""Using loop type for an attribute. Type = "" + type.getName () + "" attribute: "" + attributeDescriptor.getQualifiedName ());
    }
    log.trace (""Standard property"");
    attributeDescriptor.setTextExpression (new MethodExpression (readMethod));
    if (writeMethod != null) {
        attributeDescriptor.setUpdater (new MethodUpdater (writeMethod));
    }
    attributeDescriptor.setLocalName (propertyDescriptor.getName ());
    attributeDescriptor.setPropertyType (type);
}
",404,451
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLIntrospectorHelper.java,"
public static void defaultAddMethods (XMLIntrospector introspector, ElementDescriptor rootDescriptor, Class beanClass) {
    if (beanClass != null) {
        Method [] methods = beanClass.getMethods ();
        for (int i = 0, size = methods.length; i < size; i ++) {
            Method method = methods [i];
            String name = method.getName ();
            if (name.startsWith (""add"")) {
                Class [] types = method.getParameterTypes ();
                if (types != null) {
                    if (log.isTraceEnabled ()) {
                        log.trace (""Searching for match for "" + method);
                    }
                    if ((types.length == 1) || types.length == 2) {
                        String propertyName = Introspector.decapitalize (name.substring (3));
                        if (propertyName.length () == 0) continue;
                        if (log.isTraceEnabled ()) {
                            log.trace (name + ""->"" + propertyName);
                        }
                        ElementDescriptor descriptor = findGetCollectionDescriptor (introspector, rootDescriptor, propertyName);
                        if (log.isDebugEnabled ()) {
                            log.debug (""!! "" + propertyName + "" -> "" + descriptor);
                            log.debug (""!! "" + name + "" -> "" + (descriptor != null ? descriptor.getPropertyName () : """"));
                        }
                        if (descriptor != null) {
                            boolean isMapDescriptor = Map.class.isAssignableFrom (descriptor.getPropertyType ());
                            if (! isMapDescriptor && types.length == 1) {
                                log.trace (""Matching collection or iteration"");
                                descriptor.setUpdater (new MethodUpdater (method));
                                descriptor.setSingularPropertyType (types [0]);
                                if (log.isDebugEnabled ()) {
                                    log.debug (""!! "" + method);
                                    log.debug (""!! "" + types [0]);
                                }
                                ElementDescriptor [] children = descriptor.getElementDescriptors ();
                                if (children != null && children.length > 0) {
                                    ElementDescriptor child = children [0];
                                    String localName = child.getLocalName ();
                                    if (localName == null || localName.length () == 0) {
                                        child.setLocalName (introspector.getElementNameMapper ().mapTypeToElementName (propertyName));
                                    }
                                }
                            }
                            else if (isMapDescriptor && types.length == 2) {
                                log.trace (""Matching map"");
                                ElementDescriptor [] children = descriptor.getElementDescriptors ();
                                if (children.length == 0) {
                                    log.info (""'entry' descriptor is missing for map. "" + ""Updaters cannot be set"");
                                }
                                else {
                                    ElementDescriptor [] grandchildren = children [0].getElementDescriptors ();
                                    MapEntryAdder adder = new MapEntryAdder (method);
                                    for (int n = 0, noOfGrandChildren = grandchildren.length; n < noOfGrandChildren; n ++) {
                                        if (""key"".equals (grandchildren [n].getLocalName ())) {
                                            grandchildren [n].setUpdater (adder.getKeyUpdater ());
                                            grandchildren [n].setSingularPropertyType (types [0]);
                                            if (log.isTraceEnabled ()) {
                                                log.trace (""Key descriptor: "" + grandchildren [n]);
                                            }
                                        }
                                        else if (""value"".equals (grandchildren [n].getLocalName ())) {
                                            grandchildren [n].setUpdater (adder.getValueUpdater ());
                                            grandchildren [n].setSingularPropertyType (types [1]);
                                            if (log.isTraceEnabled ()) {
                                                log.trace (""Value descriptor: "" + grandchildren [n]);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            if (log.isDebugEnabled ()) {
                                log.debug (""Could not find an ElementDescriptor with property name: "" + propertyName + "" to attach the add method: "" + method);
                            }
                        }
                    }
                }
            }
        }
    }
}
",473,636
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLIntrospectorHelper.java,"
public static boolean isLoopType (Class type) {
    if (type == null) {
        log.trace (""isLoopType: type is null"");
        return false;
    }
    return type.isArray () || Map.class.isAssignableFrom (type) || Collection.class.isAssignableFrom (type) || Enumeration.class.isAssignableFrom (type) || Iterator.class.isAssignableFrom (type);
}
",645,658
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLIntrospectorHelper.java,"
public static boolean isPrimitiveType (Class type) {
    if (type == null) {
        return false;
    }
    else if (type.isPrimitive ()) {
        return true;
    }
    else if (type.equals (Object.class)) {
        return false;
    }
    return type.getName ().startsWith (""java.lang."") || Number.class.isAssignableFrom (type) || String.class.isAssignableFrom (type) || Date.class.isAssignableFrom (type) || java.sql.Date.class.isAssignableFrom (type) || java.sql.Time.class.isAssignableFrom (type) || java.sql.Timestamp.class.isAssignableFrom (type) || java.math.BigDecimal.class.isAssignableFrom (type) || java.math.BigInteger.class.isAssignableFrom (type);
}
",672,697
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLIntrospectorHelper.java,"
protected static ElementDescriptor findGetCollectionDescriptor (XMLIntrospector introspector, ElementDescriptor rootDescriptor, String propertyName) {
    Map map = new HashMap ();
    if (log.isTraceEnabled ()) {
        log.trace (""findPluralDescriptor( "" + propertyName + "" ):root property name="" + rootDescriptor.getPropertyName ());
    }
    if (rootDescriptor.getPropertyName () != null) {
        map.put (propertyName, rootDescriptor);
    }
    makeElementDescriptorMap (rootDescriptor, map);
    PluralStemmer stemmer = introspector.getPluralStemmer ();
    ElementDescriptor elementDescriptor = stemmer.findPluralDescriptor (propertyName, map);
    if (log.isTraceEnabled ()) {
        log.trace (""findPluralDescriptor( "" + propertyName + "" ):ElementDescriptor="" + elementDescriptor);
    }
    return elementDescriptor;
}
",715,746
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLIntrospectorHelper.java,"
protected static void makeElementDescriptorMap (ElementDescriptor rootDescriptor, Map map) {
    ElementDescriptor [] children = rootDescriptor.getElementDescriptors ();
    if (children != null) {
        for (int i = 0, size = children.length; i < size; i ++) {
            ElementDescriptor child = children [i];
            String propertyName = child.getPropertyName ();
            if (propertyName != null) {
                map.put (propertyName, child);
            }
            makeElementDescriptorMap (child, map);
        }
    }
}
",756,772
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLIntrospectorHelper.java,"
protected static void swapDescriptor (ElementDescriptor rootDescriptor, ElementDescriptor oldValue, ElementDescriptor newValue) {
    ElementDescriptor [] children = rootDescriptor.getElementDescriptors ();
    if (children != null) {
        for (int i = 0, size = children.length; i < size; i ++) {
            ElementDescriptor child = children [i];
            if (child == oldValue) {
                children [i] = newValue;
                break;
            }
            swapDescriptor (child, oldValue, newValue);
        }
    }
}
",783,802
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/CommonRuleSet.java,"
public void addRuleInstances (Digester digester) {
    digester.addRule (""*/element"", new ElementRule ());
    digester.addRule (""*/text"", new TextRule ());
    digester.addRule (""*/attribute"", new AttributeRule ());
    digester.addRule (""*/hide"", new HideRule ());
    digester.addRule (""*/addDefaults"", new AddDefaultsRule ());
    OptionRule optionRule = new OptionRule ();
    digester.addRule (""*/option"", optionRule);
    digester.addRule (""*/option/name"", optionRule.getNameRule ());
    digester.addRule (""*/option/value"", optionRule.getValueRule ());
}
",34,47
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/OptionRule.java,"
public void begin (String namespace, String name, Attributes attributes) throws Exception {
    currentValue = null;
    currentName = null;
}
",40,45
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/OptionRule.java,"
public void end (String namespace, String name) {
    if (currentName != null && currentValue != null) {
        Object top = getDigester ().peek ();
        if (top instanceof Descriptor) {
            Descriptor descriptor = (Descriptor) top;
            descriptor.getOptions ().addOption (currentName, currentValue);
        }
    }
}
",52,63
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/OptionRule.java,"
public Rule getNameRule () {
    return new Rule () {
        public void body (String namespace, String name, String text) {
            currentName = text;
        }
    }
    ;
}
",70,79
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/OptionRule.java,"
public void body (String namespace, String name, String text) {
    currentName = text;
}
",74,77
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/OptionRule.java,"
public Rule getValueRule () {
    return new Rule () {
        public void body (String namespace, String name, String text) {
            currentValue = text;
        }
    }
    ;
}
",86,95
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/OptionRule.java,"
public void body (String namespace, String name, String text) {
    currentValue = text;
}
",90,93
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/RuleSupport.java,"
public RuleSupport () {
}
",38,40
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/RuleSupport.java,"
protected XMLBeanInfoDigester getXMLInfoDigester () {
    return (XMLBeanInfoDigester) getDigester ();
}
",51,54
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/RuleSupport.java,"
protected XMLIntrospector getXMLIntrospector () {
    return getXMLInfoDigester ().getXMLIntrospector ();
}
",61,64
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/RuleSupport.java,"
protected Class getBeanClass () {
    return getXMLInfoDigester ().getBeanClass ();
}
",71,74
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/RuleSupport.java,"
protected Set getProcessedPropertyNameSet () {
    return getXMLInfoDigester ().getProcessedPropertyNameSet ();
}
",81,84
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLBeanInfoDigester.java,"
public XMLBeanInfoDigester () {
}
",57,59
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLBeanInfoDigester.java,"
public XMLBeanInfoDigester (SAXParser parser) {
    super (parser);
}
",70,73
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLBeanInfoDigester.java,"
public XMLBeanInfoDigester (XMLReader reader) {
    super (reader);
}
",84,87
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLBeanInfoDigester.java,"
public Class getBeanClass () {
    return beanClass;
}
",94,97
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLBeanInfoDigester.java,"
public void setBeanClass (Class beanClass) {
    this.beanClass = beanClass;
}
",104,107
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLBeanInfoDigester.java,"
public Set getProcessedPropertyNameSet () {
    return processedPropertyNameSet;
}
",115,118
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLBeanInfoDigester.java,"
public boolean isAttributesForPrimitives () {
    return attributesForPrimitives;
}
",124,127
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLBeanInfoDigester.java,"
public void setAttributesForPrimitives (boolean attributesForPrimitives) {
    this.attributesForPrimitives = attributesForPrimitives;
    if (introspector != null) {
        introspector.getConfiguration ().setAttributesForPrimitives (attributesForPrimitives);
    }
}
",134,142
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLBeanInfoDigester.java,"
public XMLIntrospector getXMLIntrospector () {
    return introspector;
}
",149,152
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLBeanInfoDigester.java,"
public void setXMLIntrospector (XMLIntrospector introspector) {
    this.introspector = introspector;
}
",159,162
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/XMLBeanInfoDigester.java,"
protected void configure () {
    if (! configured) {
        configured = true;
        addRule (""info"", new InfoRule ());
        addRuleSet (new CommonRuleSet ());
    }
    setAttributesForPrimitives (attributesForPrimitives);
    processedPropertyNameSet.clear ();
}
",167,183
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/AttributeRule.java,"
public AttributeRule () {
    this.classLoader = getClass ().getClassLoader ();
}
",53,56
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/AttributeRule.java,"
public void begin (String name, String namespace, Attributes attributes) throws SAXException {
    AttributeDescriptor descriptor = new AttributeDescriptor ();
    String nameAttributeValue = attributes.getValue (""name"");
    if (! XMLUtils.isWellFormedXMLName (nameAttributeValue)) {
        throw new SAXException (""'"" + nameAttributeValue + ""' would not be a well formed xml attribute name."");
    }
    String qName = nameAttributeValue;
    descriptor.setLocalName (nameAttributeValue);
    String uri = attributes.getValue (""uri"");
    if (uri != null) {
        descriptor.setURI (uri);
        String prefix = getXMLIntrospector ().getConfiguration ().getPrefixMapper ().getPrefix (uri);
        qName = prefix + "":"" + nameAttributeValue;
    }
    descriptor.setQualifiedName (qName);
    String propertyName = attributes.getValue (""property"");
    descriptor.setPropertyName (propertyName);
    descriptor.setPropertyType (loadClass (attributes.getValue (""type"")));
    if (propertyName != null && propertyName.length () > 0) {
        configureDescriptor (descriptor);
    }
    else {
        String value = attributes.getValue (""value"");
        if (value != null) {
            descriptor.setTextExpression (new ConstantExpression (value));
        }
    }
    Object top = digester.peek ();
    if (top instanceof ElementDescriptor) {
        ElementDescriptor parent = (ElementDescriptor) top;
        parent.addAttributeDescriptor (descriptor);
    }
    else {
        throw new SAXException (""Invalid use of <attribute>. It should "" + ""be nested inside an <element> element"");
    }
    digester.push (descriptor);
}
",68,121
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/AttributeRule.java,"
public void end (String name, String namespace) {
    AttributeDescriptor descriptor = (AttributeDescriptor) digester.pop ();
    ElementDescriptor parent = (ElementDescriptor) digester.peek ();
    if (getXMLIntrospector ().getConfiguration ().getAttributeSuppressionStrategy ().suppress (descriptor)) {
        parent.removeAttributeDescriptor (descriptor);
    }
}
",127,137
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/AttributeRule.java,"
protected Class loadClass (String name) {
    if (name != null) {
        try {
            return classLoader.loadClass (name);
        } catch (Exception e) {
        }
    }
    return null;
}
",148,162
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/AttributeRule.java,"
protected void configureDescriptor (AttributeDescriptor attributeDescriptor) {
    Class beanClass = getBeanClass ();
    if (beanClass != null) {
        String name = attributeDescriptor.getPropertyName ();
        try {
            BeanInfo beanInfo;
            if (getXMLIntrospector ().getConfiguration ().ignoreAllBeanInfo ()) {
                beanInfo = Introspector.getBeanInfo (beanClass, Introspector.IGNORE_ALL_BEANINFO);
            }
            else {
                beanInfo = Introspector.getBeanInfo (beanClass);
            }
            PropertyDescriptor [] descriptors = beanInfo.getPropertyDescriptors ();
            if (descriptors != null) {
                for (int i = 0, size = descriptors.length; i < size; i ++) {
                    PropertyDescriptor descriptor = descriptors [i];
                    if (name.equals (descriptor.getName ())) {
                        configureProperty (attributeDescriptor, descriptor);
                        getProcessedPropertyNameSet ().add (name);
                        break;
                    }
                }
            }
        } catch (Exception e) {
            log.warn (""Caught introspection exception"", e);
        }
    }
}
",169,206
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/AttributeRule.java,"
private void configureProperty (AttributeDescriptor attributeDescriptor, PropertyDescriptor propertyDescriptor) {
    Class type = propertyDescriptor.getPropertyType ();
    Method readMethod = propertyDescriptor.getReadMethod ();
    Method writeMethod = propertyDescriptor.getWriteMethod ();
    if (readMethod == null) {
        log.trace (""No read method"");
        return;
    }
    if (log.isTraceEnabled ()) {
        log.trace (""Read method="" + readMethod);
    }
    if (getXMLIntrospector ().isLoopType (type)) {
        log.warn (""Using loop type for an attribute. Type = "" + type.getName () + "" attribute: "" + attributeDescriptor.getQualifiedName ());
    }
    log.trace (""Standard property"");
    attributeDescriptor.setTextExpression (new MethodExpression (readMethod));
    if (writeMethod != null) {
        attributeDescriptor.setUpdater (new MethodUpdater (writeMethod));
    }
    attributeDescriptor.setPropertyName (propertyDescriptor.getName ());
    attributeDescriptor.setPropertyType (type);
}
",214,254
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/TextRule.java,"
public TextRule () {
}
",52,52
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/TextRule.java,"
public void begin (String name, String namespace, Attributes attributes) throws SAXException {
    TextDescriptor descriptor = new TextDescriptor ();
    String value = attributes.getValue (""value"");
    String propertyName = attributes.getValue (""property"");
    String propertyType = attributes.getValue (""type"");
    if (value != null) {
        if (propertyName != null || propertyType != null) {
            throw new SAXException (""You cannot specify attribute 'value' together with either "" + "" the 'property' or 'type' attributes"");
        }
        descriptor.setTextExpression (new ConstantExpression (value));
    }
    else {
        descriptor.setPropertyName (propertyName);
        Class beanClass = getBeanClass ();
        descriptor.setPropertyType (getPropertyType (propertyType, beanClass, propertyName));
        if (beanClass != null) {
            String descriptorPropertyName = descriptor.getPropertyName ();
            PropertyDescriptor propertyDescriptor = getPropertyDescriptor (beanClass, descriptorPropertyName);
            if (propertyDescriptor != null) {
                Method readMethod = propertyDescriptor.getReadMethod ();
                descriptor.setTextExpression (new MethodExpression (readMethod));
                Method writeMethod = propertyDescriptor.getWriteMethod ();
                if (writeMethod != null) {
                    descriptor.setUpdater (new MethodUpdater (writeMethod));
                }
                getProcessedPropertyNameSet ().add (descriptorPropertyName);
            }
        }
    }
    Object top = digester.peek ();
    if (top instanceof XMLBeanInfo) {
        XMLBeanInfo beanInfo = (XMLBeanInfo) top;
        ElementDescriptor elementDescriptor = beanInfo.getElementDescriptor ();
        if (elementDescriptor != null) {
            elementDescriptor.addContentDescriptor (descriptor);
        }
    }
    else if (top instanceof ElementDescriptor) {
        ElementDescriptor parent = (ElementDescriptor) top;
        parent.addContentDescriptor (descriptor);
    }
    else {
        throw new SAXException (""Invalid use of <text>. It should "" + ""be nested <text> nodes"");
    }
}
",65,140
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/InfoRule.java,"
public InfoRule () {
}
",39,41
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/InfoRule.java,"
public void begin (String name, String namespace, Attributes attributes) throws SAXException {
    Class beanClass = getBeanClass ();
    xmlBeanInfo = new XMLBeanInfo (beanClass);
    String value = attributes.getValue (""primitiveTypes"");
    if (value != null) {
        if (value.equalsIgnoreCase (""element"")) {
            getXMLInfoDigester ().setAttributesForPrimitives (false);
        }
        else if (value.equalsIgnoreCase (""attribute"")) {
            getXMLInfoDigester ().setAttributesForPrimitives (true);
        }
        else {
            throw new SAXException (""Invalid value inside element <info> for attribute 'primitiveTypes'."" + "" Value should be 'element' or 'attribute'"");
        }
    }
    getDigester ().push (xmlBeanInfo);
}
",52,80
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/InfoRule.java,"
public void end (String name, String namespace) {
    Object top = getDigester ().pop ();
}
",86,89
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/HideRule.java,"
public HideRule () {
}
",38,40
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/digester/HideRule.java,"
public void begin (String name, String namespace, Attributes attributes) throws SAXException {
    String propertyAttributeValue = attributes.getValue (""property"");
    if (propertyAttributeValue == null || propertyAttributeValue.length () == 0) {
        throw new SAXException (""<hide> element is missing the mandatory attribute 'property'"");
    }
    Set propertySet = getProcessedPropertyNameSet ();
    propertySet.add (propertyAttributeValue);
}
",51,61
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/Descriptor.java,"
public Descriptor () {
}
",46,48
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/Descriptor.java,"
public Expression getTextExpression () {
    return textExpression;
}
",55,58
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/Descriptor.java,"
public void setTextExpression (Expression textExpression) {
    this.textExpression = textExpression;
}
",65,68
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/Descriptor.java,"
public Updater getUpdater () {
    return updater;
}
",75,78
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/Descriptor.java,"
public void setUpdater (Updater updater) {
    this.updater = updater;
}
",85,88
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/Descriptor.java,"
public Class getPropertyType () {
    return propertyType;
}
",94,97
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/Descriptor.java,"
public void setPropertyType (Class propertyType) {
    this.propertyType = propertyType;
}
",103,106
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/Descriptor.java,"
public String getPropertyName () {
    return propertyName;
}
",114,117
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/Descriptor.java,"
public void setPropertyName (String propertyName) {
    this.propertyName = propertyName;
}
",124,127
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/Descriptor.java,"
public Class getSingularPropertyType () {
    if (singularPropertyType == null) {
        return getPropertyType ();
    }
    return singularPropertyType;
}
",135,142
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/Descriptor.java,"
public void setSingularPropertyType (Class singularPropertyType) {
    this.singularPropertyType = singularPropertyType;
}
",150,153
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/Descriptor.java,"
public Options getOptions () {
    return options;
}
",162,165
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/Descriptor.java,"
public void setOptions (Options options) {
    this.options = options;
}
",173,176
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public ElementDescriptor () {
}
",115,117
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public ElementDescriptor (boolean primitiveType) {
    this.primitiveType = primitiveType;
}
",124,127
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public ElementDescriptor (String localName) {
    super (localName);
}
",135,138
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public ElementDescriptor (String localName, String qualifiedName, String uri) {
    super (localName, qualifiedName, uri);
}
",148,151
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public boolean hasChildren () {
    return getElementDescriptors ().length > 0;
}
",158,161
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public boolean hasAttributes () {
    return getAttributeDescriptors ().length > 0;
}
",168,171
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public boolean hasContent () {
    return getContentDescriptors ().length > 0;
}
",179,182
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public boolean isSimple () {
    return ! (hasAttributes ()) && ! (hasChildren ());
}
",194,197
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public void setWrapCollectionsInElement (boolean wrapCollectionsInElement) {
    this.wrapCollectionsInElement = wrapCollectionsInElement;
}
",211,214
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public boolean isWrapCollectionsInElement () {
    return this.wrapCollectionsInElement;
}
",227,230
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public void addAttributeDescriptor (AttributeDescriptor descriptor) {
    if (attributeList == null) {
        attributeList = new ArrayList ();
    }
    getAttributeList ().add (descriptor);
    attributeDescriptors = null;
}
",237,245
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public void removeAttributeDescriptor (AttributeDescriptor descriptor) {
    getAttributeList ().remove (descriptor);
}
",253,256
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public AttributeDescriptor [] getAttributeDescriptors () {
    if (attributeDescriptors == null) {
        if (attributeList == null) {
            attributeDescriptors = new AttributeDescriptor [0];
        }
        else {
            attributeDescriptors = new AttributeDescriptor [attributeList.size ()];
            attributeList.toArray (attributeDescriptors);
            attributeList = null;
        }
    }
    return attributeDescriptors;
}
",264,282
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public AttributeDescriptor getAttributeDescriptor (final String name) {
    for (int i = 0, size = attributeDescriptors.length; i < size; i ++) {
        AttributeDescriptor descr = attributeDescriptors [i];
        if (descr.getQualifiedName ().equals (name)) {
            return descr;
        }
    }
    return null;
}
",292,304
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public void setAttributeDescriptors (AttributeDescriptor [] attributeDescriptors) {
    this.attributeDescriptors = attributeDescriptors;
    this.attributeList = null;
}
",314,318
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public void addElementDescriptor (ElementDescriptor descriptor) {
    if (elementList == null) {
        elementList = new ArrayList ();
    }
    getElementList ().add (descriptor);
    elementDescriptors = null;
    addContentDescriptor (descriptor);
}
",325,334
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public void removeElementDescriptor (ElementDescriptor descriptor) {
    getElementList ().remove (descriptor);
    getContentList ().remove (descriptor);
}
",341,345
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public ElementDescriptor [] getElementDescriptors () {
    if (elementDescriptors == null) {
        if (elementList == null) {
            elementDescriptors = new ElementDescriptor [0];
        }
        else {
            elementDescriptors = new ElementDescriptor [elementList.size ()];
            elementList.toArray (elementDescriptors);
            elementList = null;
        }
    }
    return elementDescriptors;
}
",352,370
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public ElementDescriptor getElementDescriptor (String name) {
    ElementDescriptor elementDescriptor = null;
    ElementDescriptor descriptorWithNullName = null;
    ElementDescriptor firstPolymorphic = null;
    ElementDescriptor [] elementDescriptors = getElementDescriptors ();
    for (int i = 0, size = elementDescriptors.length; i < size; i ++) {
        if (firstPolymorphic == null && elementDescriptors [i].isPolymorphic ()) {
            firstPolymorphic = elementDescriptors [i];
        }
        String elementName = elementDescriptors [i].getQualifiedName ();
        if (name.equals (elementName)) {
            elementDescriptor = elementDescriptors [i];
            break;
        }
        if (descriptorWithNullName == null && elementName == null) {
            descriptorWithNullName = elementDescriptors [i];
        }
    }
    if (elementDescriptor == null) {
        elementDescriptor = firstPolymorphic;
    }
    if (elementDescriptor == null) {
        elementDescriptor = descriptorWithNullName;
    }
    return elementDescriptor;
}
",384,417
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public void setElementDescriptors (ElementDescriptor [] elementDescriptors) {
    this.elementDescriptors = elementDescriptors;
    this.elementList = null;
    setContentDescriptors (elementDescriptors);
}
",427,432
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public void addContentDescriptor (Descriptor descriptor) {
    if (contentList == null) {
        contentList = new ArrayList ();
    }
    getContentList ().add (descriptor);
    contentDescriptors = null;
}
",440,448
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public Descriptor [] getContentDescriptors () {
    if (contentDescriptors == null) {
        if (contentList == null) {
            contentDescriptors = new Descriptor [0];
        }
        else {
            contentDescriptors = new Descriptor [contentList.size ()];
            contentList.toArray (contentDescriptors);
            contentList = null;
        }
    }
    return contentDescriptors;
}
",456,474
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public TextDescriptor getPrimaryBodyTextDescriptor () {
    Descriptor [] descriptors = getContentDescriptors ();
    for (int i = 0, size = descriptors.length; i < size; i ++) {
        if (descriptors [i] instanceof TextDescriptor) {
            return (TextDescriptor) descriptors [i];
        }
    }
    return null;
}
",488,502
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public void setContentDescriptors (Descriptor [] contentDescriptors) {
    this.contentDescriptors = contentDescriptors;
    this.contentList = null;
}
",510,514
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public Expression getContextExpression () {
    return contextExpression;
}
",520,523
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public void setContextExpression (Expression contextExpression) {
    this.contextExpression = contextExpression;
}
",529,532
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public boolean isPrimitiveType () {
    return primitiveType;
}
",540,543
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public void setPrimitiveType (boolean primitiveType) {
    this.primitiveType = primitiveType;
}
",551,554
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
protected List getAttributeList () {
    if (attributeList == null) {
        if (attributeDescriptors != null) {
            int size = attributeDescriptors.length;
            attributeList = new ArrayList (size);
            for (int i = 0; i < size; i ++) {
                attributeList.add (attributeDescriptors [i]);
            }
            attributeDescriptors = null;
        }
        else {
            attributeList = new ArrayList ();
        }
    }
    return attributeList;
}
",568,589
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
protected List getElementList () {
    if (elementList == null) {
        if (elementDescriptors != null) {
            int size = elementDescriptors.length;
            elementList = new ArrayList (size);
            for (int i = 0; i < size; i ++) {
                elementList.add (elementDescriptors [i]);
            }
            elementDescriptors = null;
        }
        else {
            elementList = new ArrayList ();
        }
    }
    return elementList;
}
",600,621
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
protected List getContentList () {
    if (contentList == null) {
        if (contentDescriptors != null) {
            int size = contentDescriptors.length;
            contentList = new ArrayList (size);
            for (int i = 0; i < size; i ++) {
                contentList.add (contentDescriptors [i]);
            }
            contentDescriptors = null;
        }
        else {
            contentList = new ArrayList ();
        }
    }
    return contentList;
}
",633,654
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public Class getImplementationClass () {
    return implementationClass;
}
",661,664
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public void setImplementationClass (Class implementationClass) {
    this.implementationClass = implementationClass;
}
",672,675
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public boolean isCollective () {
    return isCollectiveType;
}
",680,685
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public void setCollective (boolean isCollectiveType) {
    this.isCollectiveType = isCollectiveType;
}
",692,695
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public ElementDescriptor findParent (ElementDescriptor elementDescriptor) {
    ElementDescriptor result = null;
    ElementDescriptor [] elementDescriptors = getElementDescriptors ();
    for (int i = 0, size = elementDescriptors.length; i < size; i ++) {
        if (elementDescriptors [i].equals (elementDescriptor)) {
            result = this;
            break;
        }
        else {
            result = elementDescriptors [i].findParent (elementDescriptor);
            if (result != null) {
                break;
            }
        }
    }
    return result;
}
",702,724
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public String toString () {
    return ""ElementDescriptor[qname="" + getQualifiedName () + "",pname="" + getPropertyName () + "",class="" + getPropertyType () + "",singular="" + getSingularPropertyType () + "",updater="" + getUpdater () + "",wrap="" + isWrapCollectionsInElement () + ""]"";
}
",731,737
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public boolean isHollow () {
    return isHollow;
}
",751,754
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public void setHollow (boolean isHollow) {
    this.isHollow = isHollow;
}
",766,769
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public boolean isUseBindTimeTypeForMapping () {
    boolean result = true;
    if (this.useBindTimeTypeForMapping != null) {
        result = this.useBindTimeTypeForMapping.booleanValue ();
    }
    return result;
}
",782,790
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public void setUseBindTimeTypeForMapping (boolean useBindTimeTypeForMapping) {
    if (this.useBindTimeTypeForMapping == null) {
        this.useBindTimeTypeForMapping = new Boolean (useBindTimeTypeForMapping);
    }
}
",806,812
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/ElementDescriptor.java,"
public boolean isPolymorphic () {
    return (getQualifiedName () == null);
}
",824,827
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public ClassNormalizer getClassNormalizer () {
    return classNormalizer;
}
",123,126
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public void setClassNormalizer (ClassNormalizer classNormalizer) {
    this.classNormalizer = classNormalizer;
}
",136,139
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public boolean isAttributesForPrimitives () {
    return attributesForPrimitives;
}
",145,148
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public void setAttributesForPrimitives (boolean attributesForPrimitives) {
    this.attributesForPrimitives = attributesForPrimitives;
}
",155,158
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public boolean isWrapCollectionsInElement () {
    return wrapCollectionsInElement;
}
",165,168
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public void setWrapCollectionsInElement (boolean wrapCollectionsInElement) {
    this.wrapCollectionsInElement = wrapCollectionsInElement;
}
",176,179
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public PluralStemmer getPluralStemmer () {
    if (pluralStemmer == null) {
        pluralStemmer = createPluralStemmer ();
    }
    return pluralStemmer;
}
",186,193
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public void setPluralStemmer (PluralStemmer pluralStemmer) {
    this.pluralStemmer = pluralStemmer;
}
",200,203
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public NameMapper getElementNameMapper () {
    if (elementNameMapper == null) {
        elementNameMapper = createNameMapper ();
    }
    return elementNameMapper;
}
",211,218
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public void setElementNameMapper (NameMapper nameMapper) {
    this.elementNameMapper = nameMapper;
}
",224,227
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public NameMapper getAttributeNameMapper () {
    if (attributeNameMapper == null) {
        attributeNameMapper = createNameMapper ();
    }
    return attributeNameMapper;
}
",235,242
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public void setAttributeNameMapper (NameMapper nameMapper) {
    this.attributeNameMapper = nameMapper;
}
",249,252
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public boolean useBeanInfoSearchPath () {
    return useBeanInfoSearchPath;
}
",262,265
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public void setUseBeanInfoSearchPath (boolean useBeanInfoSearchPath) {
    this.useBeanInfoSearchPath = useBeanInfoSearchPath;
}
",272,275
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public boolean ignoreAllBeanInfo () {
    return ignoreAllBeanInfo;
}
",285,288
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public void setIgnoreAllBeanInfo (boolean ignoreAllBeanInfo) {
    this.ignoreAllBeanInfo = ignoreAllBeanInfo;
}
",296,299
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
protected PluralStemmer createPluralStemmer () {
    return new DefaultPluralStemmer ();
}
",308,311
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
protected NameMapper createNameMapper () {
    return new DefaultNameMapper ();
}
",319,322
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public Log getIntrospectionLog () {
    return introspectionLog;
}
",330,333
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public void setIntrospectionLog (Log log) {
    introspectionLog = log;
}
",341,344
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public NamespacePrefixMapper getPrefixMapper () {
    return prefixMapper;
}
",352,355
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public void setPrefixMapper (NamespacePrefixMapper mapper) {
    prefixMapper = mapper;
}
",362,365
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public SimpleTypeMapper getSimpleTypeMapper () {
    return simpleTypeMapper;
}
",372,375
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public void setSimpleTypeMapper (SimpleTypeMapper mapper) {
    simpleTypeMapper = mapper;
}
",381,384
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public TypeBindingStrategy getTypeBindingStrategy () {
    return typeBindingStrategy;
}
",392,395
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public void setTypeBindingStrategy (TypeBindingStrategy typeBindingStrategy) {
    this.typeBindingStrategy = typeBindingStrategy;
}
",403,406
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public MappingDerivationStrategy getMappingDerivationStrategy () {
    return mappingDerivationStrategy;
}
",416,419
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public void setMappingDerivationStrategy (MappingDerivationStrategy mappingDerivationStrategy) {
    this.mappingDerivationStrategy = mappingDerivationStrategy;
}
",427,431
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public PropertySuppressionStrategy getPropertySuppressionStrategy () {
    return propertySuppressionStrategy;
}
",438,441
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public void setPropertySuppressionStrategy (PropertySuppressionStrategy propertySuppressionStrategy) {
    this.propertySuppressionStrategy = propertySuppressionStrategy;
}
",448,452
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public CollectiveTypeStrategy getCollectiveTypeStrategy () {
    return collectiveTypeStrategy;
}
",459,462
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public void setCollectiveTypeStrategy (CollectiveTypeStrategy collectiveTypeStrategy) {
    this.collectiveTypeStrategy = collectiveTypeStrategy;
}
",469,473
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public boolean isLoopType (Class type) {
    return getCollectiveTypeStrategy ().isCollective (type);
}
",481,484
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public AttributeSuppressionStrategy getAttributeSuppressionStrategy () {
    return attributeSuppressionStrategy;
}
",494,497
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public void setAttributeSuppressionStrategy (AttributeSuppressionStrategy attributeSuppressionStrategy) {
    this.attributeSuppressionStrategy = attributeSuppressionStrategy;
}
",506,510
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public ElementSuppressionStrategy getElementSuppressionStrategy () {
    return elementSuppressionStrategy;
}
",519,522
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/IntrospectionConfiguration.java,"
public void setElementSuppressionStrategy (ElementSuppressionStrategy elementSuppressionStrategy) {
    this.elementSuppressionStrategy = elementSuppressionStrategy;
}
",531,535
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BindingConfiguration.java,"
public BindingConfiguration () {
    this (new DefaultObjectStringConverter (), true);
}
",60,63
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BindingConfiguration.java,"
public BindingConfiguration (ObjectStringConverter objectStringConverter, boolean mapIDs) {
    setObjectStringConverter (objectStringConverter);
    setMapIDs (mapIDs);
}
",71,75
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BindingConfiguration.java,"
public ObjectStringConverter getObjectStringConverter () {
    return objectStringConverter;
}
",81,84
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BindingConfiguration.java,"
public void setObjectStringConverter (ObjectStringConverter objectStringConverter) {
    this.objectStringConverter = objectStringConverter;
}
",90,93
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BindingConfiguration.java,"
public boolean getMapIDs () {
    return mapIDs;
}
",102,105
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BindingConfiguration.java,"
public void setMapIDs (boolean mapIDs) {
    this.mapIDs = mapIDs;
}
",113,116
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BindingConfiguration.java,"
public String getClassNameAttribute () {
    return classNameAttribute;
}
",126,129
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BindingConfiguration.java,"
public void setClassNameAttribute (String classNameAttribute) {
    this.classNameAttribute = classNameAttribute;
}
",140,143
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BindingConfiguration.java,"
public ValueSuppressionStrategy getValueSuppressionStrategy () {
    return valueSuppressionStrategy;
}
",152,155
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BindingConfiguration.java,"
public void setValueSuppressionStrategy (ValueSuppressionStrategy valueSuppressionStrategy) {
    this.valueSuppressionStrategy = valueSuppressionStrategy;
}
",163,167
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BindingConfiguration.java,"
public IdStoringStrategy getIdMappingStrategy () {
    return idStoringStrategy;
}
",175,178
systems/mutantbase/commons-betwixt-0.8-src/src/java/org/apache/commons/betwixt/BindingConfiguration.java,"
public void setIdMappingStrategy (IdStoringStrategy idMappingStrategy) {
    this.idStoringStrategy = idMappingStrategy;
}
",187,190
