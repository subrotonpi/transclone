<source file="systems/config/FavoritesConfig.java" startline="20" endline="23">
public FavoritesConfig (Preferences preferences) {
    super (preferences, "favorites");
}
</source>
<source file="systems/config/FavoritesConfig.java" startline="25" endline="34">
public void add (String key, FeederCreator feederCreator) {
    StringBuilder serializedFeeder = new StringBuilder (feederCreator.getFeederId ());
    serializedFeeder.append ('\t');
    for (String part : feederCreator.serialize ()) {
        serializedFeeder.append (part).append (":::");
    }
    super.add (key, serializedFeeder.toString ());
}
</source>
<source file="systems/config/FavoritesConfig.java" startline="36" endline="41">
public String getFeederId (String key) {
    String value = get (key);
    int indexOf = value.indexOf ('\t');
    return value.substring (0, indexOf);
}
</source>
<source file="systems/config/FavoritesConfig.java" startline="43" endline="48">
public String [] getSerializedParts (String key) {
    String value = get (key);
    int indexOf = value.indexOf ('\t');
    return value.substring (indexOf + 1).split (":::");
}
</source>
<source file="systems/config/NamedListConfig.java" startline="28" endline="33">
NamedListConfig (Preferences preferences, String preferenceName) {
    this.preferenceName = preferenceName;
    this.preferences = preferences;
    load ();
}
</source>
<source file="systems/config/NamedListConfig.java" startline="38" endline="53">
public void load () {
    if (preferences == null) {
        return;
    }
    String [] namedListPrefs = preferences.get (preferenceName, "").split ("###");
    for (int i = 0; i < namedListPrefs.length; i += 2) {
        if (namedListPrefs [i].length () > 0) {
            namedList.put (namedListPrefs [i], serializeValue (namedListPrefs [i + 1]));
        }
    }
}
</source>
<source file="systems/config/NamedListConfig.java" startline="55" endline="58">
Object serializeValue (String value) {
    return value;
}
</source>
<source file="systems/config/NamedListConfig.java" startline="63" endline="75">
public void store () {
    StringBuffer sb = new StringBuffer (32);
    for (Map.Entry < String, Object > e : namedList.entrySet ()) {
        sb.append (e.getKey ()).append ("###").append (e.getValue ()).append ("###");
    }
    if (sb.length () > 3) {
        sb.delete (sb.length () - 3, sb.length ());
    }
    preferences.put (preferenceName, sb.toString ());
}
</source>
<source file="systems/config/NamedListConfig.java" startline="81" endline="84">
public void add (String key, Object value) {
    namedList.put (key, value);
}
</source>
<source file="systems/config/NamedListConfig.java" startline="90" endline="94">
public String get (String key) {
    Object value = namedList.get (key);
    return value != null ? value.toString () : null;
}
</source>
<source file="systems/config/NamedListConfig.java" startline="100" endline="103">
public String remove (String key) {
    return namedList.remove (key).toString ();
}
</source>
<source file="systems/config/NamedListConfig.java" startline="108" endline="111">
public Iterator < String > iterator () {
    return namedList.keySet ().iterator ();
}
</source>
<source file="systems/config/NamedListConfig.java" startline="113" endline="116">
public int size () {
    return namedList.size ();
}
</source>
<source file="systems/config/NamedListConfig.java" startline="124" endline="133">
public void update (String [] keys) {
    Map < String, Object > newList = new LinkedHashMap < String, Object > ();
    for (int i = 0; i < keys.length; i ++) {
        newList.put (keys [i], namedList.get (keys [i]));
    }
    namedList = newList;
}
</source>
<source file="systems/config/CommentsConfig.java" startline="21" endline="25">
public CommentsConfig (Preferences preferences) {
    this.preferences = preferences.node ("comments");
}
</source>
<source file="systems/config/CommentsConfig.java" startline="27" endline="30">
public String getComment (InetAddress address) {
    return preferences.get (address.getHostAddress (), null);
}
</source>
<source file="systems/config/CommentsConfig.java" startline="32" endline="38">
public void setComment (InetAddress address, String comment) {
    if (comment == null || comment.length () == 0) preferences.remove (address.getHostAddress ());
    else preferences.put (address.getHostAddress (), comment);
}
</source>
<source file="systems/config/Labels.java" startline="41" endline="44">
private Labels () {
}
</source>
<source file="systems/config/Labels.java" startline="46" endline="49">
public static final Labels getInstance () {
    return instance;
}
</source>
<source file="systems/config/Labels.java" startline="56" endline="95">
public static void initialize (Locale locale) {
    if (instance != null && locale.equals (instance.locale)) {
        return;
    }
    instance = new Labels ();
    instance.locale = locale;
    InputStream labelsStream = null;
    try {
        labelsStream = Labels.class.getClassLoader ().getResourceAsStream ("messages.properties");
        if (labelsStream == null) {
            throw new MissingResourceException ("Labels not found!", Labels.class.getName (), "messages");
        }
        instance.labelsFallback = new PropertyResourceBundle (labelsStream);
        labelsStream.close ();
    } catch (IOException e) {
        throw new MissingResourceException (e.toString (), Labels.class.getName (), "messages");
    }
    try {
        labelsStream = Labels.class.getClassLoader ().getResourceAsStream ("messages_" + locale.getLanguage () + ".properties");
        instance.labels = new PropertyResourceBundle (labelsStream);
        labelsStream.close ();
    } catch (Exception e) {
        instance.labels = instance.labelsFallback;
    }
}
</source>
<source file="systems/config/Labels.java" startline="101" endline="105">
public InputStream getImageAsStream (String key) {
    String imagePath = get (key);
    return getClass ().getClassLoader ().getResourceAsStream (imagePath);
}
</source>
<source file="systems/config/Labels.java" startline="111" endline="123">
public String get (String key) {
    try {
        return labels.getString (key);
    } catch (MissingResourceException e) {
        String text = labelsFallback.getString (key);
        LOG.warning ("Used fallback label for " + key);
        return text;
    }
}
</source>
<source file="systems/config/Labels.java" startline="128" endline="131">
public static String getLabel (String key) {
    return getInstance ().get (key);
}
</source>
<source file="systems/config/OpenersConfig.java" startline="22" endline="41">
public OpenersConfig (Preferences preferences) {
    super (preferences, "openers");
    if (size () == 0) {
        Labels labels = Labels.getInstance ();
        if (Platform.WINDOWS) add (labels.get ("opener.netbios"), new Opener ("\\\\${fetcher.ip}", false, null));
        add (labels.get ("opener.web"), new Opener ("http://${fetcher.hostname}/", false, null));
        add (labels.get ("opener.ftp"), new Opener ("ftp://${fetcher.hostname}/", false, null));
        add (labels.get ("opener.telnet"), new Opener ("telnet ${fetcher.ip}", true, null));
        add (labels.get ("opener.ping"), new Opener ("ping ${fetcher.ip}", true, null));
        add (labels.get ("opener.traceroute"), new Opener ((Platform.WINDOWS ? "tracert" : Platform.LINUX ? "tracepath" : "traceroute") + " ${fetcher.ip}", true, null));
        if (! Platform.WINDOWS) add (labels.get ("opener.ssh"), new Opener ("ssh ${fetcher.ip}", true, null));
        if (! Platform.WINDOWS) add (labels.get ("opener.whois"), new Opener ("whois ${fetcher.ip}", true, null));
        add (labels.get ("opener.geolocate"), new Opener ("http://www.angryip.org/iplocate.php?ip=${fetcher.ip}", false, null));
        add (labels.get ("opener.email"), new Opener ("mailto:somebody@example.com?subject=${fetcher.ip} (${fetcher.hostname})", true, null));
    }
}
</source>
<source file="systems/config/OpenersConfig.java" startline="43" endline="46">
Object serializeValue (String value) {
    return new Opener (value);
}
</source>
<source file="systems/config/OpenersConfig.java" startline="48" endline="55">
public void add (String name, Object value) {
    if (value instanceof Opener) super.add (name, value);
    else throw new IllegalArgumentException ();
}
</source>
<source file="systems/config/OpenersConfig.java" startline="57" endline="60">
public Opener getOpener (String name) {
    return (Opener) namedList.get (name);
}
</source>
<source file="systems/config/OpenersConfig.java" startline="68" endline="82">
Opener (String serialized) {
    try {
        String [] parts = serialized.split ("@@@");
        execString = parts [0];
        inTerminal = parts [1].charAt (0) == '1';
        workingDir = parts.length >= 3 && parts [2].length () > 0 ? new File (parts [2]) : null;
    } catch (ArrayIndexOutOfBoundsException e) {
        LOG.fine ("Broken opener config read: " + serialized);
    }
}
</source>
<source file="systems/config/OpenersConfig.java" startline="84" endline="89">
public Opener (String execString, boolean inTerminal, File workingDir) {
    this.execString = execString;
    this.inTerminal = inTerminal;
    this.workingDir = workingDir;
}
</source>
<source file="systems/config/OpenersConfig.java" startline="91" endline="94">
public String toString () {
    return execString + "@@@" + (inTerminal ? '1' : '0') + "@@@" + (workingDir != null ? workingDir.toString () : "");
}
</source>
<source file="systems/config/LoggerFactory.java" startline="21" endline="26">
public static Logger getLogger () {
    Throwable t = new Throwable ();
    StackTraceElement directCaller = t.getStackTrace () [1];
    return Logger.getLogger (directCaller.getClassName ());
}
</source>
<source file="systems/config/ScannerConfig.java" startline="40" endline="58">
ScannerConfig (Preferences preferences) {
    this.preferences = preferences;
    maxThreads = preferences.getInt ("maxThreads", Platform.CRIPPLED_WINDOWS ? 10 : 100);
    threadDelay = preferences.getInt ("threadDelay", 20);
    scanDeadHosts = preferences.getBoolean ("scanDeadHosts", false);
    selectedPinger = preferences.get ("selectedPinger", Platform.WINDOWS && ! Platform.ARCH_64 ? "pinger.windows" : "pinger.icmp");
    pingTimeout = preferences.getInt ("pingTimeout", 2000);
    pingCount = preferences.getInt ("pingCount", 3);
    skipBroadcastAddresses = preferences.getBoolean ("skipBroadcastAddresses", true);
    portTimeout = preferences.getInt ("portTimeout", 2000);
    adaptPortTimeout = preferences.getBoolean ("adaptPortTimeout", ! Platform.CRIPPLED_WINDOWS);
    minPortTimeout = preferences.getInt ("minPortTimeout", 100);
    portString = preferences.get ("portString", "");
    useRequestedPorts = preferences.getBoolean ("useRequestedPorts", true);
    notAvailableText = preferences.get ("notAvailableText", Labels.getLabel ("fetcher.value.notAvailable"));
    notScannedText = preferences.get ("notScannedText", Labels.getLabel ("fetcher.value.notScanned"));
}
</source>
<source file="systems/config/ScannerConfig.java" startline="63" endline="79">
public void store () {
    preferences.putInt ("maxThreads", maxThreads);
    preferences.putInt ("threadDelay", threadDelay);
    preferences.putBoolean ("scanDeadHosts", scanDeadHosts);
    preferences.put ("selectedPinger", selectedPinger);
    preferences.putInt ("pingTimeout", pingTimeout);
    preferences.putInt ("pingCount", pingCount);
    preferences.putBoolean ("skipBroadcastAddresses", skipBroadcastAddresses);
    preferences.putInt ("portTimeout", portTimeout);
    preferences.putBoolean ("adaptPortTimeout", adaptPortTimeout);
    preferences.putInt ("minPortTimeout", minPortTimeout);
    preferences.put ("portString", portString);
    preferences.putBoolean ("useRequestedPorts", useRequestedPorts);
    preferences.put ("notAvailableText", notAvailableText);
    preferences.put ("notScannedText", notScannedText);
}
</source>
<source file="systems/config/Config.java" startline="31" endline="38">
private Config () {
    preferences = Preferences.userRoot ().node ("ipscan");
    scannerConfig = new ScannerConfig (preferences);
    guiConfig = new GUIConfig (preferences);
    favoritesConfig = new FavoritesConfig (preferences);
    openersConfig = new OpenersConfig (preferences);
}
</source>
<source file="systems/config/Config.java" startline="43" endline="50">
public static Config getConfig () {
    if (globalConfig == null) {
        globalConfig = new Config ();
    }
    return globalConfig;
}
</source>
<source file="systems/config/Config.java" startline="52" endline="58">
public void store () {
    scannerConfig.store ();
    guiConfig.store ();
    favoritesConfig.store ();
    openersConfig.store ();
}
</source>
<source file="systems/config/Config.java" startline="60" endline="63">
public Preferences getPreferences () {
    return preferences;
}
</source>
<source file="systems/config/Config.java" startline="68" endline="71">
public ScannerConfig forScanner () {
    return scannerConfig;
}
</source>
<source file="systems/config/Config.java" startline="76" endline="79">
NamedListConfig forFavorites () {
    return favoritesConfig;
}
</source>
<source file="systems/config/Config.java" startline="84" endline="87">
OpenersConfig forOpeners () {
    return openersConfig;
}
</source>
<source file="systems/config/Config.java" startline="92" endline="95">
public GUIConfig forGUI () {
    return guiConfig;
}
</source>
<source file="systems/config/Version.java" startline="44" endline="51">
public static String getVersion () {
    if (version == null) {
        loadVersionFromJar ();
    }
    return version;
}
</source>
<source file="systems/config/Version.java" startline="56" endline="63">
public static String getBuildDate () {
    if (buildDate == null) {
        loadVersionFromJar ();
    }
    return buildDate;
}
</source>
<source file="systems/config/Version.java" startline="65" endline="86">
private static void loadVersionFromJar () {
    String path = Version.class.getClassLoader ().getResource (Version.class.getName ().replace ('.', '/') + ".class").toString ();
    if (path.startsWith ("jar:file:")) {
        path = path.substring (4, path.indexOf ('!'));
        try {
            JarFile jarFile = new JarFile (new URI (path).getPath ());
            Attributes attrs = jarFile.getManifest ().getMainAttributes ();
            version = attrs.getValue ("Version");
            buildDate = attrs.getValue ("Build-Date");
            return;
        } catch (Exception e) {
            LoggerFactory.getLogger ().log (Level.WARNING, "Cannot obtain version", e);
        }
    }
    version = "current";
    buildDate = "today";
}
</source>
<source file="systems/config/Version.java" startline="88" endline="91">
public static String getFullName () {
    return NAME + " " + getVersion ();
}
</source>
<source file="systems/config/CommandLineProcessor.java" startline="44" endline="48">
CommandLineProcessor (FeederRegistry < FeederCreator > feederCreators, ExporterRegistry exporters) {
    this.feederRegistry = feederCreators;
    this.exporters = exporters;
}
</source>
<source file="systems/config/CommandLineProcessor.java" startline="50" endline="57">
public CommandLineProcessor (FeederRegistry < FeederCreator > feederCreators, ExporterRegistry exporters, StateMachine stateMachine, ScanningResultList scanningResults) {
    this (feederCreators, exporters);
    this.stateMachine = stateMachine;
    this.scanningResults = scanningResults;
    if (stateMachine != null) stateMachine.addTransitionListener (this);
}
</source>
<source file="systems/config/CommandLineProcessor.java" startline="59" endline="62">
public boolean shouldAutoQuit () {
    return autoQuit;
}
</source>
<source file="systems/config/CommandLineProcessor.java" startline="64" endline="67">
public boolean shouldAutoStart () {
    return autoStart;
}
</source>
<source file="systems/config/CommandLineProcessor.java" startline="69" endline="125">
public void parse (String...args) {
    for (int i = 0; i < args.length; i ++) {
        String arg = args [i];
        if (arg.startsWith ("-f:")) {
            if (feederCreator != null) throw new IllegalArgumentException ("Only one feeder is allowed");
            feederCreator = findFeederCreator ("feeder." + arg.substring (3));
            feederArgs = new String [feederCreator.serializePartsLabels ().length];
            for (int j = 0; j < feederArgs.length; j ++) {
                feederArgs [j] = args [++ i];
                if (feederArgs [j].startsWith ("-")) throw new IllegalArgumentException (feederCreator.getFeederName () + " requires " + feederArgs.length + " arguments");
            }
        }
        else if (arg.equals ("-o")) {
            if (outputFilename != null) throw new IllegalArgumentException ("Only one exporter is allowed");
            outputFilename = args [++ i];
            if (outputFilename.startsWith ("-")) throw new IllegalArgumentException ("Output filename missing");
            exporter = findExporter (outputFilename);
            autoStart = true;
        }
        else if (arg.startsWith ("-")) {
            for (char option : arg.substring (1).toCharArray ()) {
                switch (option) {
                    case 's' :
                        autoStart = true;
                        break;
                    case 'q' :
                        autoQuit = true;
                        break;
                    case 'a' :
                        appendToFile = true;
                        break;
                    default :
                        throw new IllegalArgumentException ("Unknown option: " + option);
                }
            }
        }
        else throw new IllegalArgumentException ("Unknown argument: " + arg);
    }
    if (feederCreator == null) throw new IllegalArgumentException ("Feeder missing");
    feederCreator.unserialize (feederArgs);
}
</source>
<source file="systems/config/CommandLineProcessor.java" startline="128" endline="154">
public String toString () {
    StringBuilder usage = new StringBuilder ();
    usage.append ("Pass the following arguments:\n");
    usage.append ("[options] <feeder> <exporter>\n\n");
    usage.append ("Where <feeder> is one of:\n");
    for (FeederCreator creator : feederRegistry) {
        usage.append ("-f:").append (shortId (creator.getFeederId ()));
        for (String partLabel : creator.serializePartsLabels ()) {
            usage.append (" <").append (Labels.getLabel (partLabel)).append (">");
        }
        usage.append ('\n');
    }
    usage.append ("\n<exporter> is one of:\n");
    for (Exporter exporter : exporters) {
        usage.append ("-o filename.").append (shortId (exporter.getFilenameExtension ())).append ("\t\t").append (Labels.getLabel (exporter.getId ())).append ('\n');
    }
    usage.append ("\nAnd possible [options] are (grouping allowed):\n");
    usage.append ("-s\tstart scanning automatically\n");
    usage.append ("-q\tquit after exporting the results\n");
    usage.append ("-a\tappend to the file, do not overwrite\n");
    return usage.toString ();
}
</source>
<source file="systems/config/CommandLineProcessor.java" startline="156" endline="159">
private String shortId (String longId) {
    return longId.substring (longId.lastIndexOf ('.') + 1);
}
</source>
<source file="systems/config/CommandLineProcessor.java" startline="161" endline="171">
private FeederCreator findFeederCreator (String feederId) {
    for (FeederCreator creator : feederRegistry) {
        if (feederId.equals (creator.getFeederId ())) {
            return creator;
        }
    }
    throw new IllegalArgumentException ("Feeder unknown: " + shortId (feederId));
}
</source>
<source file="systems/config/CommandLineProcessor.java" startline="173" endline="176">
private Exporter findExporter (String outputFilename) {
    return exporters.createExporter (outputFilename);
}
</source>
<source file="systems/config/CommandLineProcessor.java" startline="178" endline="201">
public void transitionTo (ScanningState state, Transition transition) {
    if (transition == Transition.INIT) {
        if (feederCreator != null) feederRegistry.select (feederCreator.getFeederId ());
        if (autoStart) stateMachine.transitionToNext ();
    }
    else if (transition == Transition.COMPLETE && state == ScanningState.IDLE && exporter != null) {
        ExportProcessor processor = new ExportProcessor (exporter, new File (outputFilename), appendToFile);
        processor.process (scanningResults, null);
        if (autoQuit) {
            System.err.println ("Saved results to " + outputFilename);
            System.exit (0);
        }
    }
}
</source>
<source file="systems/config/ComponentRegistry.java" startline="82" endline="223">
public ComponentRegistry () {
    MutablePicoContainer container = new DefaultPicoContainer ();
    this.container = container;
    ComponentParameter anyComponentParameter = new ComponentParameter ();
    Config globalConfig = Config.getConfig ();
    container.registerComponentInstance (globalConfig.getPreferences ());
    container.registerComponentInstance (globalConfig.forScanner ());
    container.registerComponentInstance (globalConfig.forGUI ());
    container.registerComponentInstance (globalConfig.forOpeners ());
    container.registerComponentInstance (globalConfig.forFavorites ());
    container.registerComponentInstance (Labels.getInstance ());
    container.registerComponentImplementation (CommentsConfig.class);
    container.registerComponentImplementation (ConfigDetector.class);
    container.registerComponentImplementation (ExporterRegistry.class);
    container.registerComponentImplementation (TXTExporter.class);
    container.registerComponentImplementation (CSVExporter.class);
    container.registerComponentImplementation (XMLExporter.class);
    container.registerComponentImplementation (IPListExporter.class);
    container.registerComponentImplementation (FetcherRegistry.class, FetcherRegistryImpl.class);
    container.registerComponentImplementation (IPFetcher.class);
    container.registerComponentImplementation (PingFetcher.class);
    container.registerComponentImplementation (PingTTLFetcher.class);
    container.registerComponentImplementation (HostnameFetcher.class);
    container.registerComponentImplementation (PortsFetcher.class);
    container.registerComponentImplementation (FilteredPortsFetcher.class);
    container.registerComponentImplementation (WebDetectFetcher.class);
    container.registerComponentImplementation (HTTPSenderFetcher.class);
    container.registerComponentImplementation (CommentFetcher.class);
    container.registerComponentImplementation (NetBIOSInfoFetcher.class);
    container.registerComponentImplementation (PingerRegistry.class, PingerRegistryImpl.class);
    container.registerComponentImplementation (ScanningResultList.class);
    container.registerComponentImplementation (Scanner.class);
    container.registerComponentImplementation (SWTAwareStateMachine.class);
    container.registerComponentImplementation (ScannerDispatcherThreadFactory.class);
    container.registerComponentImplementation (CommandLineProcessor.class);
    container.registerComponentInstance (Display.getDefault ());
    container.registerComponentImplementation ("mainShell", Shell.class);
    container.registerComponentImplementation ("mainMenu", Menu.class, new Parameter [] {new ComponentParameter ("mainShell"), new ConstantParameter (new Integer (SWT.BAR))});
    container.registerComponentImplementation ("commandsMenu", CommandsMenu.class);
    container.registerComponentImplementation ("feederArea", Composite.class, new Parameter [] {new ComponentParameter ("mainShell"), new ConstantParameter (new Integer (SWT.NONE))});
    container.registerComponentImplementation ("controlsArea", Composite.class, new Parameter [] {new ComponentParameter ("mainShell"), new ConstantParameter (new Integer (SWT.NONE))});
    container.registerComponentImplementation ("startStopButton", Button.class, new Parameter [] {new ComponentParameter ("controlsArea"), new ConstantParameter (new Integer (SWT.NONE))});
    container.registerComponentImplementation ("feederSelectionCombo", FeederSelectionCombo.class, new Parameter [] {new ComponentParameter ("controlsArea")});
    container.registerComponentImplementation (FeederGUIRegistry.class);
    Parameter [] feederGUIParameters = new Parameter [] {new ComponentParameter ("feederArea")};
    container.registerComponentImplementation (RangeFeederGUI.class, RangeFeederGUI.class, feederGUIParameters);
    container.registerComponentImplementation (RandomFeederGUI.class, RandomFeederGUI.class, feederGUIParameters);
    container.registerComponentImplementation (FileFeederGUI.class, FileFeederGUI.class, feederGUIParameters);
    container.registerComponentImplementation (OpenerLauncher.class);
    container.registerComponentImplementation (MainWindow.class, MainWindow.class, new Parameter [] {new ComponentParameter ("mainShell"), anyComponentParameter, new ComponentParameter ("feederArea"), new ComponentParameter ("controlsArea"), new ComponentParameter ("feederSelectionCombo"), new ComponentParameter ("startStopButton"), anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter});
    container.registerComponentImplementation (ResultTable.class, ResultTable.class, new Parameter [] {new ComponentParameter ("mainShell"), anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter, anyComponentParameter});
    container.registerComponentImplementation (StatusBar.class, StatusBar.class, new Parameter [] {new ComponentParameter ("mainShell"), anyComponentParameter, anyComponentParameter});
    container.registerComponentImplementation (MainMenu.class, MainMenu.class, new Parameter [] {new ComponentParameter ("mainShell"), new ComponentParameter ("mainMenu"), new ComponentParameter ("commandsMenu"), anyComponentParameter, new ConstantParameter (container)});
    container.registerComponentImplementation (MainMenu.ColumnsMenu.class, MainMenu.ColumnsMenu.class, new Parameter [] {new ComponentParameter ("mainShell"), anyComponentParameter, anyComponentParameter, anyComponentParameter});
    container.registerComponentImplementation (AboutDialog.class);
    container.registerComponentImplementation (PreferencesDialog.class);
    container.registerComponentImplementation (ConfigDetectorDialog.class);
    container.registerComponentImplementation (SelectFetchersDialog.class);
    container.registerComponentImplementation (DetailsWindow.class);
    container.registerComponentImplementation (StatisticsDialog.class);
    container.registerComponentImplementation (StartStopScanningAction.class);
    container.registerComponentImplementation (ColumnsActions.SortBy.class);
    container.registerComponentImplementation (ColumnsActions.FetcherPreferences.class);
    container.registerComponentImplementation (ColumnsActions.AboutFetcher.class);
    container.registerComponentImplementation (ColumnsActions.ColumnClick.class);
    container.registerComponentImplementation (ColumnsActions.ColumnResize.class);
    container.registerComponentImplementation (CommandsMenuActions.Details.class);
    container.registerComponentImplementation (ToolsActions.Preferences.class);
    container.registerComponentImplementation (ToolsActions.ChooseFetchers.class);
    container.registerComponentImplementation (ToolsActions.TableSelection.class);
    container.registerComponentImplementation (HelpMenuActions.CheckVersion.class);
    if (Platform.MAC_OS) {
        try {
            container.registerComponentImplementation (Class.forName ("net.azib.ipscan.platform.mac.MacApplicationMenu"));
        } catch (Exception e) {
            Logger.getLogger (getClass ().getName ()).warning ("Cannot initialize MacApplicationMenu: " + e);
        }
    }
    new PluginLoader ().addTo (container);
}
</source>
<source file="systems/config/ComponentRegistry.java" startline="225" endline="232">
private void start () {
    if (! containerStarted) {
        containerStarted = true;
        container.start ();
    }
}
</source>
<source file="systems/config/ComponentRegistry.java" startline="234" endline="240">
public MainWindow getMainWindow () {
    start ();
    return (MainWindow) container.getComponentInstance (MainWindow.class);
}
</source>
<source file="systems/config/ComponentRegistry.java" startline="242" endline="246">
public CommandLineProcessor getCommandLineProcessor () {
    start ();
    return (CommandLineProcessor) container.getComponentInstance (CommandLineProcessor.class);
}
</source>
<source file="systems/config/ConfigDetector.java" startline="37" endline="40">
public ConfigDetector (ScannerConfig config) {
    this.config = config;
}
</source>
<source file="systems/config/ConfigDetector.java" startline="42" endline="45">
public void setCallback (DetectorCallback callback) {
    this.callback = callback;
}
</source>
<source file="systems/config/ConfigDetector.java" startline="47" endline="65">
public void detectMaxThreads (InetSocketAddress socketAddress) {
    logger = LoggerFactory.getLogger ();
    expectedConnects = new AtomicInteger ();
    actualConnects = new AtomicInteger ();
    List < Thread > threads = new LinkedList < Thread > ();
    for (int i = 0; i < config.maxThreads; i ++) {
        Thread t = new SocketThread (socketAddress);
        threads.add (t);
        t.start ();
    }
    join (threads);
}
</source>
<source file="systems/config/ConfigDetector.java" startline="67" endline="80">
private void join (List < Thread > threads) {
    try {
        for (Thread t : threads) {
            t.join ();
        }
        threads.clear ();
    } catch (InterruptedException e) {
    }
}
</source>
<source file="systems/config/ConfigDetector.java" startline="82" endline="85">
public int getInitialConnectCount () {
    return config.maxThreads * CONNECTS_PER_THREAD;
}
</source>
<source file="systems/config/ConfigDetector.java" startline="87" endline="90">
public int getInitialSuccessCount () {
    return (int) (getInitialConnectCount () * SUCCESS_PROBABILITY);
}
</source>
<source file="systems/config/ConfigDetector.java" startline="92" endline="95">
public int getExpectedSuccessfulConnectCount () {
    return expectedConnects.intValue ();
}
</source>
<source file="systems/config/ConfigDetector.java" startline="97" endline="100">
public int getActualSuccessfulConnectCount () {
    return actualConnects.intValue ();
}
</source>
<source file="systems/config/ConfigDetector.java" startline="112" endline="115">
public SocketThread (InetSocketAddress socketAddress) {
    this.socketAddress = socketAddress;
}
</source>
<source file="systems/config/ConfigDetector.java" startline="117" endline="165">
public void run () {
    for (int i = 0; i < CONNECTS_PER_THREAD; i ++) {
        if (callback != null) callback.onDetectorTry ();
        Socket s = new Socket ();
        try {
            s.setSoTimeout (config.portTimeout);
            s.setTcpNoDelay (true);
            s.setSoLinger (true, 0);
            if (Math.random () > (1.0 - SUCCESS_PROBABILITY)) {
                expectedConnects.incrementAndGet ();
                s.connect (socketAddress, config.portTimeout);
            }
            else {
                s.connect (new InetSocketAddress (InetAddress.getByAddress (new byte [] {(byte) 192, (byte) 168, (byte) (Math.random () * 255), (byte) (Math.random () * 255)}), 61493 + (int) (Math.random () * 200)), config.portTimeout);
            }
            actualConnects.incrementAndGet ();
            if (callback != null) {
                callback.onDetectorSuccess ();
            }
            sleep (10000);
        } catch (SocketTimeoutException e) {
        } catch (Exception e) {
            logger.log (Level.FINE, "Failure: " + e);
        } finally {
            try {
                s.close ();
            } catch (IOException e) {
            }
        }
    }
}
</source>
<source file="systems/config/GUIConfig.java" startline="43" endline="47">
GUIConfig (Preferences preferences) {
    this.preferences = preferences;
    load ();
}
</source>
<source file="systems/config/GUIConfig.java" startline="49" endline="68">
private void load () {
    isFirstRun = preferences.getBoolean ("firstRun", true);
    activeFeeder = preferences.getInt ("activeFeeder", 0);
    displayMethod = DisplayMethod.valueOf (preferences.get ("displayMethod", DisplayMethod.ALL.toString ()));
    showScanStats = preferences.getBoolean ("showScanStats", true);
    askScanConfirmation = preferences.getBoolean ("askScanConfirmation", true);
    isMainWindowMaximized = preferences.getBoolean ("windowMaximized", false);
    Rectangle screen = Display.getDefault ().getBounds ();
    mainWindowBounds = new Rectangle (preferences.getInt ("windowLeft", screen.x + screen.width / 2 - 600 / 2), preferences.getInt ("windowTop", screen.y + screen.height / 2 - 360 / 2), preferences.getInt ("windowWidth", 600), preferences.getInt ("windowHeight", 360));
    detailsWindowSize = new Point (preferences.getInt ("detailsWidth", 300), preferences.getInt ("detailsHeight", 200));
}
</source>
<source file="systems/config/GUIConfig.java" startline="70" endline="89">
public void store () {
    preferences.putBoolean ("firstRun", isFirstRun);
    preferences.putInt ("activeFeeder", activeFeeder);
    preferences.put ("displayMethod", displayMethod.toString ());
    preferences.putBoolean ("showScanStats", showScanStats);
    preferences.putBoolean ("askScanConfirmation", askScanConfirmation);
    preferences.putBoolean ("windowMaximized", isMainWindowMaximized);
    if (! isMainWindowMaximized) {
        preferences.putInt ("windowLeft", mainWindowBounds.x);
        preferences.putInt ("windowTop", mainWindowBounds.y);
        preferences.putInt ("windowWidth", mainWindowBounds.width);
        preferences.putInt ("windowHeight", mainWindowBounds.height);
    }
    preferences.putInt ("detailsWidth", detailsWindowSize.x);
    preferences.putInt ("detailsHeight", detailsWindowSize.y);
}
</source>
<source file="systems/config/GUIConfig.java" startline="91" endline="94">
public Rectangle getMainWindowBounds () {
    return mainWindowBounds;
}
</source>
<source file="systems/config/GUIConfig.java" startline="100" endline="107">
public void setMainWindowBounds (Rectangle bounds, boolean isMaximized) {
    if (! isMaximized) {
        mainWindowBounds = bounds;
    }
    isMainWindowMaximized = isMaximized;
}
</source>
<source file="systems/config/GUIConfig.java" startline="113" endline="127">
public int getColumnWidth (Fetcher fetcher) {
    int width = preferences.getInt ("columnWidth." + fetcher.getId (), 0);
    if (width == 0) {
        if (fetcher instanceof IPFetcher || fetcher instanceof HostnameFetcher) width = 140;
        else if (fetcher instanceof PingFetcher) width = 60;
        else width = 90;
    }
    return width;
}
</source>
<source file="systems/config/GUIConfig.java" startline="134" endline="137">
public void setColumnWidth (Fetcher fetcher, int width) {
    preferences.putInt ("columnWidth." + fetcher.getId (), width);
}
</source>
